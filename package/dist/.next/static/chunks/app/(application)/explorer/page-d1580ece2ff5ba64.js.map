{"version":3,"file":"static/chunks/app/(application)/explorer/page-d1580ece2ff5ba64.js","mappings":"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","sources":["webpack://_N_E/?e05f","webpack://_N_E/./app/(application)/explorer/graphiql.tsx","webpack://_N_E/./components/config-context.tsx","webpack://_N_E/./components/ui/alert.tsx","webpack://_N_E/./components/ui/skeleton.tsx","webpack://_N_E/./lib/utils.ts","webpack://_N_E/./util/api.ts","webpack://_N_E/./app/graphiql.css"],"sourcesContent":["import(/* webpackMode: \"eager\", webpackExports: [\"default\"] */ \"/Users/daniel.claessen/Desktop/Projects/exulu/frontend/app/(application)/explorer/graphiql.tsx\");\n","\"use client\";\n\nimport {createGraphiQLFetcher} from \"@graphiql/toolkit\";\nimport {GraphiQL} from \"graphiql\";\nimport React from \"react\";\nimport 'graphiql/graphiql.css';\nimport '../../graphiql.css';\nimport { useQuery } from \"@tanstack/react-query\";\nimport { getToken } from \"@/util/api\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Alert, AlertDescription, AlertTitle } from \"@/components/ui/alert\";\nimport { ExclamationTriangleIcon } from \"@radix-ui/react-icons\";\nimport { ConfigContext } from \"@/components/config-context\";\n\nexport default function GraphiQLComponent() {\n\n    const configContext = React.useContext(ConfigContext);\n\n    const { data, isLoading, error } = useQuery({\n        queryKey: [\"user\"],\n        queryFn: () => getToken()\n    });\n\n    if (isLoading) {\n        return <Skeleton className=\"h-10 w-20\" /> \n    }\n\n    if (error) {\n        return   <Alert variant=\"destructive\">\n        <ExclamationTriangleIcon className=\"size-4\" />\n        <AlertTitle>Error</AlertTitle>\n        <AlertDescription>\n            {error.message}\n        </AlertDescription>\n      </Alert>\n    }\n    \n    console.log(\"token\", data)\n\n    const fetcher = createGraphiQLFetcher({\n        url: `${configContext?.backend}/graphql`, headers: {\n            \"Authorization\": `Bearer ${data}`\n        }\n    });\n\n    return <GraphiQL fetcher={fetcher}/>\n}","\"use client\"\nimport { BackendConfigType } from \"@/util/api\";\nimport { createContext } from \"react\";\n\nexport type ConfigContextType = {\n    backend: string;\n    google_client_id: string;\n    auth_mode: string;\n} & BackendConfigType;\n\nexport const ConfigContext = createContext<ConfigContextType | null>(null);\n\nexport function ConfigContextProvider({ children, config }: {\n  children: React.ReactNode;\n  config: ConfigContextType;\n}) {\n\n  console.log(\"[EXULU] Config: \", config);\n\n  if (!config) {\n    throw new Error(\"Config not found\");\n  }\n\n  return (\n    <ConfigContext.Provider value={config}>\n      {children}\n    </ConfigContext.Provider>\n  );\n}\n","import { cva, type VariantProps } from \"class-variance-authority\";\nimport * as React from \"react\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n        info: \"border-info/50 text-info dark:border-info [&>svg]:text-info\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  },\n);\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n));\nAlert.displayName = \"Alert\";\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n));\nAlertTitle.displayName = \"AlertTitle\";\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n));\nAlertDescription.displayName = \"AlertDescription\";\n\nexport { Alert, AlertTitle, AlertDescription };\n","import { cn } from \"@/lib/utils\";\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  );\n}\n\nexport { Skeleton };\n","import { type ClassValue, clsx } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\n\nexport function formatDuration(seconds: number): string {\n  if (!seconds) return '0s';\n  \n  const hours = Math.floor(seconds / 3600);\n  const minutes = Math.floor((seconds % 3600) / 60);\n  const remainingSeconds = Math.round(seconds % 60);\n\n  if (hours > 0) {\n    return `${hours}h ${minutes}m`;\n  } else if (minutes > 0) {\n    return `${minutes}m ${remainingSeconds}s`;\n  } else {\n    return `${remainingSeconds}s`;\n  }\n}","import { getSession } from \"next-auth/react\";\n\nexport type ImageStyle = \"origami\" | \"anime\" | \"japanese_anime\" | \"vaporwave\" | \"lego\" | \"paper_cut\" | \"felt_puppet\" | \"3d\" | \"app_icon\" | \"pixel_art\" | \"isometric\";\n\nconst getUris = async () => {\n    // Server-side: use environment variable directly\n    if (typeof window === 'undefined') {\n        const backend = process.env.BACKEND;\n        if (!backend) {\n            throw new Error(\"No backend set.\")\n        }\n        return {\n            files: backend,\n            base: backend\n        }\n    }\n\n    // Client-side: fetch from API\n    const context = await fetch(\"/api/config\").then(res => res.json());\n    if (!context.backend) {\n        throw new Error(\"No backend set.\")\n    }\n    return {\n        files: context.backend,\n        base: context.backend\n    }\n}\n\nexport const getToken = async () => {\n    const session = await getSession()\n    // @ts-ignore\n    return session?.user?.jwt;\n}\n\nexport type BackendConfigType = {\n    fileUploads?: {\n        s3endpoint: string;\n    }\n    workers?: {\n        redisHost: string;\n        enabled: boolean;\n    }\n}\n\nexport type ThemeConfig = {\n    light?: Record<string, string>;\n    dark?: Record<string, string>;\n}\n\nexport const config = {\n    backend: async (): Promise<Response> => {\n        const uris = await getUris();\n        const url = `${uris.base}/config`\n        return fetch(url, {\n            method: \"GET\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n            },\n        })\n    },\n    theme: async (): Promise<ThemeConfig> => {\n        try {\n            const token = await getToken();\n            const uris = await getUris();\n            const res = await fetch(`${uris.base}/theme`, {\n                method: \"GET\",\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                    \"Authorization\": `Bearer ${token}`,\n                },\n            })\n            const json = await res.json();\n            return json.theme;\n        } catch (error) {\n            console.error(\"Error fetching theme config:\", error);\n            return { light: {}, dark: {} };\n        }\n    }\n}\n\nexport const agents = {\n    image: {\n        generate: async (parameters: {\n            name: string,\n            description: string,\n            style?: ImageStyle\n        }): Promise<any> => {\n\n            const uris = await getUris();\n            const url = `${uris.base}/generate/agent/image`;\n            const token = await getToken()\n\n            if (!token) {\n                throw new Error(\"No valid session token available.\")\n            }\n\n            return fetch(url, {\n                method: \"POST\",\n                body: JSON.stringify(parameters),\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                    Authorization: `Bearer ${token}`,\n                },\n            });\n        }\n    }\n}\n\nexport type S3FileListOutput = {\n    \"$metadata\": {\n        \"httpStatusCode\": number,\n        \"attempts\": number,\n        \"totalRetryDelay\": number\n    },\n    \"Contents\": {\n        \"Key\": string,\n        \"LastModified\": string,\n        \"ETag\": string,\n        \"Size\": number\n    }[]\n    \"IsTruncated\": boolean,\n    \"NextContinuationToken\": string,\n    \"KeyCount\": number,\n    \"MaxKeys\": number,\n    \"Name\": string,\n    \"Prefix\": string\n}\n\nexport type S3ObjectOutput = {\n    \"$metadata\": {\n        \"httpStatusCode\": number,\n        \"attempts\": number,\n        \"totalRetryDelay\": number\n    },\n    \"AcceptRanges\": \"bytes\",\n    \"LastModified\": string,\n    \"ContentLength\": number,\n    \"ChecksumCRC32C\": string,\n    \"ETag\": string,\n    \"CacheControl\": string,\n    \"ContentType\": string,\n    \"Expires\": string,\n    \"ExpiresString\": string\n}\n\nexport const files = {\n    object: async (key: string): Promise<S3ObjectOutput> => {\n        const uris = await getUris();\n        let url = `${uris.files}/s3/object`;\n        const token = await getToken()\n        const response = await fetch(url, {\n            method: \"POST\",\n            body: JSON.stringify({ key }),\n            headers: {\n                \"Content-Type\": \"application/json\",\n                Authorization: `Bearer ${token}`,\n            },\n        });\n        return response.json();\n    },\n    list: async ({ search, continuationToken }: { search?: string, continuationToken?: string }): Promise<S3FileListOutput> => {\n        const uris = await getUris();\n        let url = `${uris.files}/s3/list`;\n        const token = await getToken()\n\n        if (!token) {\n            throw new Error(\"No valid session token available.\")\n        }\n\n        if (search) {\n            url += `?search=${search}`;\n        }\n\n        if (continuationToken) {\n            url += `?continuationToken=${continuationToken}`;\n        }\n\n        const response = await fetch(url, {\n            method: \"GET\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                Authorization: `Bearer ${token}`,\n            },\n        });\n        return response.json();\n    },\n    download: async (key: string) => {\n\n        const uris = await getUris();\n        let url = `${uris.files}/s3/download?key=${key}`;\n\n        const token = await getToken()\n\n        if (!token) {\n            throw new Error(\"No valid session token available.\")\n        }\n\n        return fetch(url, {\n            method: \"GET\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                Authorization: `Bearer ${token}`,\n            },\n        });\n    },\n    delete: async (key: string) => {\n\n        const uris = await getUris();\n        let url = `${uris.files}/s3/delete?key=${key}`;\n        const token = await getToken()\n\n        if (!token) {\n            throw new Error(\"No valid session token available.\")\n        }\n\n        return fetch(url, {\n            method: \"DELETE\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                Authorization: `Bearer ${token}`,\n            },\n        });\n    }\n}\n","// extracted by mini-css-extract-plugin"],"names":["Promise","resolve","then","__webpack_require__","bind","GraphiQLComponent","configContext","React","ConfigContext","data","isLoading","error","useQuery","queryKey","queryFn","getToken","react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__","jsx","Skeleton","className","jsxs","Alert","variant","ExclamationTriangleIcon","AlertTitle","AlertDescription","message","console","log","fetcher","createGraphiQLFetcher","url","concat","backend","headers","GraphiQL","createContext","ConfigContextProvider","param","children","config","Provider","value","alertVariants","cva","variants","default","destructive","info","defaultVariants","ref","props","div","role","cn","displayName","h5","_len","arguments","length","inputs","_key","twMerge","clsx","getUris","context","fetch","res","json","files","base","session","getSession","user","jwt","agents","image","generate","parameters","uris","token","method","body","JSON","stringify","Authorization","object","key","response","list","search","continuationToken","download","delete"],"sourceRoot":""}