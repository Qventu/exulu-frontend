{"version":3,"file":"static/chunks/789.68d33464d554bf4e.js","mappings":"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","sources":["webpack://_N_E/./node_modules/codemirror/addon/fold/brace-fold.js"],"sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/5/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nfunction bracketFolding(pairs) {\n  return function(cm, start) {\n    var line = start.line, lineText = cm.getLine(line);\n\n    function findOpening(pair) {\n      var tokenType;\n      for (var at = start.ch, pass = 0;;) {\n        var found = at <= 0 ? -1 : lineText.lastIndexOf(pair[0], at - 1);\n        if (found == -1) {\n          if (pass == 1) break;\n          pass = 1;\n          at = lineText.length;\n          continue;\n        }\n        if (pass == 1 && found < start.ch) break;\n        tokenType = cm.getTokenTypeAt(CodeMirror.Pos(line, found + 1));\n        if (!/^(comment|string)/.test(tokenType)) return {ch: found + 1, tokenType: tokenType, pair: pair};\n        at = found - 1;\n      }\n    }\n\n    function findRange(found) {\n      var count = 1, lastLine = cm.lastLine(), end, startCh = found.ch, endCh\n      outer: for (var i = line; i <= lastLine; ++i) {\n        var text = cm.getLine(i), pos = i == line ? startCh : 0;\n        for (;;) {\n          var nextOpen = text.indexOf(found.pair[0], pos), nextClose = text.indexOf(found.pair[1], pos);\n          if (nextOpen < 0) nextOpen = text.length;\n          if (nextClose < 0) nextClose = text.length;\n          pos = Math.min(nextOpen, nextClose);\n          if (pos == text.length) break;\n          if (cm.getTokenTypeAt(CodeMirror.Pos(i, pos + 1)) == found.tokenType) {\n            if (pos == nextOpen) ++count;\n            else if (!--count) { end = i; endCh = pos; break outer; }\n          }\n          ++pos;\n        }\n      }\n\n      if (end == null || line == end) return null\n      return {from: CodeMirror.Pos(line, startCh),\n              to: CodeMirror.Pos(end, endCh)};\n    }\n\n    var found = []\n    for (var i = 0; i < pairs.length; i++) {\n      var open = findOpening(pairs[i])\n      if (open) found.push(open)\n    }\n    found.sort(function(a, b) { return a.ch - b.ch })\n    for (var i = 0; i < found.length; i++) {\n      var range = findRange(found[i])\n      if (range) return range\n    }\n    return null\n  }\n}\n\nCodeMirror.registerHelper(\"fold\", \"brace\", bracketFolding([[\"{\", \"}\"], [\"[\", \"]\"]]));\n\nCodeMirror.registerHelper(\"fold\", \"brace-paren\", bracketFolding([[\"{\", \"}\"], [\"[\", \"]\"], [\"(\", \")\"]]));\n\nCodeMirror.registerHelper(\"fold\", \"import\", function(cm, start) {\n  function hasImport(line) {\n    if (line < cm.firstLine() || line > cm.lastLine()) return null;\n    var start = cm.getTokenAt(CodeMirror.Pos(line, 1));\n    if (!/\\S/.test(start.string)) start = cm.getTokenAt(CodeMirror.Pos(line, start.end + 1));\n    if (start.type != \"keyword\" || start.string != \"import\") return null;\n    // Now find closing semicolon, return its position\n    for (var i = line, e = Math.min(cm.lastLine(), line + 10); i <= e; ++i) {\n      var text = cm.getLine(i), semi = text.indexOf(\";\");\n      if (semi != -1) return {startCh: start.end, end: CodeMirror.Pos(i, semi)};\n    }\n  }\n\n  var startLine = start.line, has = hasImport(startLine), prev;\n  if (!has || hasImport(startLine - 1) || ((prev = hasImport(startLine - 2)) && prev.end.line == startLine - 1))\n    return null;\n  for (var end = has.end;;) {\n    var next = hasImport(end.line + 1);\n    if (next == null) break;\n    end = next.end;\n  }\n  return {from: cm.clipPos(CodeMirror.Pos(startLine, has.startCh + 1)), to: end};\n});\n\nCodeMirror.registerHelper(\"fold\", \"include\", function(cm, start) {\n  function hasInclude(line) {\n    if (line < cm.firstLine() || line > cm.lastLine()) return null;\n    var start = cm.getTokenAt(CodeMirror.Pos(line, 1));\n    if (!/\\S/.test(start.string)) start = cm.getTokenAt(CodeMirror.Pos(line, start.end + 1));\n    if (start.type == \"meta\" && start.string.slice(0, 8) == \"#include\") return start.start + 8;\n  }\n\n  var startLine = start.line, has = hasInclude(startLine);\n  if (has == null || hasInclude(startLine - 1) != null) return null;\n  for (var end = startLine;;) {\n    var next = hasInclude(end + 1);\n    if (next == null) break;\n    ++end;\n  }\n  return {from: CodeMirror.Pos(startLine, has + 1),\n          to: cm.clipPos(CodeMirror.Pos(end))};\n});\n\n});\n"],"names":["mod","CodeMirror","bracketFolding","pairs","cm","start","line","lineText","getLine","found","i","length","open","findOpening","pair","tokenType","at","ch","pass","lastIndexOf","getTokenTypeAt","Pos","test","push","sort","a","b","range","findRange","end","endCh","count","lastLine","startCh","outer","text","pos","nextOpen","indexOf","nextClose","Math","min","from","to","registerHelper","hasImport","firstLine","getTokenAt","string","type","e","semi","prev","startLine","has","next","clipPos","hasInclude","slice","__webpack_require__"],"sourceRoot":""}