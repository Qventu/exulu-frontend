{"version":3,"file":"static/chunks/7734.7beab36c0bdfc2e6.js","mappings":"mIAAe,SAAAA,EAAAC,CAAA,CAAAC,CAAA,EACf,IAAAC,EAAAC,EACA,IAAYC,OAAAA,CAAA,CAAAC,YAAAA,CAAA,EAAsBL,EAIlC,OAAAM,CAHA,GAAAF,IAAAA,EAAAG,MAAA,CAEAH,EAAAI,EAAA,cAAAN,CAAAA,EAAA,KAAAO,aAAA,GAAAP,KAAA,IAAAA,EAAA,OAAAA,EAAAQ,IAAA,CAAAT,EAAA,OADAI,CACA,GACA,YAAAF,CAAAA,EAAA,KAAAQ,MAAA,GAAAR,KAAA,IAAAA,EAAA,OAAAA,EAAAS,UAAA,KACA,8ECJAC,IAAAC,UAAqB,qBAAAH,IACrB,IAAAI,EAAmB,GAAAC,EAAAC,EAAA,EAAY,CAC/BC,cAAAC,GAAAA,EAAAC,QAAA,GACAC,SAAAC,EACAC,WAAAC,EACAC,aAAA,CAAwBC,QAAAf,EAAAe,OAAA,CACxB,GACA,OACAf,OAAAA,EACAgB,WAAAZ,EAAAY,UAAA,CACAC,MAAAb,EAAAa,KAAA,CACA7B,OAAc8B,EAAAC,CAAA,CACdrB,cAAA,YACAsB,KAAA,QACAC,cAAA,CACAC,MAAA,SACAC,QAAA,MACA,CACA,CACA,GACA,IAAAZ,EAAA,CACAa,YAAA,kBACAC,OAAA,4DACAC,OAAA,0DACAC,QAAA,kBACA,EACAd,EAAA,CACAe,SAAA,CAAe,GAAAvB,EAAAwB,CAAA,EAAC,KAAO,GAAAxB,EAAAyB,EAAA,EAAI,WAAa,GAAAzB,EAAA0B,EAAA,EAAI,GAAA1B,EAAAwB,CAAA,EAAC,OAAS,GAAAxB,EAAAwB,CAAA,EAAC,KAAG,CAC1DG,SAAA,CAAAC,EAAA,YAAqC,GAAA5B,EAAAwB,CAAA,EAAC,cACtCK,MAAAjB,CAAA,EACA,OAAAA,EAAAkB,IAAA,EACA,aACA,mBACA,cACA,mBACA,mBACA,OAAAlB,EAAAmB,KAAA,EACA,QACA,iBACA,SACA,mBACA,CACA,WACA,eACA,OAAAnB,EAAAmB,KAAA,EACA,WACA,YACA,oBACA,YACA,iBACA,CACA,WACA,CACA,EACAC,YAAA,CAAkB,GAAAhC,EAAAiC,CAAA,EAAC,oBACnBC,YAAA,CAAkB,GAAAlC,EAAAiC,CAAA,EAAC,oBACnBE,aAAA,CAAmB,GAAAnC,EAAAiC,CAAA,EAAC,sBACpBG,UAAA,CAAgB,GAAApC,EAAAiC,CAAA,EAAC,sBACjBI,UAAA,CAAgB,GAAArC,EAAAwB,CAAA,EAAC,KAAO,GAAAxB,EAAAyB,EAAA,EAAI,QAAU,GAAAzB,EAAA0B,EAAA,EAAI,GAAA1B,EAAAwB,CAAA,EAAC,OAAS,GAAAxB,EAAAwB,CAAA,EAAC,MACrDc,YAAA,CAAkB,GAAAtC,EAAAwB,CAAA,EAAC,KAAO,GAAAxB,EAAAyB,EAAA,EAAI,cAAgB,GAAAzB,EAAA0B,EAAA,EAAI,GAAA1B,EAAAwB,CAAA,EAAC,OAAS,GAAAxB,EAAAwB,CAAA,EAAC,KAAG,CAChEe,YAAA,CAAAX,EAAA,aAAyC,GAAA5B,EAAAwB,CAAA,EAAC,eAE1C,SAAAI,EAAAY,CAAA,EACA,OACAA,MAAAA,EACAC,MAAA,GAAA7B,WAAAA,EAAAkB,IAAA,CACAY,OAAA1D,CAAA,CAAA4B,CAAA,EACA5B,EAAA2D,IAAA,CAAA/B,EAAAmB,KAAA,CAAAa,KAAA,MACA,CACA,CACA","sources":["webpack://_N_E/./node_modules/codemirror-graphql/esm/utils/mode-indent.js","webpack://_N_E/./node_modules/codemirror-graphql/esm/variables/mode.js"],"sourcesContent":["export default function indent(state, textAfter) {\n    var _a, _b;\n    const { levels, indentLevel } = state;\n    const level = !levels || levels.length === 0\n        ? indentLevel\n        : levels.at(-1) - (((_a = this.electricInput) === null || _a === void 0 ? void 0 : _a.test(textAfter)) ? 1 : 0);\n    return (level || 0) * (((_b = this.config) === null || _b === void 0 ? void 0 : _b.indentUnit) || 0);\n}\n//# sourceMappingURL=mode-indent.js.map","import CodeMirror from 'codemirror';\nimport { list, t, onlineParser, opt, p, } from 'graphql-language-service';\nimport indent from '../utils/mode-indent';\nCodeMirror.defineMode('graphql-variables', config => {\n    const parser = onlineParser({\n        eatWhitespace: stream => stream.eatSpace(),\n        lexRules: LexRules,\n        parseRules: ParseRules,\n        editorConfig: { tabSize: config.tabSize },\n    });\n    return {\n        config,\n        startState: parser.startState,\n        token: parser.token,\n        indent,\n        electricInput: /^\\s*[}\\]]/,\n        fold: 'brace',\n        closeBrackets: {\n            pairs: '[]{}\"\"',\n            explode: '[]{}',\n        },\n    };\n});\nconst LexRules = {\n    Punctuation: /^\\[|]|\\{|\\}|:|,/,\n    Number: /^-?(?:0|(?:[1-9][0-9]*))(?:\\.[0-9]*)?(?:[eE][+-]?[0-9]+)?/,\n    String: /^\"(?:[^\"\\\\]|\\\\(?:\"|\\/|\\\\|b|f|n|r|t|u[0-9a-fA-F]{4}))*\"?/,\n    Keyword: /^true|false|null/,\n};\nconst ParseRules = {\n    Document: [p('{'), list('Variable', opt(p(','))), p('}')],\n    Variable: [namedKey('variable'), p(':'), 'Value'],\n    Value(token) {\n        switch (token.kind) {\n            case 'Number':\n                return 'NumberValue';\n            case 'String':\n                return 'StringValue';\n            case 'Punctuation':\n                switch (token.value) {\n                    case '[':\n                        return 'ListValue';\n                    case '{':\n                        return 'ObjectValue';\n                }\n                return null;\n            case 'Keyword':\n                switch (token.value) {\n                    case 'true':\n                    case 'false':\n                        return 'BooleanValue';\n                    case 'null':\n                        return 'NullValue';\n                }\n                return null;\n        }\n    },\n    NumberValue: [t('Number', 'number')],\n    StringValue: [t('String', 'string')],\n    BooleanValue: [t('Keyword', 'builtin')],\n    NullValue: [t('Keyword', 'keyword')],\n    ListValue: [p('['), list('Value', opt(p(','))), p(']')],\n    ObjectValue: [p('{'), list('ObjectField', opt(p(','))), p('}')],\n    ObjectField: [namedKey('attribute'), p(':'), 'Value'],\n};\nfunction namedKey(style) {\n    return {\n        style,\n        match: (token) => token.kind === 'String',\n        update(state, token) {\n            state.name = token.value.slice(1, -1);\n        },\n    };\n}\n//# sourceMappingURL=mode.js.map"],"names":["indent","state","textAfter","_a","_b","levels","indentLevel","level","length","at","electricInput","test","config","indentUnit","codemirror__WEBPACK_IMPORTED_MODULE_0___default","defineMode","parser","graphql_language_service__WEBPACK_IMPORTED_MODULE_1__","Xs","eatWhitespace","stream","eatSpace","lexRules","LexRules","parseRules","ParseRules","editorConfig","tabSize","startState","token","_utils_mode_indent__WEBPACK_IMPORTED_MODULE_2__","Z","fold","closeBrackets","pairs","explode","Punctuation","Number","String","Keyword","Document","p","pb","MD","Variable","namedKey","Value","kind","value","NumberValue","t","StringValue","BooleanValue","NullValue","ListValue","ObjectValue","ObjectField","style","match","update","name","slice"],"sourceRoot":""}