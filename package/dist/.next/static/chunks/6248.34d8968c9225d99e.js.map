{"version":3,"file":"static/chunks/6248.34d8968c9225d99e.js","mappings":"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","sources":["webpack://_N_E/./node_modules/codemirror/addon/dialog/dialog.js","webpack://_N_E/./node_modules/codemirror/addon/search/search.js","webpack://_N_E/./node_modules/codemirror/addon/search/searchcursor.js"],"sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/5/LICENSE\n\n// Open simple dialogs on top of an editor. Relies on dialog.css.\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  function dialogDiv(cm, template, bottom) {\n    var wrap = cm.getWrapperElement();\n    var dialog;\n    dialog = wrap.appendChild(document.createElement(\"div\"));\n    if (bottom)\n      dialog.className = \"CodeMirror-dialog CodeMirror-dialog-bottom\";\n    else\n      dialog.className = \"CodeMirror-dialog CodeMirror-dialog-top\";\n\n    if (typeof template == \"string\") {\n      dialog.innerHTML = template;\n    } else { // Assuming it's a detached DOM element.\n      dialog.appendChild(template);\n    }\n    CodeMirror.addClass(wrap, 'dialog-opened');\n    return dialog;\n  }\n\n  function closeNotification(cm, newVal) {\n    if (cm.state.currentNotificationClose)\n      cm.state.currentNotificationClose();\n    cm.state.currentNotificationClose = newVal;\n  }\n\n  CodeMirror.defineExtension(\"openDialog\", function(template, callback, options) {\n    if (!options) options = {};\n\n    closeNotification(this, null);\n\n    var dialog = dialogDiv(this, template, options.bottom);\n    var closed = false, me = this;\n    function close(newVal) {\n      if (typeof newVal == 'string') {\n        inp.value = newVal;\n      } else {\n        if (closed) return;\n        closed = true;\n        CodeMirror.rmClass(dialog.parentNode, 'dialog-opened');\n        dialog.parentNode.removeChild(dialog);\n        me.focus();\n\n        if (options.onClose) options.onClose(dialog);\n      }\n    }\n\n    var inp = dialog.getElementsByTagName(\"input\")[0], button;\n    if (inp) {\n      inp.focus();\n\n      if (options.value) {\n        inp.value = options.value;\n        if (options.selectValueOnOpen !== false) {\n          inp.select();\n        }\n      }\n\n      if (options.onInput)\n        CodeMirror.on(inp, \"input\", function(e) { options.onInput(e, inp.value, close);});\n      if (options.onKeyUp)\n        CodeMirror.on(inp, \"keyup\", function(e) {options.onKeyUp(e, inp.value, close);});\n\n      CodeMirror.on(inp, \"keydown\", function(e) {\n        if (options && options.onKeyDown && options.onKeyDown(e, inp.value, close)) { return; }\n        if (e.keyCode == 27 || (options.closeOnEnter !== false && e.keyCode == 13)) {\n          inp.blur();\n          CodeMirror.e_stop(e);\n          close();\n        }\n        if (e.keyCode == 13) callback(inp.value, e);\n      });\n\n      if (options.closeOnBlur !== false) CodeMirror.on(dialog, \"focusout\", function (evt) {\n        if (evt.relatedTarget !== null) close();\n      });\n    } else if (button = dialog.getElementsByTagName(\"button\")[0]) {\n      CodeMirror.on(button, \"click\", function() {\n        close();\n        me.focus();\n      });\n\n      if (options.closeOnBlur !== false) CodeMirror.on(button, \"blur\", close);\n\n      button.focus();\n    }\n    return close;\n  });\n\n  CodeMirror.defineExtension(\"openConfirm\", function(template, callbacks, options) {\n    closeNotification(this, null);\n    var dialog = dialogDiv(this, template, options && options.bottom);\n    var buttons = dialog.getElementsByTagName(\"button\");\n    var closed = false, me = this, blurring = 1;\n    function close() {\n      if (closed) return;\n      closed = true;\n      CodeMirror.rmClass(dialog.parentNode, 'dialog-opened');\n      dialog.parentNode.removeChild(dialog);\n      me.focus();\n    }\n    buttons[0].focus();\n    for (var i = 0; i < buttons.length; ++i) {\n      var b = buttons[i];\n      (function(callback) {\n        CodeMirror.on(b, \"click\", function(e) {\n          CodeMirror.e_preventDefault(e);\n          close();\n          if (callback) callback(me);\n        });\n      })(callbacks[i]);\n      CodeMirror.on(b, \"blur\", function() {\n        --blurring;\n        setTimeout(function() { if (blurring <= 0) close(); }, 200);\n      });\n      CodeMirror.on(b, \"focus\", function() { ++blurring; });\n    }\n  });\n\n  /*\n   * openNotification\n   * Opens a notification, that can be closed with an optional timer\n   * (default 5000ms timer) and always closes on click.\n   *\n   * If a notification is opened while another is opened, it will close the\n   * currently opened one and open the new one immediately.\n   */\n  CodeMirror.defineExtension(\"openNotification\", function(template, options) {\n    closeNotification(this, close);\n    var dialog = dialogDiv(this, template, options && options.bottom);\n    var closed = false, doneTimer;\n    var duration = options && typeof options.duration !== \"undefined\" ? options.duration : 5000;\n\n    function close() {\n      if (closed) return;\n      closed = true;\n      clearTimeout(doneTimer);\n      CodeMirror.rmClass(dialog.parentNode, 'dialog-opened');\n      dialog.parentNode.removeChild(dialog);\n    }\n\n    CodeMirror.on(dialog, 'click', function(e) {\n      CodeMirror.e_preventDefault(e);\n      close();\n    });\n\n    if (duration)\n      doneTimer = setTimeout(close, duration);\n\n    return close;\n  });\n});\n","// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/5/LICENSE\n\n// Define search commands. Depends on dialog.js or another\n// implementation of the openDialog method.\n\n// Replace works a little oddly -- it will do the replace on the next\n// Ctrl-G (or whatever is bound to findNext) press. You prevent a\n// replace by making sure the match is no longer selected when hitting\n// Ctrl-G.\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"), require(\"./searchcursor\"), require(\"../dialog/dialog\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\", \"./searchcursor\", \"../dialog/dialog\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  // default search panel location\n  CodeMirror.defineOption(\"search\", {bottom: false});\n\n  function searchOverlay(query, caseInsensitive) {\n    if (typeof query == \"string\")\n      query = new RegExp(query.replace(/[\\-\\[\\]\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|]/g, \"\\\\$&\"), caseInsensitive ? \"gi\" : \"g\");\n    else if (!query.global)\n      query = new RegExp(query.source, query.ignoreCase ? \"gi\" : \"g\");\n\n    return {token: function(stream) {\n      query.lastIndex = stream.pos;\n      var match = query.exec(stream.string);\n      if (match && match.index == stream.pos) {\n        stream.pos += match[0].length || 1;\n        return \"searching\";\n      } else if (match) {\n        stream.pos = match.index;\n      } else {\n        stream.skipToEnd();\n      }\n    }};\n  }\n\n  function SearchState() {\n    this.posFrom = this.posTo = this.lastQuery = this.query = null;\n    this.overlay = null;\n  }\n\n  function getSearchState(cm) {\n    return cm.state.search || (cm.state.search = new SearchState());\n  }\n\n  function queryCaseInsensitive(query) {\n    return typeof query == \"string\" && query == query.toLowerCase();\n  }\n\n  function getSearchCursor(cm, query, pos) {\n    // Heuristic: if the query string is all lowercase, do a case insensitive search.\n    return cm.getSearchCursor(query, pos, {caseFold: queryCaseInsensitive(query), multiline: true});\n  }\n\n  function persistentDialog(cm, text, deflt, onEnter, onKeyDown) {\n    cm.openDialog(text, onEnter, {\n      value: deflt,\n      selectValueOnOpen: true,\n      closeOnEnter: false,\n      onClose: function() { clearSearch(cm); },\n      onKeyDown: onKeyDown,\n      bottom: cm.options.search.bottom\n    });\n  }\n\n  function dialog(cm, text, shortText, deflt, f) {\n    if (cm.openDialog) cm.openDialog(text, f, {value: deflt, selectValueOnOpen: true, bottom: cm.options.search.bottom});\n    else f(prompt(shortText, deflt));\n  }\n\n  function confirmDialog(cm, text, shortText, fs) {\n    if (cm.openConfirm) cm.openConfirm(text, fs);\n    else if (confirm(shortText)) fs[0]();\n  }\n\n  function parseString(string) {\n    return string.replace(/\\\\([nrt\\\\])/g, function(match, ch) {\n      if (ch == \"n\") return \"\\n\"\n      if (ch == \"r\") return \"\\r\"\n      if (ch == \"t\") return \"\\t\"\n      if (ch == \"\\\\\") return \"\\\\\"\n      return match\n    })\n  }\n\n  function parseQuery(query) {\n    var isRE = query.match(/^\\/(.*)\\/([a-z]*)$/);\n    if (isRE) {\n      try { query = new RegExp(isRE[1], isRE[2].indexOf(\"i\") == -1 ? \"\" : \"i\"); }\n      catch(e) {} // Not a regular expression after all, do a string search\n    } else {\n      query = parseString(query)\n    }\n    if (typeof query == \"string\" ? query == \"\" : query.test(\"\"))\n      query = /x^/;\n    return query;\n  }\n\n  function startSearch(cm, state, query) {\n    state.queryText = query;\n    state.query = parseQuery(query);\n    cm.removeOverlay(state.overlay, queryCaseInsensitive(state.query));\n    state.overlay = searchOverlay(state.query, queryCaseInsensitive(state.query));\n    cm.addOverlay(state.overlay);\n    if (cm.showMatchesOnScrollbar) {\n      if (state.annotate) { state.annotate.clear(); state.annotate = null; }\n      state.annotate = cm.showMatchesOnScrollbar(state.query, queryCaseInsensitive(state.query));\n    }\n  }\n\n  function doSearch(cm, rev, persistent, immediate) {\n    var state = getSearchState(cm);\n    if (state.query) return findNext(cm, rev);\n    var q = cm.getSelection() || state.lastQuery;\n    if (q instanceof RegExp && q.source == \"x^\") q = null\n    if (persistent && cm.openDialog) {\n      var hiding = null\n      var searchNext = function(query, event) {\n        CodeMirror.e_stop(event);\n        if (!query) return;\n        if (query != state.queryText) {\n          startSearch(cm, state, query);\n          state.posFrom = state.posTo = cm.getCursor();\n        }\n        if (hiding) hiding.style.opacity = 1\n        findNext(cm, event.shiftKey, function(_, to) {\n          var dialog\n          if (to.line < 3 && document.querySelector &&\n              (dialog = cm.display.wrapper.querySelector(\".CodeMirror-dialog\")) &&\n              dialog.getBoundingClientRect().bottom - 4 > cm.cursorCoords(to, \"window\").top)\n            (hiding = dialog).style.opacity = .4\n        })\n      };\n      persistentDialog(cm, getQueryDialog(cm), q, searchNext, function(event, query) {\n        var keyName = CodeMirror.keyName(event)\n        var extra = cm.getOption('extraKeys'), cmd = (extra && extra[keyName]) || CodeMirror.keyMap[cm.getOption(\"keyMap\")][keyName]\n        if (cmd == \"findNext\" || cmd == \"findPrev\" ||\n          cmd == \"findPersistentNext\" || cmd == \"findPersistentPrev\") {\n          CodeMirror.e_stop(event);\n          startSearch(cm, getSearchState(cm), query);\n          cm.execCommand(cmd);\n        } else if (cmd == \"find\" || cmd == \"findPersistent\") {\n          CodeMirror.e_stop(event);\n          searchNext(query, event);\n        }\n      });\n      if (immediate && q) {\n        startSearch(cm, state, q);\n        findNext(cm, rev);\n      }\n    } else {\n      dialog(cm, getQueryDialog(cm), \"Search for:\", q, function(query) {\n        if (query && !state.query) cm.operation(function() {\n          startSearch(cm, state, query);\n          state.posFrom = state.posTo = cm.getCursor();\n          findNext(cm, rev);\n        });\n      });\n    }\n  }\n\n  function findNext(cm, rev, callback) {cm.operation(function() {\n    var state = getSearchState(cm);\n    var cursor = getSearchCursor(cm, state.query, rev ? state.posFrom : state.posTo);\n    if (!cursor.find(rev)) {\n      cursor = getSearchCursor(cm, state.query, rev ? CodeMirror.Pos(cm.lastLine()) : CodeMirror.Pos(cm.firstLine(), 0));\n      if (!cursor.find(rev)) return;\n    }\n    cm.setSelection(cursor.from(), cursor.to());\n    cm.scrollIntoView({from: cursor.from(), to: cursor.to()}, 20);\n    state.posFrom = cursor.from(); state.posTo = cursor.to();\n    if (callback) callback(cursor.from(), cursor.to())\n  });}\n\n  function clearSearch(cm) {cm.operation(function() {\n    var state = getSearchState(cm);\n    state.lastQuery = state.query;\n    if (!state.query) return;\n    state.query = state.queryText = null;\n    cm.removeOverlay(state.overlay);\n    if (state.annotate) { state.annotate.clear(); state.annotate = null; }\n  });}\n\n  function el(tag, attrs) {\n    var element = tag ? document.createElement(tag) : document.createDocumentFragment();\n    for (var key in attrs) {\n      element[key] = attrs[key];\n    }\n    for (var i = 2; i < arguments.length; i++) {\n      var child = arguments[i]\n      element.appendChild(typeof child == \"string\" ? document.createTextNode(child) : child);\n    }\n    return element;\n  }\n\n  function getQueryDialog(cm)  {\n    var label = el(\"label\", {className: \"CodeMirror-search-label\"},\n                   cm.phrase(\"Search:\"),\n                   el(\"input\", {type: \"text\", \"style\": \"width: 10em\", className: \"CodeMirror-search-field\",\n                                id: \"CodeMirror-search-field\"}));\n    label.setAttribute(\"for\",\"CodeMirror-search-field\");\n    return el(\"\", null, label, \" \",\n              el(\"span\", {style: \"color: #666\", className: \"CodeMirror-search-hint\"},\n                 cm.phrase(\"(Use /re/ syntax for regexp search)\")));\n  }\n  function getReplaceQueryDialog(cm) {\n    return el(\"\", null, \" \",\n              el(\"input\", {type: \"text\", \"style\": \"width: 10em\", className: \"CodeMirror-search-field\"}), \" \",\n              el(\"span\", {style: \"color: #666\", className: \"CodeMirror-search-hint\"},\n                 cm.phrase(\"(Use /re/ syntax for regexp search)\")));\n  }\n  function getReplacementQueryDialog(cm) {\n    return el(\"\", null,\n              el(\"span\", {className: \"CodeMirror-search-label\"}, cm.phrase(\"With:\")), \" \",\n              el(\"input\", {type: \"text\", \"style\": \"width: 10em\", className: \"CodeMirror-search-field\"}));\n  }\n  function getDoReplaceConfirm(cm) {\n    return el(\"\", null,\n              el(\"span\", {className: \"CodeMirror-search-label\"}, cm.phrase(\"Replace?\")), \" \",\n              el(\"button\", {}, cm.phrase(\"Yes\")), \" \",\n              el(\"button\", {}, cm.phrase(\"No\")), \" \",\n              el(\"button\", {}, cm.phrase(\"All\")), \" \",\n              el(\"button\", {}, cm.phrase(\"Stop\")));\n  }\n\n  function replaceAll(cm, query, text) {\n    cm.operation(function() {\n      for (var cursor = getSearchCursor(cm, query); cursor.findNext();) {\n        if (typeof query != \"string\") {\n          var match = cm.getRange(cursor.from(), cursor.to()).match(query);\n          cursor.replace(text.replace(/\\$(\\d)/g, function(_, i) {return match[i];}));\n        } else cursor.replace(text);\n      }\n    });\n  }\n\n  function replace(cm, all) {\n    if (cm.getOption(\"readOnly\")) return;\n    var query = cm.getSelection() || getSearchState(cm).lastQuery;\n    var dialogText = all ? cm.phrase(\"Replace all:\") : cm.phrase(\"Replace:\")\n    var fragment = el(\"\", null,\n                      el(\"span\", {className: \"CodeMirror-search-label\"}, dialogText),\n                      getReplaceQueryDialog(cm))\n    dialog(cm, fragment, dialogText, query, function(query) {\n      if (!query) return;\n      query = parseQuery(query);\n      dialog(cm, getReplacementQueryDialog(cm), cm.phrase(\"Replace with:\"), \"\", function(text) {\n        text = parseString(text)\n        if (all) {\n          replaceAll(cm, query, text)\n        } else {\n          clearSearch(cm);\n          var cursor = getSearchCursor(cm, query, cm.getCursor(\"from\"));\n          var advance = function() {\n            var start = cursor.from(), match;\n            if (!(match = cursor.findNext())) {\n              cursor = getSearchCursor(cm, query);\n              if (!(match = cursor.findNext()) ||\n                  (start && cursor.from().line == start.line && cursor.from().ch == start.ch)) return;\n            }\n            cm.setSelection(cursor.from(), cursor.to());\n            cm.scrollIntoView({from: cursor.from(), to: cursor.to()});\n            confirmDialog(cm, getDoReplaceConfirm(cm), cm.phrase(\"Replace?\"),\n                          [function() {doReplace(match);}, advance,\n                           function() {replaceAll(cm, query, text)}]);\n          };\n          var doReplace = function(match) {\n            cursor.replace(typeof query == \"string\" ? text :\n                           text.replace(/\\$(\\d)/g, function(_, i) {return match[i];}));\n            advance();\n          };\n          advance();\n        }\n      });\n    });\n  }\n\n  CodeMirror.commands.find = function(cm) {clearSearch(cm); doSearch(cm);};\n  CodeMirror.commands.findPersistent = function(cm) {clearSearch(cm); doSearch(cm, false, true);};\n  CodeMirror.commands.findPersistentNext = function(cm) {doSearch(cm, false, true, true);};\n  CodeMirror.commands.findPersistentPrev = function(cm) {doSearch(cm, true, true, true);};\n  CodeMirror.commands.findNext = doSearch;\n  CodeMirror.commands.findPrev = function(cm) {doSearch(cm, true);};\n  CodeMirror.commands.clearSearch = clearSearch;\n  CodeMirror.commands.replace = replace;\n  CodeMirror.commands.replaceAll = function(cm) {replace(cm, true);};\n});\n","// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/5/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"))\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod)\n  else // Plain browser env\n    mod(CodeMirror)\n})(function(CodeMirror) {\n  \"use strict\"\n  var Pos = CodeMirror.Pos\n\n  function regexpFlags(regexp) {\n    var flags = regexp.flags\n    return flags != null ? flags : (regexp.ignoreCase ? \"i\" : \"\")\n      + (regexp.global ? \"g\" : \"\")\n      + (regexp.multiline ? \"m\" : \"\")\n  }\n\n  function ensureFlags(regexp, flags) {\n    var current = regexpFlags(regexp), target = current\n    for (var i = 0; i < flags.length; i++) if (target.indexOf(flags.charAt(i)) == -1)\n      target += flags.charAt(i)\n    return current == target ? regexp : new RegExp(regexp.source, target)\n  }\n\n  function maybeMultiline(regexp) {\n    return /\\\\s|\\\\n|\\n|\\\\W|\\\\D|\\[\\^/.test(regexp.source)\n  }\n\n  function searchRegexpForward(doc, regexp, start) {\n    regexp = ensureFlags(regexp, \"g\")\n    for (var line = start.line, ch = start.ch, last = doc.lastLine(); line <= last; line++, ch = 0) {\n      regexp.lastIndex = ch\n      var string = doc.getLine(line), match = regexp.exec(string)\n      if (match)\n        return {from: Pos(line, match.index),\n                to: Pos(line, match.index + match[0].length),\n                match: match}\n    }\n  }\n\n  function searchRegexpForwardMultiline(doc, regexp, start) {\n    if (!maybeMultiline(regexp)) return searchRegexpForward(doc, regexp, start)\n\n    regexp = ensureFlags(regexp, \"gm\")\n    var string, chunk = 1\n    for (var line = start.line, last = doc.lastLine(); line <= last;) {\n      // This grows the search buffer in exponentially-sized chunks\n      // between matches, so that nearby matches are fast and don't\n      // require concatenating the whole document (in case we're\n      // searching for something that has tons of matches), but at the\n      // same time, the amount of retries is limited.\n      for (var i = 0; i < chunk; i++) {\n        if (line > last) break\n        var curLine = doc.getLine(line++)\n        string = string == null ? curLine : string + \"\\n\" + curLine\n      }\n      chunk = chunk * 2\n      regexp.lastIndex = start.ch\n      var match = regexp.exec(string)\n      if (match) {\n        var before = string.slice(0, match.index).split(\"\\n\"), inside = match[0].split(\"\\n\")\n        var startLine = start.line + before.length - 1, startCh = before[before.length - 1].length\n        return {from: Pos(startLine, startCh),\n                to: Pos(startLine + inside.length - 1,\n                        inside.length == 1 ? startCh + inside[0].length : inside[inside.length - 1].length),\n                match: match}\n      }\n    }\n  }\n\n  function lastMatchIn(string, regexp, endMargin) {\n    var match, from = 0\n    while (from <= string.length) {\n      regexp.lastIndex = from\n      var newMatch = regexp.exec(string)\n      if (!newMatch) break\n      var end = newMatch.index + newMatch[0].length\n      if (end > string.length - endMargin) break\n      if (!match || end > match.index + match[0].length)\n        match = newMatch\n      from = newMatch.index + 1\n    }\n    return match\n  }\n\n  function searchRegexpBackward(doc, regexp, start) {\n    regexp = ensureFlags(regexp, \"g\")\n    for (var line = start.line, ch = start.ch, first = doc.firstLine(); line >= first; line--, ch = -1) {\n      var string = doc.getLine(line)\n      var match = lastMatchIn(string, regexp, ch < 0 ? 0 : string.length - ch)\n      if (match)\n        return {from: Pos(line, match.index),\n                to: Pos(line, match.index + match[0].length),\n                match: match}\n    }\n  }\n\n  function searchRegexpBackwardMultiline(doc, regexp, start) {\n    if (!maybeMultiline(regexp)) return searchRegexpBackward(doc, regexp, start)\n    regexp = ensureFlags(regexp, \"gm\")\n    var string, chunkSize = 1, endMargin = doc.getLine(start.line).length - start.ch\n    for (var line = start.line, first = doc.firstLine(); line >= first;) {\n      for (var i = 0; i < chunkSize && line >= first; i++) {\n        var curLine = doc.getLine(line--)\n        string = string == null ? curLine : curLine + \"\\n\" + string\n      }\n      chunkSize *= 2\n\n      var match = lastMatchIn(string, regexp, endMargin)\n      if (match) {\n        var before = string.slice(0, match.index).split(\"\\n\"), inside = match[0].split(\"\\n\")\n        var startLine = line + before.length, startCh = before[before.length - 1].length\n        return {from: Pos(startLine, startCh),\n                to: Pos(startLine + inside.length - 1,\n                        inside.length == 1 ? startCh + inside[0].length : inside[inside.length - 1].length),\n                match: match}\n      }\n    }\n  }\n\n  var doFold, noFold\n  if (String.prototype.normalize) {\n    doFold = function(str) { return str.normalize(\"NFD\").toLowerCase() }\n    noFold = function(str) { return str.normalize(\"NFD\") }\n  } else {\n    doFold = function(str) { return str.toLowerCase() }\n    noFold = function(str) { return str }\n  }\n\n  // Maps a position in a case-folded line back to a position in the original line\n  // (compensating for codepoints increasing in number during folding)\n  function adjustPos(orig, folded, pos, foldFunc) {\n    if (orig.length == folded.length) return pos\n    for (var min = 0, max = pos + Math.max(0, orig.length - folded.length);;) {\n      if (min == max) return min\n      var mid = (min + max) >> 1\n      var len = foldFunc(orig.slice(0, mid)).length\n      if (len == pos) return mid\n      else if (len > pos) max = mid\n      else min = mid + 1\n    }\n  }\n\n  function searchStringForward(doc, query, start, caseFold) {\n    // Empty string would match anything and never progress, so we\n    // define it to match nothing instead.\n    if (!query.length) return null\n    var fold = caseFold ? doFold : noFold\n    var lines = fold(query).split(/\\r|\\n\\r?/)\n\n    search: for (var line = start.line, ch = start.ch, last = doc.lastLine() + 1 - lines.length; line <= last; line++, ch = 0) {\n      var orig = doc.getLine(line).slice(ch), string = fold(orig)\n      if (lines.length == 1) {\n        var found = string.indexOf(lines[0])\n        if (found == -1) continue search\n        var start = adjustPos(orig, string, found, fold) + ch\n        return {from: Pos(line, adjustPos(orig, string, found, fold) + ch),\n                to: Pos(line, adjustPos(orig, string, found + lines[0].length, fold) + ch)}\n      } else {\n        var cutFrom = string.length - lines[0].length\n        if (string.slice(cutFrom) != lines[0]) continue search\n        for (var i = 1; i < lines.length - 1; i++)\n          if (fold(doc.getLine(line + i)) != lines[i]) continue search\n        var end = doc.getLine(line + lines.length - 1), endString = fold(end), lastLine = lines[lines.length - 1]\n        if (endString.slice(0, lastLine.length) != lastLine) continue search\n        return {from: Pos(line, adjustPos(orig, string, cutFrom, fold) + ch),\n                to: Pos(line + lines.length - 1, adjustPos(end, endString, lastLine.length, fold))}\n      }\n    }\n  }\n\n  function searchStringBackward(doc, query, start, caseFold) {\n    if (!query.length) return null\n    var fold = caseFold ? doFold : noFold\n    var lines = fold(query).split(/\\r|\\n\\r?/)\n\n    search: for (var line = start.line, ch = start.ch, first = doc.firstLine() - 1 + lines.length; line >= first; line--, ch = -1) {\n      var orig = doc.getLine(line)\n      if (ch > -1) orig = orig.slice(0, ch)\n      var string = fold(orig)\n      if (lines.length == 1) {\n        var found = string.lastIndexOf(lines[0])\n        if (found == -1) continue search\n        return {from: Pos(line, adjustPos(orig, string, found, fold)),\n                to: Pos(line, adjustPos(orig, string, found + lines[0].length, fold))}\n      } else {\n        var lastLine = lines[lines.length - 1]\n        if (string.slice(0, lastLine.length) != lastLine) continue search\n        for (var i = 1, start = line - lines.length + 1; i < lines.length - 1; i++)\n          if (fold(doc.getLine(start + i)) != lines[i]) continue search\n        var top = doc.getLine(line + 1 - lines.length), topString = fold(top)\n        if (topString.slice(topString.length - lines[0].length) != lines[0]) continue search\n        return {from: Pos(line + 1 - lines.length, adjustPos(top, topString, top.length - lines[0].length, fold)),\n                to: Pos(line, adjustPos(orig, string, lastLine.length, fold))}\n      }\n    }\n  }\n\n  function SearchCursor(doc, query, pos, options) {\n    this.atOccurrence = false\n    this.afterEmptyMatch = false\n    this.doc = doc\n    pos = pos ? doc.clipPos(pos) : Pos(0, 0)\n    this.pos = {from: pos, to: pos}\n\n    var caseFold\n    if (typeof options == \"object\") {\n      caseFold = options.caseFold\n    } else { // Backwards compat for when caseFold was the 4th argument\n      caseFold = options\n      options = null\n    }\n\n    if (typeof query == \"string\") {\n      if (caseFold == null) caseFold = false\n      this.matches = function(reverse, pos) {\n        return (reverse ? searchStringBackward : searchStringForward)(doc, query, pos, caseFold)\n      }\n    } else {\n      query = ensureFlags(query, \"gm\")\n      if (!options || options.multiline !== false)\n        this.matches = function(reverse, pos) {\n          return (reverse ? searchRegexpBackwardMultiline : searchRegexpForwardMultiline)(doc, query, pos)\n        }\n      else\n        this.matches = function(reverse, pos) {\n          return (reverse ? searchRegexpBackward : searchRegexpForward)(doc, query, pos)\n        }\n    }\n  }\n\n  SearchCursor.prototype = {\n    findNext: function() {return this.find(false)},\n    findPrevious: function() {return this.find(true)},\n\n    find: function(reverse) {\n      var head = this.doc.clipPos(reverse ? this.pos.from : this.pos.to);\n      if (this.afterEmptyMatch && this.atOccurrence) {\n        // do not return the same 0 width match twice\n        head = Pos(head.line, head.ch)\n        if (reverse) {\n          head.ch--;\n          if (head.ch < 0) {\n            head.line--;\n            head.ch = (this.doc.getLine(head.line) || \"\").length;\n          }\n        } else {\n          head.ch++;\n          if (head.ch > (this.doc.getLine(head.line) || \"\").length) {\n            head.ch = 0;\n            head.line++;\n          }\n        }\n        if (CodeMirror.cmpPos(head, this.doc.clipPos(head)) != 0) {\n           return this.atOccurrence = false\n        }\n      }\n      var result = this.matches(reverse, head)\n      this.afterEmptyMatch = result && CodeMirror.cmpPos(result.from, result.to) == 0\n\n      if (result) {\n        this.pos = result\n        this.atOccurrence = true\n        return this.pos.match || true\n      } else {\n        var end = Pos(reverse ? this.doc.firstLine() : this.doc.lastLine() + 1, 0)\n        this.pos = {from: end, to: end}\n        return this.atOccurrence = false\n      }\n    },\n\n    from: function() {if (this.atOccurrence) return this.pos.from},\n    to: function() {if (this.atOccurrence) return this.pos.to},\n\n    replace: function(newText, origin) {\n      if (!this.atOccurrence) return\n      var lines = CodeMirror.splitLines(newText)\n      this.doc.replaceRange(lines, this.pos.from, this.pos.to, origin)\n      this.pos.to = Pos(this.pos.from.line + lines.length - 1,\n                        lines[lines.length - 1].length + (lines.length == 1 ? this.pos.from.ch : 0))\n    }\n  }\n\n  CodeMirror.defineExtension(\"getSearchCursor\", function(query, pos, caseFold) {\n    return new SearchCursor(this.doc, query, pos, caseFold)\n  })\n  CodeMirror.defineDocExtension(\"getSearchCursor\", function(query, pos, caseFold) {\n    return new SearchCursor(this, query, pos, caseFold)\n  })\n\n  CodeMirror.defineExtension(\"selectMatches\", function(query, caseFold) {\n    var ranges = []\n    var cur = this.getSearchCursor(query, this.getCursor(\"from\"), caseFold)\n    while (cur.findNext()) {\n      if (CodeMirror.cmpPos(cur.to(), this.getCursor(\"to\")) > 0) break\n      ranges.push({anchor: cur.from(), head: cur.to()})\n    }\n    if (ranges.length)\n      this.setSelections(ranges, 0)\n  })\n});\n"],"names":["mod","CodeMirror","dialogDiv","cm","template","bottom","dialog","wrap","getWrapperElement","appendChild","document","createElement","className","innerHTML","addClass","closeNotification","newVal","state","currentNotificationClose","defineExtension","callback","options","closed","me","close","inp","value","rmClass","parentNode","removeChild","focus","onClose","button","getElementsByTagName","selectValueOnOpen","select","onInput","on","e","onKeyUp","onKeyDown","keyCode","closeOnEnter","blur","e_stop","closeOnBlur","evt","relatedTarget","callbacks","buttons","blurring","i","length","b","e_preventDefault","setTimeout","doneTimer","duration","clearTimeout","__webpack_require__","SearchState","posFrom","posTo","lastQuery","query","overlay","getSearchState","search","queryCaseInsensitive","toLowerCase","getSearchCursor","pos","caseFold","multiline","text","shortText","deflt","f","openDialog","prompt","parseString","string","replace","match","ch","parseQuery","isRE","RegExp","indexOf","test","startSearch","caseInsensitive","queryText","removeOverlay","global","source","ignoreCase","token","stream","lastIndex","exec","index","skipToEnd","addOverlay","showMatchesOnScrollbar","annotate","clear","doSearch","rev","persistent","immediate","findNext","q","getSelection","hiding","searchNext","event","getCursor","style","opacity","shiftKey","_","to","line","querySelector","display","wrapper","getBoundingClientRect","cursorCoords","top","persistentDialog","onEnter","clearSearch","getQueryDialog","keyName","extra","getOption","cmd","keyMap","execCommand","operation","cursor","find","Pos","lastLine","firstLine","setSelection","from","scrollIntoView","el","tag","attrs","element","createDocumentFragment","key","arguments","child","createTextNode","label","phrase","type","id","setAttribute","replaceAll","getRange","all","dialogText","fragment","advance","fs","start","doReplace","openConfirm","confirm","defineOption","commands","findPersistent","findPersistentNext","findPersistentPrev","findPrev","doFold","noFold","ensureFlags","regexp","flags","current","target","charAt","maybeMultiline","searchRegexpForward","doc","last","getLine","lastMatchIn","endMargin","newMatch","end","searchRegexpBackward","first","adjustPos","orig","folded","foldFunc","min","max","Math","mid","len","slice","SearchCursor","atOccurrence","afterEmptyMatch","clipPos","matches","reverse","fold","lines","split","found","lastIndexOf","topString","cutFrom","endString","chunkSize","curLine","before","inside","startLine","startCh","chunk","String","prototype","normalize","str","findPrevious","head","cmpPos","result","newText","origin","splitLines","replaceRange","defineDocExtension","ranges","cur","push","anchor","setSelections"],"sourceRoot":""}