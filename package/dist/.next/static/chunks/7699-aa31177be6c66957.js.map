{"version":3,"file":"static/chunks/7699-aa31177be6c66957.js","mappings":"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","sources":["webpack://_N_E/./components/save-workflow-modal.tsx"],"sourcesContent":["\"use client\"\n\nimport React, { useState, useCallback, useContext, useMemo } from 'react'\nimport type { UIMessage as Message } from 'ai'\nimport { useMutation } from '@apollo/client'\nimport { UserContext } from '@/app/(application)/authenticated'\nimport { CREATE_WORKFLOW_TEMPLATE, UPDATE_WORKFLOW_TEMPLATE } from '@/queries/queries'\nimport { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle } from '@/components/ui/dialog'\nimport { Button } from '@/components/ui/button'\nimport { Input } from '@/components/ui/input'\nimport { Textarea } from '@/components/ui/textarea'\nimport { Label } from '@/components/ui/label'\nimport { Trash2, Edit2, ChevronDown } from 'lucide-react'\nimport { useToast } from '@/components/ui/use-toast'\nimport { cn } from '@/lib/utils'\nimport { RBACControl } from './rbac'\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'\nimport { Response } from '@/components/ai-elements/response';\n\ninterface WorkflowVariable {\n  name: string\n  description?: string\n  type: 'string'\n  required: boolean\n  defaultValue?: string\n}\n\ninterface WorkflowStep {\n  id: string\n  type: 'user' | 'assistant' | 'tool'\n  content?: string\n  contentExample?: string\n  toolName?: string\n  variablesUsed?: string[]\n}\n\ninterface WorkflowTemplate {\n  id: string\n  name: string\n  description?: string\n  rights_mode?: 'private' | 'users' | 'roles' | 'public' | 'projects'\n  RBAC?: {\n    users?: Array<{ id: number; rights: 'read' | 'write' }>\n    roles?: Array<{ id: string; rights: 'read' | 'write' }>\n    projects?: Array<{ id: string; rights: 'read' | 'write' }>\n  }\n  variables?: WorkflowVariable[]\n  steps_json?: WorkflowStep[]\n}\n\ninterface SaveWorkflowModalProps {\n  isOpen: boolean\n  onClose: () => void\n  messages: Message[]\n  sessionTitle?: string\n  existingWorkflow?: WorkflowTemplate\n  isReadOnly?: boolean\n}\n\nexport function SaveWorkflowModal({ isOpen, onClose, messages, sessionTitle, existingWorkflow, isReadOnly = false }: SaveWorkflowModalProps) {\n  const { user } = useContext(UserContext)\n  const { toast } = useToast()\n  const [rbac, setRbac] = useState({\n    rights_mode: existingWorkflow?.rights_mode || 'private',\n    users: existingWorkflow?.RBAC?.users || [],\n    roles: existingWorkflow?.RBAC?.roles || [],\n    projects: existingWorkflow?.RBAC?.projects || []\n  })\n  const isEditing = Boolean(existingWorkflow)\n\n  // Form state\n  const [workflowName, setWorkflowName] = useState(existingWorkflow?.name || '')\n  const [workflowDescription, setWorkflowDescription] = useState(existingWorkflow?.description || '')\n  const [variables, setVariables] = useState<WorkflowVariable[]>(existingWorkflow?.variables || [])\n  const [steps, setSteps] = useState<WorkflowStep[]>(existingWorkflow?.steps_json || [])\n  const [isCreating, setIsCreating] = useState(false)\n  const [activeTab, setActiveTab] = useState('setup')\n  const [showAdvanced, setShowAdvanced] = useState(false)\n  const [editingVariable, setEditingVariable] = useState<string | null>(null)\n  const [editingValue, setEditingValue] = useState('')\n  const [createWorkflowTemplate] = useMutation(CREATE_WORKFLOW_TEMPLATE)\n  const [updateWorkflowTemplate] = useMutation(UPDATE_WORKFLOW_TEMPLATE)\n\n  // Initialize steps from messages\n  React.useEffect(() => {\n    if (messages.length > 0) {\n      const transformedSteps: WorkflowStep[] = []\n\n      messages.forEach((message, index) => {\n        const messageContent = (message as any).content || (message.parts ? message.parts.filter(p => p.type === 'text').map((p: any) => p.text).join('\\n') : '')\n\n        if (message.role === 'user') {\n          transformedSteps.push({\n            id: `step_${index + 1}`,\n            type: 'user',\n            content: messageContent,\n            variablesUsed: []\n          })\n        } else if (message.role === 'assistant') {\n          transformedSteps.push({\n            id: `step_${index + 1}`,\n            type: 'assistant',\n            contentExample: messageContent\n          })\n        } else if (message.role === 'system') {\n          // Handle tool calls from message parts\n          if (message.parts) {\n            message.parts.forEach((part: any, partIndex: number) => {\n              if (part.type === 'tool-invocation' && part.toolInvocation) {\n                transformedSteps.push({\n                  id: `step_${index + 1}_${partIndex}`,\n                  type: 'tool',\n                  toolName: part.toolInvocation.toolName\n                })\n              }\n            })\n          }\n        }\n      })\n      console.log(\"transformedSteps\", transformedSteps)\n      setSteps(transformedSteps)\n      setWorkflowName(sessionTitle || 'My Workflow')\n    }\n  }, [messages, sessionTitle, steps.length])\n\n  // Variable management functions\n  const createVariable = useCallback((name: string, description?: string) => {\n    if (!name.match(/^[A-Za-z_][A-Za-z0-9_]{1,63}$/)) {\n      toast({\n        title: \"Invalid variable name\",\n        description: \"Variable name must start with a letter or underscore, contain only letters, numbers, and underscores, and be 2-64 characters long.\",\n        variant: \"destructive\"\n      })\n      return false\n    }\n\n    if (variables.some(v => v.name === name)) {\n      return true // Variable already exists, that's fine\n    }\n\n    const newVariable: WorkflowVariable = {\n      name,\n      type: 'string',\n      required: true,\n      description: description || `Auto-detected variable`\n    }\n\n    setVariables(prev => [...prev, newVariable])\n    return true\n  }, [variables, toast])\n\n  // Auto-detect variables from {variable_name} syntax and update content\n  const handleStepContentChange = useCallback((stepId: string, content: string) => {\n    // Extract all variables from the content\n    const variableMatches = content.match(/\\{([A-Za-z_][A-Za-z0-9_]{1,63})\\}/g) || []\n    const variableNames = variableMatches.map((match: string) => match.slice(1, -1)) // Remove { and }\n\n    // Create variables that don't exist yet\n    variableNames.forEach(name => {\n      createVariable(name)\n    })\n\n    // Update the step content\n    setSteps(prev => prev.map(step =>\n      step.id === stepId\n        ? { ...step, content, variablesUsed: variableNames }\n        : step\n    ))\n\n    // Remove unused variables\n    const allUsedVariables = new Set<string>()\n    steps.forEach(step => {\n      if (step.id === stepId) {\n        // Use the new content for this step\n        const matches = content.match(/\\{([A-Za-z_][A-Za-z0-9_]{1,63})\\}/g) || []\n        matches.forEach((match: string) => allUsedVariables.add(match.slice(1, -1)))\n      } else if (step.variablesUsed) {\n        step.variablesUsed.forEach(varName => allUsedVariables.add(varName))\n      }\n    })\n\n    // Remove variables that are no longer used anywhere\n    setVariables(prev => prev.filter(variable => allUsedVariables.has(variable.name)))\n  }, [steps, createVariable])\n\n  const deleteVariable = useCallback((variableName: string) => {\n    // Remove variable from variables list\n    setVariables(prev => prev.filter(v => v.name !== variableName))\n\n    // Remove variable references from steps\n    setSteps(prev => prev.map(step => ({\n      ...step,\n      content: step.content?.replace(new RegExp(`\\\\{${variableName}\\\\}`, 'g'), ''),\n      variablesUsed: step.variablesUsed?.filter(v => v !== variableName) || []\n    })))\n  }, [])\n\n  const renameVariable = useCallback((oldName: string, newName: string) => {\n    if (!newName.match(/^[A-Za-z_][A-Za-z0-9_]{1,63}$/)) {\n      toast({\n        title: \"Invalid variable name\",\n        description: \"Variable name must start with a letter or underscore and contain only letters, numbers, and underscores.\",\n        variant: \"destructive\"\n      })\n      return false\n    }\n\n    if (variables.some(v => v.name === newName && v.name !== oldName)) {\n      toast({\n        title: \"Variable name already exists\",\n        description: \"A variable with this name already exists.\",\n        variant: \"destructive\"\n      })\n      return false\n    }\n\n    // Update variable name\n    setVariables(prev => prev.map(v =>\n      v.name === oldName ? { ...v, name: newName } : v\n    ))\n\n    // Update variable references in steps\n    setSteps(prev => prev.map(step => ({\n      ...step,\n      content: step.content?.replace(new RegExp(`\\\\{${oldName}\\\\}`, 'g'), `{${newName}}`),\n      variablesUsed: step.variablesUsed?.map(v => v === oldName ? newName : v) || []\n    })))\n\n    return true\n  }, [variables, toast])\n\n  // Validation\n  const isValid = useMemo(() => {\n    if (!workflowName.trim()) return false\n    if (steps.length === 0) return false\n    if (rbac.rights_mode === 'users' && rbac.users?.length === 0) return false\n    if (rbac.rights_mode === 'roles' && rbac.roles?.length === 0) return false\n    if (rbac.rights_mode === 'projects' && rbac.projects?.length === 0) return false\n\n    // Check that all user steps have non-empty content after variable replacement\n    const userSteps = steps.filter(s => s.type === 'user')\n    return userSteps.every(step => {\n      const content = step.content || ''\n      const withoutVariables = content.replace(/\\{[^}]+\\}/g, '')\n      return withoutVariables.trim().length > 0\n    })\n  }, [workflowName, steps, rbac])\n\n  // Save workflow\n  const handleSave = useCallback(async () => {\n    if (!isValid || !user?.id) return\n\n    setIsCreating(true)\n\n    try {\n\n      const stepsJson = steps.map(step => ({\n        id: step.id,\n        type: step.type,\n        ...(step.type === 'user' && { content: step.content }),\n        ...(step.type === 'assistant' && { contentExample: step.contentExample }),\n        ...(step.type === 'tool' && { toolName: step.toolName })\n      }))\n\n      if (isEditing && existingWorkflow) {\n        await updateWorkflowTemplate({\n          variables: {\n            id: existingWorkflow.id,\n            name: workflowName.trim(),\n            description: workflowDescription.trim() || null,\n            rights_mode: rbac.rights_mode,\n            RBAC: {\n              users: rbac.users,\n              roles: rbac.roles,\n              projects: rbac.projects\n            },\n            variables,\n            steps_json: stepsJson\n          }\n        })\n\n        toast({\n          title: \"Workflow updated!\",\n          description: `\"${workflowName}\" has been updated successfully.`\n        })\n      } else {\n        await createWorkflowTemplate({\n          variables: {\n            name: workflowName.trim(),\n            description: workflowDescription.trim() || null,\n            owner: user.id,\n            rights_mode: rbac.rights_mode,\n            RBAC: {\n              users: rbac.users,\n              roles: rbac.roles,\n              projects: rbac.projects\n            },\n            variables,\n            steps_json: stepsJson\n          }\n        })\n\n        toast({\n          title: \"Workflow created!\",\n          description: `\"${workflowName}\" has been saved as a workflow template.`\n        })\n      }\n\n      onClose()\n    } catch (error) {\n      console.error('Error saving workflow:', error)\n      toast({\n        title: \"Error saving workflow\",\n        description: \"There was an error saving your workflow. Please try again.\",\n        variant: \"destructive\"\n      })\n    } finally {\n      setIsCreating(false)\n    }\n  }, [isValid, user?.id, workflowName, workflowDescription, rbac, variables, steps, createWorkflowTemplate, updateWorkflowTemplate, toast, onClose, isEditing, existingWorkflow])\n\n  if (!isOpen) return null\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-4xl max-h-[92vh] flex flex-col\">\n        <DialogHeader className=\"pb-4\">\n          <DialogTitle className=\"text-lg\">\n            {isEditing ? (isReadOnly ? 'View Workflow' : 'Edit Workflow') : 'Save as Workflow'}\n          </DialogTitle>\n          <DialogDescription className=\"text-sm\">\n            {isEditing\n              ? (isReadOnly\n                ? 'View workflow details and configuration.'\n                : 'Modify this workflow template. Edit your messages and use {variable_name} syntax to create variables.'\n              )\n              : 'Convert this conversation into a reusable workflow template. Edit your messages and use {variable_name} syntax to create variables.'\n            }\n          </DialogDescription>\n        </DialogHeader>\n\n        <div className=\"flex-1 mt-6\">\n          <Tabs value={activeTab} onValueChange={setActiveTab} className=\"h-full flex flex-col\">\n            <TabsList className=\"grid w-full grid-cols-2 mb-6\">\n              <TabsTrigger value=\"setup\" className=\"data-[state=active]:bg-background\">\n                Setup & Permissions\n              </TabsTrigger>\n              <TabsTrigger value=\"workflow\" className=\"data-[state=active]:bg-background\">\n                Workflow Steps & Variables\n              </TabsTrigger>\n            </TabsList>\n\n            <div className=\"flex-1 pb-6\">\n              <TabsContent value=\"setup\" className=\"mt-0 h-full\">\n                <div className=\"space-y-6\">\n                  <div className=\"space-y-4\">\n                    <div>\n                      <Label htmlFor=\"workflow-name\" className=\"text-base font-semibold\">Workflow Name *</Label>\n                      <Input\n                        id=\"workflow-name\"\n                        value={workflowName}\n                        onChange={(e) => setWorkflowName(e.target.value)}\n                        placeholder=\"My Workflow\"\n                        className=\"mt-2 h-11\"\n                        readOnly={isReadOnly}\n                      />\n                      {!workflowName.trim() && (\n                        <p className=\"text-sm text-destructive mt-1 flex items-center\">\n                          <span className=\"mr-1\">⚠️</span>\n                          Workflow name is required\n                        </p>\n                      )}\n                    </div>\n\n                    <div>\n                      <Label htmlFor=\"workflow-description\" className=\"text-base font-semibold\">Description</Label>\n                      <Textarea\n                        id=\"workflow-description\"\n                        value={workflowDescription}\n                        onChange={(e) => setWorkflowDescription(e.target.value)}\n                        placeholder=\"Describe what this workflow does and when to use it...\"\n                        rows={3}\n                        className=\"mt-2 resize-none\"\n                        readOnly={isReadOnly}\n                      />\n                    </div>\n                  </div>\n\n                  <div className=\"border-t pt-6\">\n                    <div className=\"flex items-center justify-between mb-4\">\n                      <div>\n                        <h3 className=\"text-base font-semibold mb-1\">Sharing & Permissions</h3>\n                        <p className=\"text-sm text-muted-foreground\">Control who can view and edit this workflow</p>\n                      </div>\n                      <Button\n                        type=\"button\"\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => setShowAdvanced(!showAdvanced)}\n                        className=\"ml-4\"\n                      >\n                        {showAdvanced ? 'Hide Advanced' : 'Show Advanced'}\n                        <ChevronDown className={cn(\"w-4 h-4 ml-1 transition-transform\", showAdvanced && \"rotate-180\")} />\n                      </Button>\n                    </div>\n                    {showAdvanced && (\n                      <RBACControl\n                        initialRightsMode={existingWorkflow?.rights_mode}\n                        initialUsers={existingWorkflow?.RBAC?.users}\n                        initialRoles={existingWorkflow?.RBAC?.roles}\n                        initialProjects={existingWorkflow?.RBAC?.projects}\n                        onChange={(rights_mode, users, roles, projects) => {\n                          setRbac({\n                            rights_mode,\n                            users,\n                            roles,\n                            projects\n                          })\n                        }}\n                      />\n                    )}\n                    {!showAdvanced && (\n                      <div className=\"text-sm text-muted-foreground bg-muted/30 p-3 rounded-md\">\n                        Using default permissions (private to you)\n                      </div>\n                    )}\n                  </div>\n                </div>\n              </TabsContent>\n\n              <TabsContent value=\"workflow\" className=\"mt-0 h-full\">\n                <div className=\"h-full flex gap-6\">\n                  {/* Left side - Messages */}\n                  <div className=\"flex-1\">\n                    <div className=\"mb-4\">\n                      <h3 className=\"text-base font-semibold mb-2\">Conversation Steps</h3>\n                      <div className=\"border rounded-lg p-3 mb-4\">\n                        <p className=\"text-sm\">\n                          💡 <strong>Pro tip:</strong> Use {`{variable_name}`} syntax in your messages to create reusable variables. For example you can use {`{company_name}`} to create a variable for the company name\n                          so you can reuse this flow template with different companies.\n                        </p>\n                      </div>\n                    </div>\n\n                    <div className=\"space-y-4 max-h-[500px] overflow-y-auto pr-2\">\n                      {steps.map((step, index) => (\n                        <div key={step.id}>\n                          <div className=\"border rounded-lg p-4 bg-card\">\n                            <div className=\"flex items-center gap-3 mb-3\">\n                              <span className={cn(\n                                \"text-sm font-medium px-3 py-1 rounded-full\",\n                                step.type === 'user' ? \"bg-blue-100 text-blue-700\" :\n                                  step.type === 'assistant' ? \"bg-green-100 text-green-700\" :\n                                    \"bg-purple-100 text-purple-700\"\n                              )}>\n                                {step.type === 'user' ? '👤 User' :\n                                  step.type === 'assistant' ? '🤖 Assistant' :\n                                    `🔧 ${step.toolName}`}\n                              </span>\n                              {step.variablesUsed && step.variablesUsed.length > 0 && (\n                                <div className=\"flex gap-1 flex-wrap\">\n                                  {step.variablesUsed.map(varName => (\n                                    <span key={varName} className=\"text-xs bg-blue-50 text-blue-600 px-2 py-1 rounded font-mono border border-blue-200\">\n                                      {`{${varName}}`}\n                                    </span>\n                                  ))}\n                                </div>\n                              )}\n                            </div>\n\n                            {step.type === 'user' ? (\n                              <div>\n                                <Textarea\n                                  value={step.content || ''}\n                                  onChange={(e) => handleStepContentChange(step.id, e.target.value)}\n                                  placeholder=\"Enter your message...\"\n                                  className=\"min-h-[80px] resize-none\"\n                                  rows={3}\n                                  readOnly={isReadOnly}\n                                />\n                              </div>\n                            ) : (\n                              <div className=\"bg-muted/50 p-3 rounded-md\">\n                                {step.type === 'assistant' ? (\n                                  <div>\n                                    <div className=\"text-xs font-medium text-muted-foreground mb-2\">Example response (will be regenerated):</div>\n                                    <Response>\n                                      {step.contentExample}\n                                    </Response>\n                                  </div>\n                                ) : (\n                                  <div>\n                                    <div className=\"text-xs font-medium text-muted-foreground mb-1\">Tool: {step.toolName}</div>\n                                    <div className=\"text-sm text-muted-foreground\">Parameters will be generated dynamically</div>\n                                  </div>\n                                )}\n                              </div>\n                            )}\n                          </div>\n                          {index < steps.length - 1 && (\n                            <div className=\"flex justify-center my-3\">\n                              <ChevronDown className=\"w-5 h-5 text-muted-foreground/50\" />\n                            </div>\n                          )}\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n\n                  {/* Right side - Variables */}\n                  <div className=\"w-80\">\n                    <div className=\"mb-4\">\n                      <h3 className=\"text-base font-semibold mb-2\">Variables ({variables.length})</h3>\n                      <p className=\"text-sm text-muted-foreground\">Auto-detected from your messages</p>\n                    </div>\n\n                    {variables.length > 0 ? (\n                      <div className=\"space-y-3 max-h-[500px] overflow-y-auto\">\n                        {variables.map((variable) => (\n                          <div key={variable.name} className=\"border rounded-lg p-3 bg-card\">\n                            <div className=\"flex items-start justify-between mb-2\">\n                              <div className=\"font-mono text-blue-600 font-medium text-sm\">\n                                {`{${variable.name}}`}\n                              </div>\n                              {!isReadOnly && (\n                                <div className=\"flex gap-1\">\n                                  {editingVariable === variable.name ? (\n                                    <Input\n                                      value={editingValue}\n                                      onChange={(e) => setEditingValue(e.target.value)}\n                                      className=\"h-6 text-xs font-mono w-20\"\n                                      placeholder=\"variable_name\"\n                                      autoFocus\n                                      onKeyDown={(e) => {\n                                        if (e.key === 'Enter') {\n                                          if (editingValue && editingValue !== variable.name) {\n                                            renameVariable(variable.name, editingValue)\n                                          }\n                                          setEditingVariable(null)\n                                          setEditingValue('')\n                                        } else if (e.key === 'Escape') {\n                                          setEditingVariable(null)\n                                          setEditingValue('')\n                                        }\n                                      }}\n                                      onBlur={() => {\n                                        if (editingValue && editingValue !== variable.name) {\n                                          renameVariable(variable.name, editingValue)\n                                        }\n                                        setEditingVariable(null)\n                                        setEditingValue('')\n                                      }}\n                                    />\n                                  ) : (\n                                    <>\n                                      <Button\n                                        size=\"sm\"\n                                        variant=\"ghost\"\n                                        className=\"h-6 w-6 p-0\"\n                                        onClick={() => {\n                                          setEditingVariable(variable.name)\n                                          setEditingValue(variable.name)\n                                        }}\n                                      >\n                                        <Edit2 className=\"w-3 h-3\" />\n                                      </Button>\n                                      <Button\n                                        size=\"sm\"\n                                        variant=\"ghost\"\n                                        className=\"h-6 w-6 p-0 text-destructive hover:bg-destructive/10\"\n                                        onClick={() => deleteVariable(variable.name)}\n                                      >\n                                        <Trash2 className=\"w-3 h-3\" />\n                                      </Button>\n                                    </>\n                                  )}\n                                </div>\n                              )}\n                            </div>\n                            <div className=\"text-xs text-muted-foreground mb-2\">\n                              {variable.description}\n                            </div>\n                            <div className=\"flex gap-1\">\n                              <span className=\"text-xs bg-gray-100 text-gray-700 px-1.5 py-0.5 rounded\">\n                                {variable.type}\n                              </span>\n                              {variable.required && (\n                                <span className=\"text-xs bg-orange-100 text-orange-700 px-1.5 py-0.5 rounded\">\n                                  required\n                                </span>\n                              )}\n                            </div>\n                          </div>\n                        ))}\n                      </div>\n                    ) : (\n                      <div className=\"text-center py-8 text-muted-foreground border-2 border-dashed rounded-lg\">\n                        <div className=\"mb-3\">\n                          <span className=\"text-3xl\">📝</span>\n                        </div>\n                        <div className=\"text-sm mb-1 font-medium\">No variables yet</div>\n                        <div className=\"text-xs\">\n                          Use {`{variable_name}`} syntax in your messages\n                        </div>\n                      </div>\n                    )}\n                  </div>\n                </div>\n              </TabsContent>\n            </div>\n          </Tabs>\n        </div>\n\n        <div className=\"border-t p-4 bg-background\">\n          <DialogFooter>\n            <Button variant=\"outline\" onClick={onClose}>\n              {isReadOnly ? 'Close' : 'Cancel'}\n            </Button>\n            {!isReadOnly && (\n              <>\n                <Button\n                  onClick={handleSave}\n                  disabled={!isValid || isCreating}\n                  className={cn(\n                    \"min-w-[140px]\",\n                    !isValid && \"opacity-50 cursor-not-allowed\"\n                  )}\n                >\n                  {isCreating ? (\n                    <>\n                      <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\"></div>\n                      {isEditing ? 'Updating...' : 'Saving...'}\n                    </>\n                  ) : (\n                    isEditing ? 'Update Workflow' : 'Save Workflow'\n                  )}\n                </Button>\n\n              </>\n\n            )}\n          </DialogFooter>\n        </div>\n      </DialogContent>\n    </Dialog>\n  )\n}"],"names":["SaveWorkflowModal","param","existingWorkflow","isOpen","onClose","messages","sessionTitle","isReadOnly","user","useContext","UserContext","toast","useToast","rbac","setRbac","useState","rights_mode","users","RBAC","roles","projects","isEditing","Boolean","workflowName","setWorkflowName","name","workflowDescription","setWorkflowDescription","description","variables","setVariables","steps","setSteps","steps_json","isCreating","setIsCreating","activeTab","setActiveTab","showAdvanced","setShowAdvanced","editingVariable","setEditingVariable","editingValue","setEditingValue","createWorkflowTemplate","useMutation","CREATE_WORKFLOW_TEMPLATE","updateWorkflowTemplate","UPDATE_WORKFLOW_TEMPLATE","React","length","transformedSteps","forEach","message","index","messageContent","content","parts","filter","p","type","map","text","join","role","push","id","concat","variablesUsed","contentExample","part","partIndex","toolInvocation","toolName","console","log","createVariable","useCallback","match","title","variant","some","v","newVariable","required","prev","handleStepContentChange","stepId","variableNames","variableMatches","slice","step","allUsedVariables","Set","matches","add","varName","variable","has","deleteVariable","variableName","replace","renameVariable","oldName","newName","isValid","useMemo","trim","userSteps","s","every","withoutVariables","handleSave","stepsJson","owner","error","react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__","jsx","Dialog","open","onOpenChange","jsxs","DialogContent","className","DialogHeader","DialogTitle","DialogDescription","div","Tabs","value","onValueChange","TabsList","TabsTrigger","TabsContent","Label","htmlFor","Input","onChange","e","target","placeholder","readOnly","span","Textarea","rows","h3","Button","size","onClick","ChevronDown","cn","RBACControl","initialRightsMode","initialUsers","initialRoles","initialProjects","strong","Response","autoFocus","onKeyDown","key","onBlur","Fragment","Edit2","Trash2","DialogFooter","disabled"],"sourceRoot":""}