{"version":3,"file":"static/chunks/6373-7f2c537f3ddc202c.js","mappings":"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","sources":["webpack://_N_E/./components/ui/button.tsx","webpack://_N_E/./lib/utils.ts","webpack://_N_E/./queries/queries.ts"],"sourcesContent":["import { Slot } from \"@radix-ui/react-slot\";\nimport { cva, type VariantProps } from \"class-variance-authority\";\nimport * as React from \"react\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"size-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n);\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean;\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\";\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    );\n  },\n);\nButton.displayName = \"Button\";\n\nexport { Button, buttonVariants };\n","import { type ClassValue, clsx } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\n\nexport function formatDuration(seconds: number): string {\n  if (!seconds) return '0s';\n  \n  const hours = Math.floor(seconds / 3600);\n  const minutes = Math.floor((seconds % 3600) / 60);\n  const remainingSeconds = Math.round(seconds % 60);\n\n  if (hours > 0) {\n    return `${hours}h ${minutes}m`;\n  } else if (minutes > 0) {\n    return `${minutes}m ${remainingSeconds}s`;\n  } else {\n    return `${remainingSeconds}s`;\n  }\n}","import { gql } from \"@apollo/client\";\n\nexport const PAGINATION_POSTFIX = \"_itemsPagination\";\nexport const CREATE_ONE_POSTFIX = \"_itemsCreateOne\";\n\nconst CONTEXT_FIELDS = `\n    id\n    name\n    description\n    embedder\n    slug\n    active\n    fields\n    configuration\n`;\n\nconst ITEM_FIELDS = (fields: string[]) => `\nid\nname\ndescription\ntags\nexternal_id\ncreatedAt\nembeddings_updated_at\nupdatedAt\nrights_mode\nRBAC {\n  type\n  users {\n    id\n    rights\n  }\n  roles {\n    id\n    rights\n  }\n  projects {\n    id\n    rights\n  }\n}\n${fields.join(\"\\n\")}\n`;\n\nconst USER_FIELDS = `\nid\nfirstname\nlastname\nemail\nsuper_admin\napikey\nanthropic_token\ntype\nrole\nfavourite_agents\n`;\n\nconst AGENT_FIELDS = `\nid\nname\nproviderapikey\ninstructions\ndescription\nactive\nimage\ntools\nproviderName\nmodelName\nmaxContextLength\nprovider\nslug\ncategory\nrateLimit {\n  name\n  rate_limit {\n    time\n    limit\n  }\n}\nstreaming\ncapabilities {\n  text\n  images\n  files\n  audio\n  video\n}\nbackend\nrights_mode\nRBAC {\n      type\n      users {\n        id\n        rights\n      }\n      roles {\n        id\n        rights\n      }\n      projects {\n        id\n        rights\n      }\n}\ncreatedAt\nupdatedAt\n`;\n\nexport const GET_AGENTS = gql`\n  query GetAgents(\n    $page: Int!\n    $limit: Int!\n    $filters: [FilterAgent]\n    $sort: SortBy = { field: \"updatedAt\", direction: DESC }\n  ) {\n    agentsPagination(\n      page: $page\n      limit: $limit\n      sort: $sort\n      filters: $filters\n    ) {\n      pageInfo {\n        pageCount\n        itemCount\n        currentPage\n        hasPreviousPage\n        hasNextPage\n      }\n      items {\n        ${AGENT_FIELDS}\n      }\n    }\n  }\n`;\n\nexport const GET_AGENT_SESSIONS = gql`\n  query GetAgentSessions(\n    $page: Int!\n    $limit: Int!\n    $filters: [FilterAgent_session]\n    $sort: SortBy = { field: \"updatedAt\", direction: DESC }\n  ) {\n    agent_sessionsPagination(\n      page: $page\n      limit: $limit\n      sort: $sort\n      filters: $filters\n    ) {\n      pageInfo {\n        pageCount\n        itemCount\n        currentPage\n        hasPreviousPage\n        hasNextPage\n      }\n      items {\n          createdAt\n          updatedAt\n          user\n          title\n          agent\n          rights_mode\n          RBAC {\n            type\n            users {\n              id\n              rights\n            }\n            roles {\n              id\n              rights\n            }\n            projects {\n              id\n              rights\n            }\n          }\n          id\n      }\n    }\n  }\n`;\n\nexport const GET_CONTEXTS = gql`\n  query GetContexts {\n    contexts {\n      items {\n        ${CONTEXT_FIELDS}\n      }\n    }\n  }\n`;\n\nexport const GET_CONTEXT_BY_ID = gql`\n  query GetContextById($id: ID!) {\n    contextById(id: $id) {\n      ${CONTEXT_FIELDS}\n    }\n  }\n`;\n\nexport const GET_ITEMS = (context: string, fields: string[]) => {\n  const upperCaseContext = context.charAt(0).toUpperCase() + context.slice(1)\n  return gql`\n    query ${context}Pagination($page: Int!, $limit: Int!, $filters: [Filter${upperCaseContext}_items], $sort: SortBy = { field: \"updatedAt\", direction: DESC }) {\n      ${context}${PAGINATION_POSTFIX}(page: $page, limit: $limit, filters: $filters, sort: $sort) {\n        pageInfo {\n          pageCount\n          itemCount\n          currentPage\n          hasPreviousPage\n          hasNextPage\n        }\n        items {\n          ${ITEM_FIELDS(fields)}\n        }\n      }\n    }\n  `;\n};\n\nexport const PROCESS_ITEM_FIELD = (context: string) => {\n  return gql`\n    mutation ProcessItemField${context}($item: ID!, $field: ${context}_itemsProcessorFieldEnum!) {\n      ${context}_itemsProcessItemField(item: $item, field: $field) {\n        message\n        result\n        job\n      }\n    }\n  `;\n};\n\nexport const GET_ITEM_BY_ID = (context: string, fields: string[], chunks: boolean = false) => {\n  return gql`\n    query ${context}ById($id: ID!) {\n      ${context}_itemsById(id: $id) {\n        ${ITEM_FIELDS(fields)}\n        ${chunks ? \"chunks { fts_rank hybrid_score content source chunk_index chunk_id chunk_created_at chunk_updated_at embedding_size }\" : \"\"}\n      }\n    }\n  `;\n};\n\nexport const CREATE_ITEM = (context: string) => {\n  return gql`\n    mutation CreateOne${context}($input: ${context}_itemsInput!) {\n      ${context}_itemsCreateOne(input: $input) {\n        item {\n          id\n        }\n        job\n      }\n    }\n  `;\n};\n\nexport const DELETE_CHUNKS = (context: string) => {\n  const upperCaseContext = context.charAt(0).toUpperCase() + context.slice(1)\n  return gql`\n    mutation DeleteChunks${context}($where: [Filter${upperCaseContext}_items]) {\n      ${context}_itemsDeleteChunks(where: $where) {\n        items\n        jobs\n      }\n    }\n  `;\n};\n\n\nexport const GENERATE_CHUNKS = (context: string) => {\n  const upperCaseContext = context.charAt(0).toUpperCase() + context.slice(1)\n  return gql`\n    mutation GenerateChunks${context}($where: [Filter${upperCaseContext}_items]) {\n      ${context}_itemsGenerateChunks(where: $where) {\n        items\n        jobs\n      }\n    }\n  `;\n};\n\nexport const UPDATE_ITEM = (context: string) => {\n  return gql`\n    mutation UpdateOneById${context}($id: ID!, $input: ${context}_itemsInput!) {\n      ${context}_itemsUpdateOneById(id: $id, input: $input) {\n        item {\n          id\n        }\n        job\n      }\n    }\n  `;\n};\n\nexport const DELETE_ITEM = (context: string, fields: string[]) => {\n  return gql`\n    mutation DeleteOneById${context}($id: ID!) {\n      ${context}_itemsRemoveOneById(id: $id) {\n        id\n        ${fields.join(\"\\n\")}\n      }\n    }\n  `;\n};\n\nexport const UPDATE_AGENT_SESSION_RBAC = gql`\n  mutation UpdateAgentSessionRbac(\n    $id: ID!\n    $RBAC: RBACInput\n    $rights_mode: String\n  ) {\n    agent_sessionsUpdateOneById(id: $id, input: { rights_mode: $rights_mode, RBAC: $RBAC }) {\n      item {\n        id\n      }\n    }\n  }\n`;\n\nexport const UPDATE_AGENT_SESSION_PROJECT = gql`\n  mutation UpdateAgentSessionProject(\n    $id: ID!\n    $project: String\n  ) {\n    agent_sessionsUpdateOneById(id: $id, input: {project: $project}) {\n      item {\n        id\n      }\n    }\n  }\n`;\n\nexport const UPDATE_AGENT_SESSION_TITLE = gql`\n  mutation UpdateAgentSessionTitle(\n    $id: ID!\n    $title: String\n  ) {\n    agent_sessionsUpdateOneById(id: $id, input: {title: $title}) {\n      item {\n        id\n        title\n      }\n    }\n  }\n`;\n\nexport const GET_AGENT_MESSAGES = gql`\n  query GetAgentSessionMessages(\n    $page: Int!\n    $limit: Int!\n    $filters: [FilterAgent_message]\n    $sort: SortBy = { field: \"createdAt\", direction: ASC }\n  ) {\n    agent_messagesPagination(\n      page: $page\n      limit: $limit\n      sort: $sort\n      filters: $filters\n    ) {\n      pageInfo {\n        pageCount\n        itemCount\n        currentPage\n        hasPreviousPage\n        hasNextPage\n      }\n      items {\n        id\n        session\n        content\n        createdAt\n      }\n    }\n  }\n`;\n\nexport const GET_JOB_RESULTS = gql`\n  query GetJobResults(\n    $page: Int!\n    $limit: Int!\n    $filters: [FilterJob_result]\n    $sort: SortBy = {\n      field: \"createdAt\",\n      direction: DESC\n    }\n  ) {\n    job_resultsPagination(\n      page: $page\n      limit: $limit\n      sort: $sort\n      filters: $filters\n    ) {\n      items {\n        job_id\n        state\n        error\n        label\n        result\n        metadata\n        createdAt\n        updatedAt\n        id\n      }\n      pageInfo {\n        pageCount\n        itemCount\n        currentPage\n        hasPreviousPage\n        hasNextPage\n      }\n    }\n  }\n`;\nexport const GET_USER_ROLES = gql`\n  query GetUserRoles($page: Int!, $limit: Int!) {\n    rolesPagination(page: $page, limit: $limit) {\n      pageInfo {\n        pageCount\n        itemCount\n        currentPage\n        hasPreviousPage\n        hasNextPage\n      }\n      items {\n        id\n        createdAt\n        updatedAt\n        agents\n        workflows\n        api\n        variables\n        users\n        name\n      }\n    }\n  }\n`;\nexport const GET_USERS = gql`\n  query GetUsers(\n    $page: Int!\n    $limit: Int!\n    $filters: [FilterUser]\n    $sort: SortBy\n  ) {\n    usersPagination(page: $page, limit: $limit, filters: $filters, sort: $sort) {\n      pageInfo {\n        pageCount\n        itemCount\n        currentPage\n        hasPreviousPage\n        hasNextPage\n      }\n      items {\n        id\n        name\n        firstname\n        lastname\n        email\n        last_used\n        createdAt\n        type\n        apikey\n        emailVerified\n        anthropic_token\n        super_admin\n        role\n      }\n    }\n  }\n`;\nexport const GET_USER_ROLE_BY_ID = gql`\n  query GetUserRoleById($id: ID!) {\n    roleById(id: $id) {\n      id\n      name\n      agents\n      workflows\n      api\n      variables\n      users\n      createdAt\n      updatedAt\n    }\n  }\n`;\nexport const GET_JOB_RESULT_BY_ID = gql`\n  query GetJobResultById($id: ID!) {\n    job_resultById(id: $id) {\n        id\n        job_id\n        state\n        error\n        label\n        result\n        metadata\n        createdAt\n        updatedAt\n    }\n  }\n`;\nexport const GET_AGENT_BY_ID = gql`\n  query GetAgentById($id: ID!) {\n    agentById(id: $id) {\n      ${AGENT_FIELDS}\n    }\n  }\n`;\nexport const GET_AGENTS_BY_IDS = gql`\n  query GetAgentsByIds($ids: [ID!]!) {\n    agentByIds(ids: $ids) {\n      ${AGENT_FIELDS}\n    }\n  }\n`;\nexport const GET_AGENT_SESSION_BY_ID = gql`\n  query GetAgentSessionById($id: ID!) {\n    agent_sessionById(id: $id) {\n        createdAt\n        updatedAt\n        user\n        title\n        agent\n        created_by\n        rights_mode\n        RBAC {\n          type\n          users {\n            id\n            rights\n          }\n          roles {\n            id\n            rights\n          }\n          projects {\n            id\n            rights\n          }\n        }\n        id\n    }\n  }\n`;\nexport const GET_AGENT_SESSION = gql`\n  query GetAgentSession($filters: [FilterAgent_session]) {\n    agent_sessionOne(filters: $filters) {\n        createdAt\n        updatedAt\n        user\n        title\n        agent\n        id\n    }\n  }\n`;\n\nexport const UPDATE_USER_BY_ID = gql`\n    mutation UpdateUser(\n      $email: String,\n      $firstname: String,\n      $anthropic_token: String,\n      $super_admin: Boolean,\n      $lastname: String,\n      $role: String,\n      $favourite_agents: JSON,\n      $id: ID!\n     ) {\n        usersUpdateOneById(id: $id, input: {\n            email: $email,\n            firstname: $firstname,\n            anthropic_token: $anthropic_token,\n            super_admin: $super_admin,\n            lastname: $lastname,\n            role: $role,\n            favourite_agents: $favourite_agents\n        }) {\n          item {\n            ${USER_FIELDS}\n          }\n        }\n    }\n`;\nexport const CREATE_API_USER = gql`\n    mutation CreateUser(\n      $firstname: String,\n      $type: String,\n      $apikey: String,\n      $email: String,\n      $role: String\n     ) {\n      usersCreateOne(input: {\n            firstname: $firstname,\n            type: $type,\n            apikey: $apikey,\n            email: $email,\n            role: $role\n        }) {\n            item {\n              id\n            }\n        }\n    }\n`;\nexport const UPDATE_USER_ROLE_BY_ID = gql`\n  mutation UpdateUserRole(\n    $id: ID!\n    $name: String\n    $agents: String\n    $workflows: String\n    $api: String\n    $variables: String\n    $users: String\n  ) {\n    rolesUpdateOneById(\n      id: $id\n      input: {\n        name: $name\n        agents: $agents\n        workflows: $workflows\n        api: $api\n        variables: $variables\n        users: $users\n      }\n    ) {\n        item {\n          id\n          createdAt\n          agents\n          api\n          workflows\n          variables\n          users\n        }\n    }\n  }\n`;\nexport const GET_USER_BY_EMAIL = gql`\n   query GetUserByEmail($email: String!) {\n        userOne(filters: {email: $email}) {\n            ${USER_FIELDS}\n        }\n    }\n`;\n\nexport const CREATE_AGENT_SESSION = gql`\n  mutation createAgentSession(\n    $title: String,\n    $user: Float\n    $agent: String\n    $project: String\n    $rights_mode: String\n    $RBAC: RBACInput\n  ) {\n    agent_sessionsCreateOne(\n      input: { agent: $agent, user: $user, title: $title, project: $project, rights_mode: $rights_mode, RBAC: $RBAC }\n    ) {\n      item {\n        id\n      }\n    }\n  }\n`;\nexport const CREATE_AGENT = gql`\n  mutation createAgent(\n    $name: String!\n    $description: String!\n    $rights_mode: String!\n    $backend: String!\n    $image: String\n    $RBAC: RBACInput\n  ) {\n    agentsCreateOne(\n      input: {\n        name: $name\n        description: $description\n        rights_mode: $rights_mode\n        backend: $backend\n        image: $image\n        RBAC: $RBAC\n      }\n    ) {\n       item {\n        id\n        name\n        description\n        rights_mode\n        RBAC {\n          type\n          users {\n            id\n            rights\n          }\n          roles {\n            id\n            rights\n          }\n          projects {\n            id\n            rights\n          }\n        }\n        createdAt\n       }\n    }\n  }\n`;\n\nexport const GET_TOOLS = gql`\n  query GetTools {\n    tools {\n      items {\n        id\n        name\n        description\n        config\n        type\n      }\n    }\n  }\n`;\n\nexport const UPDATE_AGENT_BY_ID = gql`\n  mutation UpdateAgent(\n    $id: ID!\n    $name: String\n    $backend: String\n    $description: String\n    $instructions: String\n    $rights_mode: String\n    $category: String\n    $tools: JSON\n    $active: Boolean\n    $providerapikey: String\n    $RBAC: RBACInput\n  ) {\n    agentsUpdateOneById(\n      input: { \n        name: $name\n        backend: $backend\n        description: $description\n        category: $category\n        instructions: $instructions\n        rights_mode: $rights_mode\n        active: $active\n        tools: $tools\n        providerapikey: $providerapikey\n        RBAC: $RBAC\n      }\n      id: $id\n    ) {\n        item {\n          id\n          name\n          description\n          instructions\n          category\n          rights_mode\n          RBAC {\n            type\n            users {\n              id\n              rights\n            }\n            roles {\n              id\n              rights\n            }\n            projects {\n              id\n              rights\n            }\n          }\n        }\n    }\n  }\n`;\nexport const CREATE_USER_ROLE = gql`\n  mutation CreateUserRole($name: String!, $agents: String, $workflows: String, $variables: String, $users: String, $api: String) {\n    rolesCreateOne(input: { name: $name, agents: $agents, workflows: $workflows, variables: $variables, users: $users, api: $api}) {\n        item {\n          id\n          createdAt\n          agents\n          api\n          workflows\n          variables\n          users\n          name\n        }\n    }\n  }\n`;\n\nexport const CREATE_USER = gql`\n  mutation CreateUser($email: String!, $password: String, $type: String, $emailVerified: String) {\n    usersCreateOne(input: { email: $email, password: $password, type: $type, emailVerified: $emailVerified }) {\n        item {\n          id\n          createdAt\n          emailVerified\n          type\n          name\n        }\n    }\n  }\n`;\n\nexport const RESET_USER_PASSWORD = gql`\n  mutation ResetUserPassword($id: ID!, $password: String!) {\n    usersUpdateOneById(id: $id, input: { password: $password }) {\n      item {\n        id\n      }\n    }\n  }\n`;\n\nexport const GET_PROVIDERS = gql`\n  query GetProviders {\n    providers {\n      items {\n        id\n        name\n        description\n        provider\n        modelName\n        providerName\n      }\n    }\n  }\n`;\n\nexport const REMOVE_USER_BY_ID = gql`\n  mutation RemoveUserById($id: ID!) {\n    usersRemoveOneById(id: $id) {\n      id\n    }\n  }\n`;\nexport const REMOVE_JOB_RESULT_BY_ID = gql`\n  mutation RemoveJobResultById($id: ID!) {\n    job_resultsRemoveOneById(id: $id) {\n      id\n    }\n  }\n`;\nexport const REMOVE_USER_ROLE_BY_ID = gql`\n  mutation RemoveUserRoleById($id: ID!) {\n    rolesRemoveOneById(id: $id) {\n      id\n    }\n  }\n`;\nexport const REMOVE_AGENT_BY_ID = gql`\n  mutation RemoveAgentById($id: ID!) {\n    agentsRemoveOneById(id: $id) {\n      id\n    }\n  }\n`;\nexport const REMOVE_AGENT_SESSION_BY_ID = gql`\n  mutation RemoveAgentSessionById($id: ID!) {\n    agent_sessionsRemoveOneById(id: $id) {\n      id\n    }\n  }\n`;\n\nexport const GET_JOB_STATISTICS = gql`\n  query GetJobStatistics($user: Float, $agent: String, $from: String, $to: String) {\n    jobStatistics(user: $user, agent: $agent, from: $from, to: $to) {\n      completedCount\n      failedCount\n      averageDuration\n    }\n  }\n`;\n\nexport const GET_VARIABLES = gql`\n  query GetVariables(\n    $page: Int!\n    $limit: Int!\n    $filters: [FilterVariable]\n    $sort: SortBy = { field: \"updatedAt\", direction: DESC }\n  ) {\n    variablesPagination(\n      page: $page\n      limit: $limit\n      sort: $sort\n      filters: $filters\n    ) {\n      pageInfo {\n        pageCount\n        itemCount\n        currentPage\n        hasPreviousPage\n        hasNextPage\n      }\n      items {\n        id\n        name\n        value\n        encrypted\n        createdAt\n        updatedAt\n      }\n    }\n  }\n`;\n\nexport const GET_VARIABLE_BY_ID = gql`\n  query GetVariableById($id: ID!) {\n    variableById(id: $id) {\n      id\n      name\n      value\n      encrypted\n      createdAt\n      updatedAt\n    }\n  }\n`;\n\nexport const CREATE_VARIABLE = gql`\n  mutation CreateVariable(\n    $name: String!\n    $value: String!\n    $encrypted: Boolean\n  ) {\n    variablesCreateOne(\n      input: {\n        name: $name\n        value: $value\n        encrypted: $encrypted\n      }\n    ) {\n      item {\n        id\n        name\n        value\n        encrypted\n        createdAt\n        updatedAt\n      }\n    }\n  }\n`;\n\nexport const UPDATE_VARIABLE = gql`\n  mutation UpdateVariable(\n    $id: ID!\n    $name: String\n    $value: String\n    $encrypted: Boolean\n  ) {\n    variablesUpdateOneById(\n      id: $id\n      input: {\n        name: $name\n        value: $value\n        encrypted: $encrypted\n      }\n    ) {\n      id\n      name\n      value\n      encrypted\n      createdAt\n      updatedAt\n    }\n  }\n`;\n\nexport const REMOVE_VARIABLE_BY_ID = gql`\n  mutation RemoveVariableById($id: ID!) {\n    variablesRemoveOneById(id: $id) {\n      id\n    }\n  }\n`;\n\nexport const GET_USER_BY_ID = gql`\n  query GetUserById($id: ID!) {\n    userById(id: $id) {\n      id\n      name\n      firstname\n      lastname\n      email\n    }\n  }\n`;\n\nexport const GET_WORKFLOW_TEMPLATES = gql`\n  query GetWorkflowTemplates(\n    $page: Int!\n    $limit: Int!\n    $filters: [FilterWorkflow_template]\n    $sort: SortBy = { field: \"updatedAt\", direction: DESC }\n  ) {\n    workflow_templatesPagination(\n      page: $page\n      limit: $limit\n      sort: $sort\n      filters: $filters\n    ) {\n      pageInfo {\n        pageCount\n        itemCount\n        currentPage\n        hasPreviousPage\n        hasNextPage\n      }\n      items {\n        id\n        name\n        description\n        owner\n        rights_mode\n        variables\n        steps_json\n        example_metadata_json\n        createdAt\n        updatedAt\n        RBAC {\n          type\n          users {\n            id\n            rights\n          }\n          roles {\n            id\n            rights\n          }\n          projects {\n            id\n            rights\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport const GET_WORKFLOW_TEMPLATE_BY_ID = gql`\n  query GetWorkflowTemplateById($id: ID!) {\n    workflow_templateById(id: $id) {\n      id\n      name\n      description\n      owner\n      rights_mode\n      variables\n      steps_json\n      example_metadata_json\n      createdAt\n      updatedAt\n    }\n  }\n`;\n\nexport const CREATE_WORKFLOW_TEMPLATE = gql`\n  mutation CreateWorkflowTemplate(\n    $name: String!\n    $description: String\n    $owner: Float!\n    $rights_mode: String!\n    $RBAC: RBACInput\n    $variables: JSON\n    $steps_json: JSON!\n    $example_metadata_json: JSON\n  ) {\n    workflow_templatesCreateOne(\n      input: {\n        name: $name\n        description: $description\n        owner: $owner\n        rights_mode: $rights_mode\n        RBAC: $RBAC\n        variables: $variables\n        steps_json: $steps_json\n        example_metadata_json: $example_metadata_json\n      }\n    ) {\n      id\n      name\n      description\n      owner\n      rights_mode\n      rights_mode\n      RBAC {\n        type\n        users {\n          id\n          rights\n        }\n        roles {\n          id\n          rights\n        }\n        projects {\n          id\n          rights\n        }\n      }\n      variables\n      steps_json\n      example_metadata_json\n      createdAt\n      updatedAt\n    }\n  }\n`;\n\nexport const UPDATE_WORKFLOW_TEMPLATE = gql`\n  mutation UpdateWorkflowTemplate(\n    $id: ID!\n    $name: String\n    $description: String\n    $rights_mode: String\n    $RBAC: RBACInput\n    $variables: JSON\n    $steps_json: JSON\n    $example_metadata_json: JSON\n  ) {\n    workflow_templatesUpdateOneById(\n      id: $id\n      input: {\n        name: $name\n        description: $description\n        rights_mode: $rights_mode\n        RBAC: $RBAC\n        variables: $variables\n        steps_json: $steps_json\n        example_metadata_json: $example_metadata_json\n      }\n    ) {\n      id\n      name\n      description\n      owner\n      rights_mode\n      RBAC {\n        type\n        users {\n          id\n          rights\n        }\n        roles {\n          id\n          rights\n        }\n        projects {\n          id\n          rights\n        }\n      }\n      variables\n      steps_json\n      example_metadata_json\n      createdAt\n      updatedAt\n    }\n  }\n`;\n\nexport const REMOVE_WORKFLOW_TEMPLATE_BY_ID = gql`\n  mutation RemoveWorkflowTemplateById($id: ID!) {\n    workflow_templatesRemoveOneById(id: $id) {\n      id\n    }\n  }\n`;\n\nexport const GET_JOB_STATISTICS_ENHANCED = gql`\n  query GetJobStatisticsEnhanced($user: Float, $agent: String, $from: String, $to: String) {\n    jobStatistics(user: $user, agent: $agent, from: $from, to: $to) {\n      runningCount\n      erroredCount\n      completedCount\n      failedCount\n      averageDuration\n    }\n  }\n`;\n\n// Analytics Dashboard Queries\n\n// Summary Cards Queries (24h vs 7-day average)\nexport const GET_AGENT_SESSIONS_STATISTICS = gql`\n  query AgentSessionsStatistics($from: Date!, $to: Date!) {\n    agent_sessionsStatistics(filters: {\n      createdAt: { and: [{ gte: $from }, { lte: $to }] }\n    }) {\n      group\n      count\n    }\n  }\n`;\n\nexport const GET_WORKFLOW_RUNS_STATISTICS = gql`\n  query WorkflowRunsStatistics($from: Date!, $to: Date!) {\n    jobsStatistics(filters: {\n      type: { eq: \"workflow\" }\n      createdAt: { and: [{ gte: $from }, { lte: $to }] }\n    }) {\n      group\n      count\n    }\n  }\n`;\n\nexport const GET_EMBEDDING_JOBS_STATISTICS = gql`\n  query EmbeddingJobsStatistics($from: Date!, $to: Date!) {\n    jobsStatistics(filters: {\n      type: { eq: \"embedder\" }\n      createdAt: { and: [{ gte: $from }, { lte: $to }] }\n    }) {\n      group\n      count\n    }\n  }\n`;\n\nexport const GET_FUNCTION_CALLS_STATISTICS = gql`\n  query FunctionCallsStatistics($from: Date!, $to: Date!) {\n    trackingStatistics(filters: {\n      type: { eq: TOOL_CALL }\n      createdAt: { and: [{ gte: $from }, { lte: $to }] }\n    }) {\n      group\n      count\n    }\n  }\n`;\n\nexport const GET_AGENT_RUN_STATISTICS = gql`  \n  query AgentCallsStatistics($from: Date!, $to: Date!) {\n    trackingStatistics(filters: {\n      type: { eq: AGENT_RUN }\n      name: { eq: \"count\" }\n      createdAt: { and: [{ gte: $from }, { lte: $to }] }\n    }) {\n      group\n      count\n    }\n  }\n`;\n\nexport const GET_TOKEN_USAGE_STATISTICS = gql`  \n  query AgentCallsStatistics($from: Date!, $to: Date!) {\n    trackingStatistics(filters: {\n      name: { in: [\"inputTokens\", \"outputTokens\"] }\n      createdAt: { and: [{ gte: $from }, { lte: $to }] }\n    }) {\n      group\n      count\n    }\n  }\n`;\n\n\n// Time Series Chart Query\nexport const GET_TIME_SERIES_STATISTICS = gql`\n  query TimeSeriesStatistics($type: typeEnum!, $from: Date!, $to: Date!) {\n    trackingStatistics(\n      groupBy: \"createdAt\"\n      filters: {\n        type: { eq: $type }\n        createdAt: { and: [{ gte: $from }, { lte: $to }] }\n      }\n    ) {\n      group\n      count\n    }\n  }\n`;\n\n// Donut Chart Query  \nexport const GET_DONUT_STATISTICS = gql`\n  query DonutStatistics($type: typeEnum!, $groupBy: String!, $from: Date!, $to: Date!) {\n    trackingStatistics(\n      groupBy: $groupBy\n      filters: {\n        type: { eq: $type }\n        createdAt: { and: [{ gte: $from }, { lte: $to }] }\n      }\n    ) {\n      group\n      count\n    }\n  }\n`;\n\nconst PROJECT_FIELDS = `\n  id\n  name\n  description\n  image\n  custom_instructions\n  rights_mode\n  created_by\n  createdAt\n  updatedAt\n  project_items\n  RBAC {\n    type\n    users {\n      id\n      rights\n    }\n    roles {\n      id\n      rights\n    }\n  }\n`;\n\nexport const GET_PROJECTS = gql`\n  query GetProjects(\n    $page: Int!\n    $limit: Int!\n    $filters: [FilterProject]\n    $sort: SortBy = { field: \"updatedAt\", direction: DESC }\n  ) {\n    projectsPagination(\n      page: $page\n      limit: $limit\n      sort: $sort\n      filters: $filters\n    ) {\n      pageInfo {\n        pageCount\n        itemCount\n        currentPage\n        hasPreviousPage\n        hasNextPage\n      }\n      items {\n        ${PROJECT_FIELDS}\n      }\n    }\n  }\n`;\n\nexport const GET_PROJECTS_BY_IDS = gql`\n  query GetProjectsByIds($ids: [ID!]!) {\n    projectByIds(ids: $ids) {\n      ${PROJECT_FIELDS}\n    }\n  }\n`;\n\nexport const GET_PROJECT_BY_ID = gql`\n  query GetProjectById($id: ID!) {\n    projectById(id: $id) {\n      ${PROJECT_FIELDS}\n    }\n  }\n`;\n\nexport const UPDATE_USER_FAVOURITE_PROJECTS = gql`\n  mutation UpdateUserFavouriteProjects($id: ID!, $favourite_projects: JSON) {\n    userUpdateById(input: { favourite_projects: $favourite_projects }, filter: { id: $id }) {\n      item {\n        id\n        favourite_projects\n      }\n    }\n  }\n`;\n\nexport const CREATE_PROJECT = gql`\n  mutation CreateProject($input: projectInput!) {\n    projectsCreateOne(input: $input) {\n      item {\n        ${PROJECT_FIELDS}\n      }\n    }\n  }\n`;\n\nexport const UPDATE_PROJECT = gql`\n  mutation UpdateProject($id: ID!, $input: projectInput!) {\n    projectsUpdateOneById(id: $id, input: $input) {\n      item {\n        ${PROJECT_FIELDS}\n      }\n    }\n  }\n`;\n\nexport const DELETE_PROJECT = gql`\n  mutation DeleteProject($id: ID!) {\n    projectsRemoveOneById(id: $id) {\n      id\n      name\n    }\n  }\n`;\n\n// ============================================\n// EVAL-RELATED QUERIES\n// ============================================\n\nconst TEST_CASE_FIELDS = `\n  id\n  name\n  description\n  inputs\n  expected_output\n  expected_tools\n  expected_knowledge_sources\n  expected_agent_tools\n  eval_set_id\n  createdAt\n  updatedAt\n`;\n\nconst EVAL_SET_FIELDS = `\n  id\n  name\n  description\n  createdAt\n  updatedAt\n`;\n\nconst EVAL_RUN_FIELDS = `\n  id\n  name\n  eval_set_id\n  agent_id\n  eval_functions\n  config\n  scoring_method\n  pass_threshold\n  test_case_ids\n  createdAt\n  updatedAt\n  rights_mode\n  RBAC {\n    type\n    users {\n      id\n      rights\n    }\n    roles {\n      id\n      rights\n    }\n    projects {\n      id\n      rights\n    }\n  }\n`;\n\n// Test Cases\nexport const GET_TEST_CASES = gql`\n  query GetTestCases(\n    $page: Int!\n    $limit: Int!\n    $filters: [FilterTest_case]\n  ) {\n    test_casesPagination(page: $page, limit: $limit, filters: $filters) {\n      pageInfo {\n        pageCount\n        itemCount\n        currentPage\n        hasPreviousPage\n        hasNextPage\n      }\n      items {\n        ${TEST_CASE_FIELDS}\n      }\n    }\n  }\n`;\n\nexport const GET_TEST_CASE_BY_ID = gql`\n  query GetTestCaseById($id: ID!) {\n    test_caseById(id: $id) {\n      ${TEST_CASE_FIELDS}\n    }\n  }\n`;\n\nexport const CREATE_TEST_CASE = gql`\n  mutation CreateTestCase($data: test_caseInput!) {\n    test_casesCreateOne(input: $data) {\n      item {\n        ${TEST_CASE_FIELDS}\n      }\n    }\n  }\n`;\n\nexport const UPDATE_TEST_CASE = gql`\n  mutation UpdateTestCase($id: ID!, $data: test_caseInput!) {\n    test_casesUpdateOneById(id: $id, input: $data) {\n      item {\n        ${TEST_CASE_FIELDS}\n      }\n    }\n  }\n`;\n\nexport const DELETE_TEST_CASE = gql`\n  mutation DeleteTestCase($id: ID!) {\n    test_casesRemoveOneById(id: $id) {\n      id\n      name\n    }\n  }\n`;\n\n// Eval Sets\nexport const GET_EVAL_SETS = gql`\n  query GetEvalSets(\n    $page: Int!\n    $limit: Int!\n    $filters: [FilterEval_set]\n  ) {\n    eval_setsPagination(page: $page, limit: $limit, filters: $filters) {\n      pageInfo {\n        pageCount\n        itemCount\n        currentPage\n        hasPreviousPage\n        hasNextPage\n      }\n      items {\n        ${EVAL_SET_FIELDS}\n      }\n    }\n  }\n`;\n\nconst EVAL_FIELDS = `\n  id\n  name\n  description\n  config {\n    name\n    description\n  }\n  llm\n`;\n\nexport const GET_EVAL_FUNCTIONS = gql`\n  query GetEvals {\n    evals {\n      items {\n        ${EVAL_FIELDS}\n      }\n    }\n  }\n`;\n\nexport const GET_EVAL_SET_BY_ID = gql`\n  query GetEvalSetById($id: ID!) {\n    eval_setById(id: $id) {\n      ${EVAL_SET_FIELDS}\n    }\n  }\n`;\n\nexport const CREATE_EVAL_SET = gql`\n  mutation CreateEvalSet($data: eval_setInput!) {\n    eval_setsCreateOne(input: $data) {\n      item {\n        ${EVAL_SET_FIELDS}\n      }\n    }\n  }\n`;\n\nexport const UPDATE_EVAL_SET = gql`\n  mutation UpdateEvalSet($id: ID!, $data: eval_setInput!) {\n    eval_setsUpdateOneById(id: $id, input: $data) {\n      item {\n        ${EVAL_SET_FIELDS}\n      }\n    }\n  }\n`;\n\nexport const DELETE_EVAL_SET = gql`\n  mutation DeleteEvalSet($id: ID!) {\n    eval_setsRemoveOneById(id: $id) {\n      id\n      name\n    }\n  }\n`;\n\n// Eval Runs\nexport const GET_EVAL_RUNS = gql`\n  query GetEvalRuns(\n    $page: Int!\n    $limit: Int!\n    $filters: [FilterEval_run]\n  ) {\n    eval_runsPagination(page: $page, limit: $limit, filters: $filters) {\n      pageInfo {\n        pageCount\n        itemCount\n        currentPage\n        hasPreviousPage\n        hasNextPage\n      }\n      items {\n        ${EVAL_RUN_FIELDS}\n      }\n    }\n  }\n`;\n\nexport const GET_EVAL_RUN_BY_ID = gql`\n  query GetEvalRunById($id: ID!) {\n    eval_runById(id: $id) {\n      ${EVAL_RUN_FIELDS}\n    }\n  }\n`;\n\nexport const CREATE_EVAL_RUN = gql`\n  mutation CreateEvalRun($data: eval_runInput!) {\n    eval_runsCreateOne(input: $data) {\n      item {\n        ${EVAL_RUN_FIELDS}\n      }\n    }\n  }\n`;\n\nexport const GET_QUEUE = gql`\n  query GetQueue($queue: QueueEnum!) {\n    queue(queue: $queue) {\n      name\n      concurrency\n      ratelimit\n      isMaxed\n      isPaused\n      jobs {\n        paused\n        completed\n        failed\n        waiting\n        active\n        delayed\n      }\n    }\n  }\n`;\n\nexport const GET_JOBS = gql`\n  query GetJobs($queue: QueueEnum!, $statusses: [JobStateEnum!]) {\n    jobs(queue: $queue, statusses: $statusses) {\n      items {\n        name\n        id\n        returnvalue\n        stacktrace\n        failedReason\n        state\n        data\n        timestamp\n      }\n      pageInfo {\n        pageCount\n        itemCount\n        currentPage\n        hasPreviousPage\n        hasNextPage\n      }\n    }\n  }\n`;\n\nexport const DELETE_JOB = gql`\n  mutation DeleteJob($queue: QueueEnum!, $id: String!) {\n    deleteJob(queue: $queue, id: $id) {\n      success\n    }\n  }\n`;\n\nexport const PAUSE_QUEUE = gql`\n  mutation PauseQueue($queue: QueueEnum!) {\n    pauseQueue(queue: $queue) {\n      success\n    }\n  }\n`;\n\nexport const RESUME_QUEUE = gql`\n  mutation ResumeQueue($queue: QueueEnum!) {\n    resumeQueue(queue: $queue) {\n      success\n    }\n  }\n`;\n\nexport const DRAIN_QUEUE = gql`\n  mutation DrainQueue($queue: QueueEnum!) {\n    drainQueue(queue: $queue) {\n      success\n    }\n  }\n`;\n\nexport const RUN_EVAL = gql`\n  mutation RunEval($id: ID!) {\n    runEval(id: $id) {\n      jobs\n      count\n    }\n  }\n`;\n\nexport const UPDATE_EVAL_RUN = gql`\n  mutation UpdateEvalRun($id: ID!, $data: eval_runInput!) {\n    eval_runsUpdateOneById(id: $id, input: $data) {\n      item {\n        ${EVAL_RUN_FIELDS}\n      }\n    }\n  }\n`;\n\nexport const DELETE_EVAL_RUN = gql`\n  mutation DeleteEvalRun($id: ID!) {\n    eval_runsRemoveOneById(id: $id) {\n      id\n    }\n  }\n`;\n\nconst PLATFORM_CONFIGURATION_FIELDS = `\n  id\n  config_key\n  config_value\n  description\n  createdAt\n  updatedAt\n`;\n\nexport const GET_PLATFORM_CONFIGURATIONS = gql`\n  query GetPlatformConfigurations {\n    platform_configurationsPagination {\n      pageInfo {\n        pageCount\n        itemCount\n        currentPage\n        hasPreviousPage\n        hasNextPage\n      }\n      items {\n        ${PLATFORM_CONFIGURATION_FIELDS}\n      }\n    }\n  }\n`;\n\nexport const GET_PLATFORM_CONFIGURATION_BY_KEY = gql`\n  query GetPlatformConfigurationByKey($config_key: FilterOperatorString!) {\n    platform_configurationsPagination(page: 1, limit: 1, filters: { config_key: $config_key }) {\n      pageInfo {\n        pageCount\n        itemCount\n        currentPage\n        hasPreviousPage\n        hasNextPage\n      }\n      items {\n        ${PLATFORM_CONFIGURATION_FIELDS}\n      }\n    }\n  }\n`;\n\nexport const CREATE_PLATFORM_CONFIGURATION = gql`\n  mutation CreatePlatformConfiguration($data: platform_configurationInput!) {\n    platform_configurationsCreateOne(input: $data) {\n      item {\n        ${PLATFORM_CONFIGURATION_FIELDS}\n      }\n    }\n  }\n`;\n\nexport const UPDATE_PLATFORM_CONFIGURATION = gql`\n  mutation UpdatePlatformConfiguration($id: ID!, $data: platform_configurationInput!) {\n    platform_configurationsUpdateOneById(id: $id, input: $data) {\n      item {\n        ${PLATFORM_CONFIGURATION_FIELDS}\n      }\n    }\n  }\n`;\n\nexport const DELETE_PLATFORM_CONFIGURATION = gql`\n  mutation DeletePlatformConfiguration($id: ID!) {\n    platform_configurationsRemoveOneById(id: $id) {\n      id\n    }\n  }\n`;"],"names":["buttonVariants","cva","variants","variant","default","destructive","outline","secondary","ghost","link","size","sm","lg","icon","defaultVariants","Button","React","param","ref","className","asChild","props","Comp","Slot","react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__","jsx","cn","displayName","_len","arguments","length","inputs","_key","twMerge","clsx","PAGINATION_POSTFIX","CREATE_ONE_POSTFIX","CONTEXT_FIELDS","ITEM_FIELDS","concat","fields","join","USER_FIELDS","AGENT_FIELDS","GET_AGENTS","gql","GET_AGENT_SESSIONS","GET_CONTEXTS","GET_CONTEXT_BY_ID","GET_ITEMS","context","upperCaseContext","charAt","toUpperCase","slice","PROCESS_ITEM_FIELD","GET_ITEM_BY_ID","chunks","CREATE_ITEM","DELETE_CHUNKS","GENERATE_CHUNKS","UPDATE_ITEM","DELETE_ITEM","UPDATE_AGENT_SESSION_RBAC","UPDATE_AGENT_SESSION_PROJECT","UPDATE_AGENT_SESSION_TITLE","GET_AGENT_MESSAGES","GET_JOB_RESULTS","GET_USER_ROLES","GET_USERS","GET_AGENT_BY_ID","GET_AGENTS_BY_IDS","GET_AGENT_SESSION_BY_ID","UPDATE_USER_BY_ID","CREATE_API_USER","UPDATE_USER_ROLE_BY_ID","CREATE_AGENT_SESSION","CREATE_AGENT","GET_TOOLS","UPDATE_AGENT_BY_ID","CREATE_USER_ROLE","CREATE_USER","RESET_USER_PASSWORD","GET_PROVIDERS","REMOVE_USER_BY_ID","REMOVE_USER_ROLE_BY_ID","REMOVE_AGENT_BY_ID","REMOVE_AGENT_SESSION_BY_ID","GET_VARIABLES","GET_VARIABLE_BY_ID","CREATE_VARIABLE","UPDATE_VARIABLE","REMOVE_VARIABLE_BY_ID","GET_USER_BY_ID","GET_WORKFLOW_TEMPLATES","CREATE_WORKFLOW_TEMPLATE","UPDATE_WORKFLOW_TEMPLATE","REMOVE_WORKFLOW_TEMPLATE_BY_ID","GET_JOB_STATISTICS_ENHANCED","GET_AGENT_SESSIONS_STATISTICS","GET_WORKFLOW_RUNS_STATISTICS","GET_FUNCTION_CALLS_STATISTICS","GET_AGENT_RUN_STATISTICS","GET_TOKEN_USAGE_STATISTICS","GET_TIME_SERIES_STATISTICS","GET_DONUT_STATISTICS","PROJECT_FIELDS","GET_PROJECTS","GET_PROJECTS_BY_IDS","GET_PROJECT_BY_ID","UPDATE_USER_FAVOURITE_PROJECTS","CREATE_PROJECT","UPDATE_PROJECT","DELETE_PROJECT","TEST_CASE_FIELDS","EVAL_SET_FIELDS","EVAL_RUN_FIELDS","GET_TEST_CASES","CREATE_TEST_CASE","UPDATE_TEST_CASE","DELETE_TEST_CASE","GET_EVAL_SETS","GET_EVAL_FUNCTIONS","GET_EVAL_SET_BY_ID","CREATE_EVAL_SET","UPDATE_EVAL_SET","DELETE_EVAL_SET","GET_EVAL_RUNS","CREATE_EVAL_RUN","GET_QUEUE","GET_JOBS","DELETE_JOB","PAUSE_QUEUE","RESUME_QUEUE","DRAIN_QUEUE","RUN_EVAL","UPDATE_EVAL_RUN","PLATFORM_CONFIGURATION_FIELDS","GET_PLATFORM_CONFIGURATIONS","CREATE_PLATFORM_CONFIGURATION","UPDATE_PLATFORM_CONFIGURATION"],"sourceRoot":""}