{"version":3,"file":"static/chunks/85-f0d63cfae716000a.js","mappings":"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","sources":["webpack://_N_E/./node_modules/@radix-ui/react-direction/dist/index.mjs","webpack://_N_E/../src/menu.tsx","webpack://_N_E/../src/dropdown-menu.tsx","webpack://_N_E/../src/roving-focus-group.tsx"],"sourcesContent":["// packages/react/direction/src/direction.tsx\nimport * as React from \"react\";\nimport { jsx } from \"react/jsx-runtime\";\nvar DirectionContext = React.createContext(void 0);\nvar DirectionProvider = (props) => {\n  const { dir, children } = props;\n  return /* @__PURE__ */ jsx(DirectionContext.Provider, { value: dir, children });\n};\nfunction useDirection(localDir) {\n  const globalDir = React.useContext(DirectionContext);\n  return localDir || globalDir || \"ltr\";\n}\nvar Provider = DirectionProvider;\nexport {\n  DirectionProvider,\n  Provider,\n  useDirection\n};\n//# sourceMappingURL=index.mjs.map\n","import * as React from 'react';\nimport { composeEventHandlers } from '@radix-ui/primitive';\nimport { createCollection } from '@radix-ui/react-collection';\nimport { useComposedRefs, composeRefs } from '@radix-ui/react-compose-refs';\nimport { createContextScope } from '@radix-ui/react-context';\nimport { useDirection } from '@radix-ui/react-direction';\nimport { DismissableLayer } from '@radix-ui/react-dismissable-layer';\nimport { useFocusGuards } from '@radix-ui/react-focus-guards';\nimport { FocusScope } from '@radix-ui/react-focus-scope';\nimport { useId } from '@radix-ui/react-id';\nimport * as PopperPrimitive from '@radix-ui/react-popper';\nimport { createPopperScope } from '@radix-ui/react-popper';\nimport { Portal as PortalPrimitive } from '@radix-ui/react-portal';\nimport { Presence } from '@radix-ui/react-presence';\nimport { Primitive, dispatchDiscreteCustomEvent } from '@radix-ui/react-primitive';\nimport * as RovingFocusGroup from '@radix-ui/react-roving-focus';\nimport { createRovingFocusGroupScope } from '@radix-ui/react-roving-focus';\nimport { createSlot } from '@radix-ui/react-slot';\nimport { useCallbackRef } from '@radix-ui/react-use-callback-ref';\nimport { hideOthers } from 'aria-hidden';\nimport { RemoveScroll } from 'react-remove-scroll';\n\nimport type { Scope } from '@radix-ui/react-context';\n\ntype Direction = 'ltr' | 'rtl';\n\nconst SELECTION_KEYS = ['Enter', ' '];\nconst FIRST_KEYS = ['ArrowDown', 'PageUp', 'Home'];\nconst LAST_KEYS = ['ArrowUp', 'PageDown', 'End'];\nconst FIRST_LAST_KEYS = [...FIRST_KEYS, ...LAST_KEYS];\nconst SUB_OPEN_KEYS: Record<Direction, string[]> = {\n  ltr: [...SELECTION_KEYS, 'ArrowRight'],\n  rtl: [...SELECTION_KEYS, 'ArrowLeft'],\n};\nconst SUB_CLOSE_KEYS: Record<Direction, string[]> = {\n  ltr: ['ArrowLeft'],\n  rtl: ['ArrowRight'],\n};\n\n/* -------------------------------------------------------------------------------------------------\n * Menu\n * -----------------------------------------------------------------------------------------------*/\n\nconst MENU_NAME = 'Menu';\n\ntype ItemData = { disabled: boolean; textValue: string };\nconst [Collection, useCollection, createCollectionScope] = createCollection<\n  MenuItemElement,\n  ItemData\n>(MENU_NAME);\n\ntype ScopedProps<P> = P & { __scopeMenu?: Scope };\nconst [createMenuContext, createMenuScope] = createContextScope(MENU_NAME, [\n  createCollectionScope,\n  createPopperScope,\n  createRovingFocusGroupScope,\n]);\nconst usePopperScope = createPopperScope();\nconst useRovingFocusGroupScope = createRovingFocusGroupScope();\n\ntype MenuContextValue = {\n  open: boolean;\n  onOpenChange(open: boolean): void;\n  content: MenuContentElement | null;\n  onContentChange(content: MenuContentElement | null): void;\n};\n\nconst [MenuProvider, useMenuContext] = createMenuContext<MenuContextValue>(MENU_NAME);\n\ntype MenuRootContextValue = {\n  onClose(): void;\n  isUsingKeyboardRef: React.RefObject<boolean>;\n  dir: Direction;\n  modal: boolean;\n};\n\nconst [MenuRootProvider, useMenuRootContext] = createMenuContext<MenuRootContextValue>(MENU_NAME);\n\ninterface MenuProps {\n  children?: React.ReactNode;\n  open?: boolean;\n  onOpenChange?(open: boolean): void;\n  dir?: Direction;\n  modal?: boolean;\n}\n\nconst Menu: React.FC<MenuProps> = (props: ScopedProps<MenuProps>) => {\n  const { __scopeMenu, open = false, children, dir, onOpenChange, modal = true } = props;\n  const popperScope = usePopperScope(__scopeMenu);\n  const [content, setContent] = React.useState<MenuContentElement | null>(null);\n  const isUsingKeyboardRef = React.useRef(false);\n  const handleOpenChange = useCallbackRef(onOpenChange);\n  const direction = useDirection(dir);\n\n  React.useEffect(() => {\n    // Capture phase ensures we set the boolean before any side effects execute\n    // in response to the key or pointer event as they might depend on this value.\n    const handleKeyDown = () => {\n      isUsingKeyboardRef.current = true;\n      document.addEventListener('pointerdown', handlePointer, { capture: true, once: true });\n      document.addEventListener('pointermove', handlePointer, { capture: true, once: true });\n    };\n    const handlePointer = () => (isUsingKeyboardRef.current = false);\n    document.addEventListener('keydown', handleKeyDown, { capture: true });\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown, { capture: true });\n      document.removeEventListener('pointerdown', handlePointer, { capture: true });\n      document.removeEventListener('pointermove', handlePointer, { capture: true });\n    };\n  }, []);\n\n  return (\n    <PopperPrimitive.Root {...popperScope}>\n      <MenuProvider\n        scope={__scopeMenu}\n        open={open}\n        onOpenChange={handleOpenChange}\n        content={content}\n        onContentChange={setContent}\n      >\n        <MenuRootProvider\n          scope={__scopeMenu}\n          onClose={React.useCallback(() => handleOpenChange(false), [handleOpenChange])}\n          isUsingKeyboardRef={isUsingKeyboardRef}\n          dir={direction}\n          modal={modal}\n        >\n          {children}\n        </MenuRootProvider>\n      </MenuProvider>\n    </PopperPrimitive.Root>\n  );\n};\n\nMenu.displayName = MENU_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * MenuAnchor\n * -----------------------------------------------------------------------------------------------*/\n\nconst ANCHOR_NAME = 'MenuAnchor';\n\ntype MenuAnchorElement = React.ComponentRef<typeof PopperPrimitive.Anchor>;\ntype PopperAnchorProps = React.ComponentPropsWithoutRef<typeof PopperPrimitive.Anchor>;\ninterface MenuAnchorProps extends PopperAnchorProps {}\n\nconst MenuAnchor = React.forwardRef<MenuAnchorElement, MenuAnchorProps>(\n  (props: ScopedProps<MenuAnchorProps>, forwardedRef) => {\n    const { __scopeMenu, ...anchorProps } = props;\n    const popperScope = usePopperScope(__scopeMenu);\n    return <PopperPrimitive.Anchor {...popperScope} {...anchorProps} ref={forwardedRef} />;\n  }\n);\n\nMenuAnchor.displayName = ANCHOR_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * MenuPortal\n * -----------------------------------------------------------------------------------------------*/\n\nconst PORTAL_NAME = 'MenuPortal';\n\ntype PortalContextValue = { forceMount?: true };\nconst [PortalProvider, usePortalContext] = createMenuContext<PortalContextValue>(PORTAL_NAME, {\n  forceMount: undefined,\n});\n\ntype PortalProps = React.ComponentPropsWithoutRef<typeof PortalPrimitive>;\ninterface MenuPortalProps {\n  children?: React.ReactNode;\n  /**\n   * Specify a container element to portal the content into.\n   */\n  container?: PortalProps['container'];\n  /**\n   * Used to force mounting when more control is needed. Useful when\n   * controlling animation with React animation libraries.\n   */\n  forceMount?: true;\n}\n\nconst MenuPortal: React.FC<MenuPortalProps> = (props: ScopedProps<MenuPortalProps>) => {\n  const { __scopeMenu, forceMount, children, container } = props;\n  const context = useMenuContext(PORTAL_NAME, __scopeMenu);\n  return (\n    <PortalProvider scope={__scopeMenu} forceMount={forceMount}>\n      <Presence present={forceMount || context.open}>\n        <PortalPrimitive asChild container={container}>\n          {children}\n        </PortalPrimitive>\n      </Presence>\n    </PortalProvider>\n  );\n};\n\nMenuPortal.displayName = PORTAL_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * MenuContent\n * -----------------------------------------------------------------------------------------------*/\n\nconst CONTENT_NAME = 'MenuContent';\n\ntype MenuContentContextValue = {\n  onItemEnter(event: React.PointerEvent): void;\n  onItemLeave(event: React.PointerEvent): void;\n  onTriggerLeave(event: React.PointerEvent): void;\n  searchRef: React.RefObject<string>;\n  pointerGraceTimerRef: React.MutableRefObject<number>;\n  onPointerGraceIntentChange(intent: GraceIntent | null): void;\n};\nconst [MenuContentProvider, useMenuContentContext] =\n  createMenuContext<MenuContentContextValue>(CONTENT_NAME);\n\ntype MenuContentElement = MenuRootContentTypeElement;\n/**\n * We purposefully don't union MenuRootContent and MenuSubContent props here because\n * they have conflicting prop types. We agreed that we would allow MenuSubContent to\n * accept props that it would just ignore.\n */\ninterface MenuContentProps extends MenuRootContentTypeProps {\n  /**\n   * Used to force mounting when more control is needed. Useful when\n   * controlling animation with React animation libraries.\n   */\n  forceMount?: true;\n}\n\nconst MenuContent = React.forwardRef<MenuContentElement, MenuContentProps>(\n  (props: ScopedProps<MenuContentProps>, forwardedRef) => {\n    const portalContext = usePortalContext(CONTENT_NAME, props.__scopeMenu);\n    const { forceMount = portalContext.forceMount, ...contentProps } = props;\n    const context = useMenuContext(CONTENT_NAME, props.__scopeMenu);\n    const rootContext = useMenuRootContext(CONTENT_NAME, props.__scopeMenu);\n\n    return (\n      <Collection.Provider scope={props.__scopeMenu}>\n        <Presence present={forceMount || context.open}>\n          <Collection.Slot scope={props.__scopeMenu}>\n            {rootContext.modal ? (\n              <MenuRootContentModal {...contentProps} ref={forwardedRef} />\n            ) : (\n              <MenuRootContentNonModal {...contentProps} ref={forwardedRef} />\n            )}\n          </Collection.Slot>\n        </Presence>\n      </Collection.Provider>\n    );\n  }\n);\n\n/* ---------------------------------------------------------------------------------------------- */\n\ntype MenuRootContentTypeElement = MenuContentImplElement;\ninterface MenuRootContentTypeProps\n  extends Omit<MenuContentImplProps, keyof MenuContentImplPrivateProps> {}\n\nconst MenuRootContentModal = React.forwardRef<MenuRootContentTypeElement, MenuRootContentTypeProps>(\n  (props: ScopedProps<MenuRootContentTypeProps>, forwardedRef) => {\n    const context = useMenuContext(CONTENT_NAME, props.__scopeMenu);\n    const ref = React.useRef<MenuRootContentTypeElement>(null);\n    const composedRefs = useComposedRefs(forwardedRef, ref);\n\n    // Hide everything from ARIA except the `MenuContent`\n    React.useEffect(() => {\n      const content = ref.current;\n      if (content) return hideOthers(content);\n    }, []);\n\n    return (\n      <MenuContentImpl\n        {...props}\n        ref={composedRefs}\n        // we make sure we're not trapping once it's been closed\n        // (closed !== unmounted when animating out)\n        trapFocus={context.open}\n        // make sure to only disable pointer events when open\n        // this avoids blocking interactions while animating out\n        disableOutsidePointerEvents={context.open}\n        disableOutsideScroll\n        // When focus is trapped, a `focusout` event may still happen.\n        // We make sure we don't trigger our `onDismiss` in such case.\n        onFocusOutside={composeEventHandlers(\n          props.onFocusOutside,\n          (event) => event.preventDefault(),\n          { checkForDefaultPrevented: false }\n        )}\n        onDismiss={() => context.onOpenChange(false)}\n      />\n    );\n  }\n);\n\nconst MenuRootContentNonModal = React.forwardRef<\n  MenuRootContentTypeElement,\n  MenuRootContentTypeProps\n>((props: ScopedProps<MenuRootContentTypeProps>, forwardedRef) => {\n  const context = useMenuContext(CONTENT_NAME, props.__scopeMenu);\n  return (\n    <MenuContentImpl\n      {...props}\n      ref={forwardedRef}\n      trapFocus={false}\n      disableOutsidePointerEvents={false}\n      disableOutsideScroll={false}\n      onDismiss={() => context.onOpenChange(false)}\n    />\n  );\n});\n\n/* ---------------------------------------------------------------------------------------------- */\n\ntype MenuContentImplElement = React.ComponentRef<typeof PopperPrimitive.Content>;\ntype FocusScopeProps = React.ComponentPropsWithoutRef<typeof FocusScope>;\ntype DismissableLayerProps = React.ComponentPropsWithoutRef<typeof DismissableLayer>;\ntype RovingFocusGroupProps = React.ComponentPropsWithoutRef<typeof RovingFocusGroup.Root>;\ntype PopperContentProps = React.ComponentPropsWithoutRef<typeof PopperPrimitive.Content>;\ntype MenuContentImplPrivateProps = {\n  onOpenAutoFocus?: FocusScopeProps['onMountAutoFocus'];\n  onDismiss?: DismissableLayerProps['onDismiss'];\n  disableOutsidePointerEvents?: DismissableLayerProps['disableOutsidePointerEvents'];\n\n  /**\n   * Whether scrolling outside the `MenuContent` should be prevented\n   * (default: `false`)\n   */\n  disableOutsideScroll?: boolean;\n\n  /**\n   * Whether focus should be trapped within the `MenuContent`\n   * (default: false)\n   */\n  trapFocus?: FocusScopeProps['trapped'];\n};\ninterface MenuContentImplProps\n  extends MenuContentImplPrivateProps,\n    Omit<PopperContentProps, 'dir' | 'onPlaced'> {\n  /**\n   * Event handler called when auto-focusing on close.\n   * Can be prevented.\n   */\n  onCloseAutoFocus?: FocusScopeProps['onUnmountAutoFocus'];\n\n  /**\n   * Whether keyboard navigation should loop around\n   * @defaultValue false\n   */\n  loop?: RovingFocusGroupProps['loop'];\n\n  onEntryFocus?: RovingFocusGroupProps['onEntryFocus'];\n  onEscapeKeyDown?: DismissableLayerProps['onEscapeKeyDown'];\n  onPointerDownOutside?: DismissableLayerProps['onPointerDownOutside'];\n  onFocusOutside?: DismissableLayerProps['onFocusOutside'];\n  onInteractOutside?: DismissableLayerProps['onInteractOutside'];\n}\n\nconst Slot = createSlot('MenuContent.ScrollLock');\n\nconst MenuContentImpl = React.forwardRef<MenuContentImplElement, MenuContentImplProps>(\n  (props: ScopedProps<MenuContentImplProps>, forwardedRef) => {\n    const {\n      __scopeMenu,\n      loop = false,\n      trapFocus,\n      onOpenAutoFocus,\n      onCloseAutoFocus,\n      disableOutsidePointerEvents,\n      onEntryFocus,\n      onEscapeKeyDown,\n      onPointerDownOutside,\n      onFocusOutside,\n      onInteractOutside,\n      onDismiss,\n      disableOutsideScroll,\n      ...contentProps\n    } = props;\n    const context = useMenuContext(CONTENT_NAME, __scopeMenu);\n    const rootContext = useMenuRootContext(CONTENT_NAME, __scopeMenu);\n    const popperScope = usePopperScope(__scopeMenu);\n    const rovingFocusGroupScope = useRovingFocusGroupScope(__scopeMenu);\n    const getItems = useCollection(__scopeMenu);\n    const [currentItemId, setCurrentItemId] = React.useState<string | null>(null);\n    const contentRef = React.useRef<HTMLDivElement>(null);\n    const composedRefs = useComposedRefs(forwardedRef, contentRef, context.onContentChange);\n    const timerRef = React.useRef(0);\n    const searchRef = React.useRef('');\n    const pointerGraceTimerRef = React.useRef(0);\n    const pointerGraceIntentRef = React.useRef<GraceIntent | null>(null);\n    const pointerDirRef = React.useRef<Side>('right');\n    const lastPointerXRef = React.useRef(0);\n\n    const ScrollLockWrapper = disableOutsideScroll ? RemoveScroll : React.Fragment;\n    const scrollLockWrapperProps = disableOutsideScroll\n      ? { as: Slot, allowPinchZoom: true }\n      : undefined;\n\n    const handleTypeaheadSearch = (key: string) => {\n      const search = searchRef.current + key;\n      const items = getItems().filter((item) => !item.disabled);\n      const currentItem = document.activeElement;\n      const currentMatch = items.find((item) => item.ref.current === currentItem)?.textValue;\n      const values = items.map((item) => item.textValue);\n      const nextMatch = getNextMatch(values, search, currentMatch);\n      const newItem = items.find((item) => item.textValue === nextMatch)?.ref.current;\n\n      // Reset `searchRef` 1 second after it was last updated\n      (function updateSearch(value: string) {\n        searchRef.current = value;\n        window.clearTimeout(timerRef.current);\n        if (value !== '') timerRef.current = window.setTimeout(() => updateSearch(''), 1000);\n      })(search);\n\n      if (newItem) {\n        /**\n         * Imperative focus during keydown is risky so we prevent React's batching updates\n         * to avoid potential bugs. See: https://github.com/facebook/react/issues/20332\n         */\n        setTimeout(() => (newItem as HTMLElement).focus());\n      }\n    };\n\n    React.useEffect(() => {\n      return () => window.clearTimeout(timerRef.current);\n    }, []);\n\n    // Make sure the whole tree has focus guards as our `MenuContent` may be\n    // the last element in the DOM (because of the `Portal`)\n    useFocusGuards();\n\n    const isPointerMovingToSubmenu = React.useCallback((event: React.PointerEvent) => {\n      const isMovingTowards = pointerDirRef.current === pointerGraceIntentRef.current?.side;\n      return isMovingTowards && isPointerInGraceArea(event, pointerGraceIntentRef.current?.area);\n    }, []);\n\n    return (\n      <MenuContentProvider\n        scope={__scopeMenu}\n        searchRef={searchRef}\n        onItemEnter={React.useCallback(\n          (event) => {\n            if (isPointerMovingToSubmenu(event)) event.preventDefault();\n          },\n          [isPointerMovingToSubmenu]\n        )}\n        onItemLeave={React.useCallback(\n          (event) => {\n            if (isPointerMovingToSubmenu(event)) return;\n            contentRef.current?.focus();\n            setCurrentItemId(null);\n          },\n          [isPointerMovingToSubmenu]\n        )}\n        onTriggerLeave={React.useCallback(\n          (event) => {\n            if (isPointerMovingToSubmenu(event)) event.preventDefault();\n          },\n          [isPointerMovingToSubmenu]\n        )}\n        pointerGraceTimerRef={pointerGraceTimerRef}\n        onPointerGraceIntentChange={React.useCallback((intent) => {\n          pointerGraceIntentRef.current = intent;\n        }, [])}\n      >\n        <ScrollLockWrapper {...scrollLockWrapperProps}>\n          <FocusScope\n            asChild\n            trapped={trapFocus}\n            onMountAutoFocus={composeEventHandlers(onOpenAutoFocus, (event) => {\n              // when opening, explicitly focus the content area only and leave\n              // `onEntryFocus` in  control of focusing first item\n              event.preventDefault();\n              contentRef.current?.focus({ preventScroll: true });\n            })}\n            onUnmountAutoFocus={onCloseAutoFocus}\n          >\n            <DismissableLayer\n              asChild\n              disableOutsidePointerEvents={disableOutsidePointerEvents}\n              onEscapeKeyDown={onEscapeKeyDown}\n              onPointerDownOutside={onPointerDownOutside}\n              onFocusOutside={onFocusOutside}\n              onInteractOutside={onInteractOutside}\n              onDismiss={onDismiss}\n            >\n              <RovingFocusGroup.Root\n                asChild\n                {...rovingFocusGroupScope}\n                dir={rootContext.dir}\n                orientation=\"vertical\"\n                loop={loop}\n                currentTabStopId={currentItemId}\n                onCurrentTabStopIdChange={setCurrentItemId}\n                onEntryFocus={composeEventHandlers(onEntryFocus, (event) => {\n                  // only focus first item when using keyboard\n                  if (!rootContext.isUsingKeyboardRef.current) event.preventDefault();\n                })}\n                preventScrollOnEntryFocus\n              >\n                <PopperPrimitive.Content\n                  role=\"menu\"\n                  aria-orientation=\"vertical\"\n                  data-state={getOpenState(context.open)}\n                  data-radix-menu-content=\"\"\n                  dir={rootContext.dir}\n                  {...popperScope}\n                  {...contentProps}\n                  ref={composedRefs}\n                  style={{ outline: 'none', ...contentProps.style }}\n                  onKeyDown={composeEventHandlers(contentProps.onKeyDown, (event) => {\n                    // submenu key events bubble through portals. We only care about keys in this menu.\n                    const target = event.target as HTMLElement;\n                    const isKeyDownInside =\n                      target.closest('[data-radix-menu-content]') === event.currentTarget;\n                    const isModifierKey = event.ctrlKey || event.altKey || event.metaKey;\n                    const isCharacterKey = event.key.length === 1;\n                    if (isKeyDownInside) {\n                      // menus should not be navigated using tab key so we prevent it\n                      if (event.key === 'Tab') event.preventDefault();\n                      if (!isModifierKey && isCharacterKey) handleTypeaheadSearch(event.key);\n                    }\n                    // focus first/last item based on key pressed\n                    const content = contentRef.current;\n                    if (event.target !== content) return;\n                    if (!FIRST_LAST_KEYS.includes(event.key)) return;\n                    event.preventDefault();\n                    const items = getItems().filter((item) => !item.disabled);\n                    const candidateNodes = items.map((item) => item.ref.current!);\n                    if (LAST_KEYS.includes(event.key)) candidateNodes.reverse();\n                    focusFirst(candidateNodes);\n                  })}\n                  onBlur={composeEventHandlers(props.onBlur, (event) => {\n                    // clear search buffer when leaving the menu\n                    if (!event.currentTarget.contains(event.target)) {\n                      window.clearTimeout(timerRef.current);\n                      searchRef.current = '';\n                    }\n                  })}\n                  onPointerMove={composeEventHandlers(\n                    props.onPointerMove,\n                    whenMouse((event) => {\n                      const target = event.target as HTMLElement;\n                      const pointerXHasChanged = lastPointerXRef.current !== event.clientX;\n\n                      // We don't use `event.movementX` for this check because Safari will\n                      // always return `0` on a pointer event.\n                      if (event.currentTarget.contains(target) && pointerXHasChanged) {\n                        const newDir = event.clientX > lastPointerXRef.current ? 'right' : 'left';\n                        pointerDirRef.current = newDir;\n                        lastPointerXRef.current = event.clientX;\n                      }\n                    })\n                  )}\n                />\n              </RovingFocusGroup.Root>\n            </DismissableLayer>\n          </FocusScope>\n        </ScrollLockWrapper>\n      </MenuContentProvider>\n    );\n  }\n);\n\nMenuContent.displayName = CONTENT_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * MenuGroup\n * -----------------------------------------------------------------------------------------------*/\n\nconst GROUP_NAME = 'MenuGroup';\n\ntype MenuGroupElement = React.ComponentRef<typeof Primitive.div>;\ntype PrimitiveDivProps = React.ComponentPropsWithoutRef<typeof Primitive.div>;\ninterface MenuGroupProps extends PrimitiveDivProps {}\n\nconst MenuGroup = React.forwardRef<MenuGroupElement, MenuGroupProps>(\n  (props: ScopedProps<MenuGroupProps>, forwardedRef) => {\n    const { __scopeMenu, ...groupProps } = props;\n    return <Primitive.div role=\"group\" {...groupProps} ref={forwardedRef} />;\n  }\n);\n\nMenuGroup.displayName = GROUP_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * MenuLabel\n * -----------------------------------------------------------------------------------------------*/\n\nconst LABEL_NAME = 'MenuLabel';\n\ntype MenuLabelElement = React.ComponentRef<typeof Primitive.div>;\ninterface MenuLabelProps extends PrimitiveDivProps {}\n\nconst MenuLabel = React.forwardRef<MenuLabelElement, MenuLabelProps>(\n  (props: ScopedProps<MenuLabelProps>, forwardedRef) => {\n    const { __scopeMenu, ...labelProps } = props;\n    return <Primitive.div {...labelProps} ref={forwardedRef} />;\n  }\n);\n\nMenuLabel.displayName = LABEL_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * MenuItem\n * -----------------------------------------------------------------------------------------------*/\n\nconst ITEM_NAME = 'MenuItem';\nconst ITEM_SELECT = 'menu.itemSelect';\n\ntype MenuItemElement = MenuItemImplElement;\ninterface MenuItemProps extends Omit<MenuItemImplProps, 'onSelect'> {\n  onSelect?: (event: Event) => void;\n}\n\nconst MenuItem = React.forwardRef<MenuItemElement, MenuItemProps>(\n  (props: ScopedProps<MenuItemProps>, forwardedRef) => {\n    const { disabled = false, onSelect, ...itemProps } = props;\n    const ref = React.useRef<HTMLDivElement>(null);\n    const rootContext = useMenuRootContext(ITEM_NAME, props.__scopeMenu);\n    const contentContext = useMenuContentContext(ITEM_NAME, props.__scopeMenu);\n    const composedRefs = useComposedRefs(forwardedRef, ref);\n    const isPointerDownRef = React.useRef(false);\n\n    const handleSelect = () => {\n      const menuItem = ref.current;\n      if (!disabled && menuItem) {\n        const itemSelectEvent = new CustomEvent(ITEM_SELECT, { bubbles: true, cancelable: true });\n        menuItem.addEventListener(ITEM_SELECT, (event) => onSelect?.(event), { once: true });\n        dispatchDiscreteCustomEvent(menuItem, itemSelectEvent);\n        if (itemSelectEvent.defaultPrevented) {\n          isPointerDownRef.current = false;\n        } else {\n          rootContext.onClose();\n        }\n      }\n    };\n\n    return (\n      <MenuItemImpl\n        {...itemProps}\n        ref={composedRefs}\n        disabled={disabled}\n        onClick={composeEventHandlers(props.onClick, handleSelect)}\n        onPointerDown={(event) => {\n          props.onPointerDown?.(event);\n          isPointerDownRef.current = true;\n        }}\n        onPointerUp={composeEventHandlers(props.onPointerUp, (event) => {\n          // Pointer down can move to a different menu item which should activate it on pointer up.\n          // We dispatch a click for selection to allow composition with click based triggers and to\n          // prevent Firefox from getting stuck in text selection mode when the menu closes.\n          if (!isPointerDownRef.current) event.currentTarget?.click();\n        })}\n        onKeyDown={composeEventHandlers(props.onKeyDown, (event) => {\n          const isTypingAhead = contentContext.searchRef.current !== '';\n          if (disabled || (isTypingAhead && event.key === ' ')) return;\n          if (SELECTION_KEYS.includes(event.key)) {\n            event.currentTarget.click();\n            /**\n             * We prevent default browser behaviour for selection keys as they should trigger\n             * a selection only:\n             * - prevents space from scrolling the page.\n             * - if keydown causes focus to move, prevents keydown from firing on the new target.\n             */\n            event.preventDefault();\n          }\n        })}\n      />\n    );\n  }\n);\n\nMenuItem.displayName = ITEM_NAME;\n\n/* ---------------------------------------------------------------------------------------------- */\n\ntype MenuItemImplElement = React.ComponentRef<typeof Primitive.div>;\ninterface MenuItemImplProps extends PrimitiveDivProps {\n  disabled?: boolean;\n  textValue?: string;\n}\n\nconst MenuItemImpl = React.forwardRef<MenuItemImplElement, MenuItemImplProps>(\n  (props: ScopedProps<MenuItemImplProps>, forwardedRef) => {\n    const { __scopeMenu, disabled = false, textValue, ...itemProps } = props;\n    const contentContext = useMenuContentContext(ITEM_NAME, __scopeMenu);\n    const rovingFocusGroupScope = useRovingFocusGroupScope(__scopeMenu);\n    const ref = React.useRef<HTMLDivElement>(null);\n    const composedRefs = useComposedRefs(forwardedRef, ref);\n    const [isFocused, setIsFocused] = React.useState(false);\n\n    // get the item's `.textContent` as default strategy for typeahead `textValue`\n    const [textContent, setTextContent] = React.useState('');\n    React.useEffect(() => {\n      const menuItem = ref.current;\n      if (menuItem) {\n        setTextContent((menuItem.textContent ?? '').trim());\n      }\n    }, [itemProps.children]);\n\n    return (\n      <Collection.ItemSlot\n        scope={__scopeMenu}\n        disabled={disabled}\n        textValue={textValue ?? textContent}\n      >\n        <RovingFocusGroup.Item asChild {...rovingFocusGroupScope} focusable={!disabled}>\n          <Primitive.div\n            role=\"menuitem\"\n            data-highlighted={isFocused ? '' : undefined}\n            aria-disabled={disabled || undefined}\n            data-disabled={disabled ? '' : undefined}\n            {...itemProps}\n            ref={composedRefs}\n            /**\n             * We focus items on `pointerMove` to achieve the following:\n             *\n             * - Mouse over an item (it focuses)\n             * - Leave mouse where it is and use keyboard to focus a different item\n             * - Wiggle mouse without it leaving previously focused item\n             * - Previously focused item should re-focus\n             *\n             * If we used `mouseOver`/`mouseEnter` it would not re-focus when the mouse\n             * wiggles. This is to match native menu implementation.\n             */\n            onPointerMove={composeEventHandlers(\n              props.onPointerMove,\n              whenMouse((event) => {\n                if (disabled) {\n                  contentContext.onItemLeave(event);\n                } else {\n                  contentContext.onItemEnter(event);\n                  if (!event.defaultPrevented) {\n                    const item = event.currentTarget;\n                    item.focus({ preventScroll: true });\n                  }\n                }\n              })\n            )}\n            onPointerLeave={composeEventHandlers(\n              props.onPointerLeave,\n              whenMouse((event) => contentContext.onItemLeave(event))\n            )}\n            onFocus={composeEventHandlers(props.onFocus, () => setIsFocused(true))}\n            onBlur={composeEventHandlers(props.onBlur, () => setIsFocused(false))}\n          />\n        </RovingFocusGroup.Item>\n      </Collection.ItemSlot>\n    );\n  }\n);\n\n/* -------------------------------------------------------------------------------------------------\n * MenuCheckboxItem\n * -----------------------------------------------------------------------------------------------*/\n\nconst CHECKBOX_ITEM_NAME = 'MenuCheckboxItem';\n\ntype MenuCheckboxItemElement = MenuItemElement;\n\ntype CheckedState = boolean | 'indeterminate';\n\ninterface MenuCheckboxItemProps extends MenuItemProps {\n  checked?: CheckedState;\n  // `onCheckedChange` can never be called with `\"indeterminate\"` from the inside\n  onCheckedChange?: (checked: boolean) => void;\n}\n\nconst MenuCheckboxItem = React.forwardRef<MenuCheckboxItemElement, MenuCheckboxItemProps>(\n  (props: ScopedProps<MenuCheckboxItemProps>, forwardedRef) => {\n    const { checked = false, onCheckedChange, ...checkboxItemProps } = props;\n    return (\n      <ItemIndicatorProvider scope={props.__scopeMenu} checked={checked}>\n        <MenuItem\n          role=\"menuitemcheckbox\"\n          aria-checked={isIndeterminate(checked) ? 'mixed' : checked}\n          {...checkboxItemProps}\n          ref={forwardedRef}\n          data-state={getCheckedState(checked)}\n          onSelect={composeEventHandlers(\n            checkboxItemProps.onSelect,\n            () => onCheckedChange?.(isIndeterminate(checked) ? true : !checked),\n            { checkForDefaultPrevented: false }\n          )}\n        />\n      </ItemIndicatorProvider>\n    );\n  }\n);\n\nMenuCheckboxItem.displayName = CHECKBOX_ITEM_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * MenuRadioGroup\n * -----------------------------------------------------------------------------------------------*/\n\nconst RADIO_GROUP_NAME = 'MenuRadioGroup';\n\nconst [RadioGroupProvider, useRadioGroupContext] = createMenuContext<MenuRadioGroupProps>(\n  RADIO_GROUP_NAME,\n  { value: undefined, onValueChange: () => {} }\n);\n\ntype MenuRadioGroupElement = React.ComponentRef<typeof MenuGroup>;\ninterface MenuRadioGroupProps extends MenuGroupProps {\n  value?: string;\n  onValueChange?: (value: string) => void;\n}\n\nconst MenuRadioGroup = React.forwardRef<MenuRadioGroupElement, MenuRadioGroupProps>(\n  (props: ScopedProps<MenuRadioGroupProps>, forwardedRef) => {\n    const { value, onValueChange, ...groupProps } = props;\n    const handleValueChange = useCallbackRef(onValueChange);\n    return (\n      <RadioGroupProvider scope={props.__scopeMenu} value={value} onValueChange={handleValueChange}>\n        <MenuGroup {...groupProps} ref={forwardedRef} />\n      </RadioGroupProvider>\n    );\n  }\n);\n\nMenuRadioGroup.displayName = RADIO_GROUP_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * MenuRadioItem\n * -----------------------------------------------------------------------------------------------*/\n\nconst RADIO_ITEM_NAME = 'MenuRadioItem';\n\ntype MenuRadioItemElement = React.ComponentRef<typeof MenuItem>;\ninterface MenuRadioItemProps extends MenuItemProps {\n  value: string;\n}\n\nconst MenuRadioItem = React.forwardRef<MenuRadioItemElement, MenuRadioItemProps>(\n  (props: ScopedProps<MenuRadioItemProps>, forwardedRef) => {\n    const { value, ...radioItemProps } = props;\n    const context = useRadioGroupContext(RADIO_ITEM_NAME, props.__scopeMenu);\n    const checked = value === context.value;\n    return (\n      <ItemIndicatorProvider scope={props.__scopeMenu} checked={checked}>\n        <MenuItem\n          role=\"menuitemradio\"\n          aria-checked={checked}\n          {...radioItemProps}\n          ref={forwardedRef}\n          data-state={getCheckedState(checked)}\n          onSelect={composeEventHandlers(\n            radioItemProps.onSelect,\n            () => context.onValueChange?.(value),\n            { checkForDefaultPrevented: false }\n          )}\n        />\n      </ItemIndicatorProvider>\n    );\n  }\n);\n\nMenuRadioItem.displayName = RADIO_ITEM_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * MenuItemIndicator\n * -----------------------------------------------------------------------------------------------*/\n\nconst ITEM_INDICATOR_NAME = 'MenuItemIndicator';\n\ntype CheckboxContextValue = { checked: CheckedState };\n\nconst [ItemIndicatorProvider, useItemIndicatorContext] = createMenuContext<CheckboxContextValue>(\n  ITEM_INDICATOR_NAME,\n  { checked: false }\n);\n\ntype MenuItemIndicatorElement = React.ComponentRef<typeof Primitive.span>;\ntype PrimitiveSpanProps = React.ComponentPropsWithoutRef<typeof Primitive.span>;\ninterface MenuItemIndicatorProps extends PrimitiveSpanProps {\n  /**\n   * Used to force mounting when more control is needed. Useful when\n   * controlling animation with React animation libraries.\n   */\n  forceMount?: true;\n}\n\nconst MenuItemIndicator = React.forwardRef<MenuItemIndicatorElement, MenuItemIndicatorProps>(\n  (props: ScopedProps<MenuItemIndicatorProps>, forwardedRef) => {\n    const { __scopeMenu, forceMount, ...itemIndicatorProps } = props;\n    const indicatorContext = useItemIndicatorContext(ITEM_INDICATOR_NAME, __scopeMenu);\n    return (\n      <Presence\n        present={\n          forceMount ||\n          isIndeterminate(indicatorContext.checked) ||\n          indicatorContext.checked === true\n        }\n      >\n        <Primitive.span\n          {...itemIndicatorProps}\n          ref={forwardedRef}\n          data-state={getCheckedState(indicatorContext.checked)}\n        />\n      </Presence>\n    );\n  }\n);\n\nMenuItemIndicator.displayName = ITEM_INDICATOR_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * MenuSeparator\n * -----------------------------------------------------------------------------------------------*/\n\nconst SEPARATOR_NAME = 'MenuSeparator';\n\ntype MenuSeparatorElement = React.ComponentRef<typeof Primitive.div>;\ninterface MenuSeparatorProps extends PrimitiveDivProps {}\n\nconst MenuSeparator = React.forwardRef<MenuSeparatorElement, MenuSeparatorProps>(\n  (props: ScopedProps<MenuSeparatorProps>, forwardedRef) => {\n    const { __scopeMenu, ...separatorProps } = props;\n    return (\n      <Primitive.div\n        role=\"separator\"\n        aria-orientation=\"horizontal\"\n        {...separatorProps}\n        ref={forwardedRef}\n      />\n    );\n  }\n);\n\nMenuSeparator.displayName = SEPARATOR_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * MenuArrow\n * -----------------------------------------------------------------------------------------------*/\n\nconst ARROW_NAME = 'MenuArrow';\n\ntype MenuArrowElement = React.ComponentRef<typeof PopperPrimitive.Arrow>;\ntype PopperArrowProps = React.ComponentPropsWithoutRef<typeof PopperPrimitive.Arrow>;\ninterface MenuArrowProps extends PopperArrowProps {}\n\nconst MenuArrow = React.forwardRef<MenuArrowElement, MenuArrowProps>(\n  (props: ScopedProps<MenuArrowProps>, forwardedRef) => {\n    const { __scopeMenu, ...arrowProps } = props;\n    const popperScope = usePopperScope(__scopeMenu);\n    return <PopperPrimitive.Arrow {...popperScope} {...arrowProps} ref={forwardedRef} />;\n  }\n);\n\nMenuArrow.displayName = ARROW_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * MenuSub\n * -----------------------------------------------------------------------------------------------*/\n\nconst SUB_NAME = 'MenuSub';\n\ntype MenuSubContextValue = {\n  contentId: string;\n  triggerId: string;\n  trigger: MenuSubTriggerElement | null;\n  onTriggerChange(trigger: MenuSubTriggerElement | null): void;\n};\n\nconst [MenuSubProvider, useMenuSubContext] = createMenuContext<MenuSubContextValue>(SUB_NAME);\n\ninterface MenuSubProps {\n  children?: React.ReactNode;\n  open?: boolean;\n  onOpenChange?(open: boolean): void;\n}\n\nconst MenuSub: React.FC<MenuSubProps> = (props: ScopedProps<MenuSubProps>) => {\n  const { __scopeMenu, children, open = false, onOpenChange } = props;\n  const parentMenuContext = useMenuContext(SUB_NAME, __scopeMenu);\n  const popperScope = usePopperScope(__scopeMenu);\n  const [trigger, setTrigger] = React.useState<MenuSubTriggerElement | null>(null);\n  const [content, setContent] = React.useState<MenuContentElement | null>(null);\n  const handleOpenChange = useCallbackRef(onOpenChange);\n\n  // Prevent the parent menu from reopening with open submenus.\n  React.useEffect(() => {\n    if (parentMenuContext.open === false) handleOpenChange(false);\n    return () => handleOpenChange(false);\n  }, [parentMenuContext.open, handleOpenChange]);\n\n  return (\n    <PopperPrimitive.Root {...popperScope}>\n      <MenuProvider\n        scope={__scopeMenu}\n        open={open}\n        onOpenChange={handleOpenChange}\n        content={content}\n        onContentChange={setContent}\n      >\n        <MenuSubProvider\n          scope={__scopeMenu}\n          contentId={useId()}\n          triggerId={useId()}\n          trigger={trigger}\n          onTriggerChange={setTrigger}\n        >\n          {children}\n        </MenuSubProvider>\n      </MenuProvider>\n    </PopperPrimitive.Root>\n  );\n};\n\nMenuSub.displayName = SUB_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * MenuSubTrigger\n * -----------------------------------------------------------------------------------------------*/\n\nconst SUB_TRIGGER_NAME = 'MenuSubTrigger';\n\ntype MenuSubTriggerElement = MenuItemImplElement;\ninterface MenuSubTriggerProps extends MenuItemImplProps {}\n\nconst MenuSubTrigger = React.forwardRef<MenuSubTriggerElement, MenuSubTriggerProps>(\n  (props: ScopedProps<MenuSubTriggerProps>, forwardedRef) => {\n    const context = useMenuContext(SUB_TRIGGER_NAME, props.__scopeMenu);\n    const rootContext = useMenuRootContext(SUB_TRIGGER_NAME, props.__scopeMenu);\n    const subContext = useMenuSubContext(SUB_TRIGGER_NAME, props.__scopeMenu);\n    const contentContext = useMenuContentContext(SUB_TRIGGER_NAME, props.__scopeMenu);\n    const openTimerRef = React.useRef<number | null>(null);\n    const { pointerGraceTimerRef, onPointerGraceIntentChange } = contentContext;\n    const scope = { __scopeMenu: props.__scopeMenu };\n\n    const clearOpenTimer = React.useCallback(() => {\n      if (openTimerRef.current) window.clearTimeout(openTimerRef.current);\n      openTimerRef.current = null;\n    }, []);\n\n    React.useEffect(() => clearOpenTimer, [clearOpenTimer]);\n\n    React.useEffect(() => {\n      const pointerGraceTimer = pointerGraceTimerRef.current;\n      return () => {\n        window.clearTimeout(pointerGraceTimer);\n        onPointerGraceIntentChange(null);\n      };\n    }, [pointerGraceTimerRef, onPointerGraceIntentChange]);\n\n    return (\n      <MenuAnchor asChild {...scope}>\n        <MenuItemImpl\n          id={subContext.triggerId}\n          aria-haspopup=\"menu\"\n          aria-expanded={context.open}\n          aria-controls={subContext.contentId}\n          data-state={getOpenState(context.open)}\n          {...props}\n          ref={composeRefs(forwardedRef, subContext.onTriggerChange)}\n          // This is redundant for mouse users but we cannot determine pointer type from\n          // click event and we cannot use pointerup event (see git history for reasons why)\n          onClick={(event) => {\n            props.onClick?.(event);\n            if (props.disabled || event.defaultPrevented) return;\n            /**\n             * We manually focus because iOS Safari doesn't always focus on click (e.g. buttons)\n             * and we rely heavily on `onFocusOutside` for submenus to close when switching\n             * between separate submenus.\n             */\n            event.currentTarget.focus();\n            if (!context.open) context.onOpenChange(true);\n          }}\n          onPointerMove={composeEventHandlers(\n            props.onPointerMove,\n            whenMouse((event) => {\n              contentContext.onItemEnter(event);\n              if (event.defaultPrevented) return;\n              if (!props.disabled && !context.open && !openTimerRef.current) {\n                contentContext.onPointerGraceIntentChange(null);\n                openTimerRef.current = window.setTimeout(() => {\n                  context.onOpenChange(true);\n                  clearOpenTimer();\n                }, 100);\n              }\n            })\n          )}\n          onPointerLeave={composeEventHandlers(\n            props.onPointerLeave,\n            whenMouse((event) => {\n              clearOpenTimer();\n\n              const contentRect = context.content?.getBoundingClientRect();\n              if (contentRect) {\n                // TODO: make sure to update this when we change positioning logic\n                const side = context.content?.dataset.side as Side;\n                const rightSide = side === 'right';\n                const bleed = rightSide ? -5 : +5;\n                const contentNearEdge = contentRect[rightSide ? 'left' : 'right'];\n                const contentFarEdge = contentRect[rightSide ? 'right' : 'left'];\n\n                contentContext.onPointerGraceIntentChange({\n                  area: [\n                    // Apply a bleed on clientX to ensure that our exit point is\n                    // consistently within polygon bounds\n                    { x: event.clientX + bleed, y: event.clientY },\n                    { x: contentNearEdge, y: contentRect.top },\n                    { x: contentFarEdge, y: contentRect.top },\n                    { x: contentFarEdge, y: contentRect.bottom },\n                    { x: contentNearEdge, y: contentRect.bottom },\n                  ],\n                  side,\n                });\n\n                window.clearTimeout(pointerGraceTimerRef.current);\n                pointerGraceTimerRef.current = window.setTimeout(\n                  () => contentContext.onPointerGraceIntentChange(null),\n                  300\n                );\n              } else {\n                contentContext.onTriggerLeave(event);\n                if (event.defaultPrevented) return;\n\n                // There's 100ms where the user may leave an item before the submenu was opened.\n                contentContext.onPointerGraceIntentChange(null);\n              }\n            })\n          )}\n          onKeyDown={composeEventHandlers(props.onKeyDown, (event) => {\n            const isTypingAhead = contentContext.searchRef.current !== '';\n            if (props.disabled || (isTypingAhead && event.key === ' ')) return;\n            if (SUB_OPEN_KEYS[rootContext.dir].includes(event.key)) {\n              context.onOpenChange(true);\n              // The trigger may hold focus if opened via pointer interaction\n              // so we ensure content is given focus again when switching to keyboard.\n              context.content?.focus();\n              // prevent window from scrolling\n              event.preventDefault();\n            }\n          })}\n        />\n      </MenuAnchor>\n    );\n  }\n);\n\nMenuSubTrigger.displayName = SUB_TRIGGER_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * MenuSubContent\n * -----------------------------------------------------------------------------------------------*/\n\nconst SUB_CONTENT_NAME = 'MenuSubContent';\n\ntype MenuSubContentElement = MenuContentImplElement;\ninterface MenuSubContentProps\n  extends Omit<\n    MenuContentImplProps,\n    keyof MenuContentImplPrivateProps | 'onCloseAutoFocus' | 'onEntryFocus' | 'side' | 'align'\n  > {\n  /**\n   * Used to force mounting when more control is needed. Useful when\n   * controlling animation with React animation libraries.\n   */\n  forceMount?: true;\n}\n\nconst MenuSubContent = React.forwardRef<MenuSubContentElement, MenuSubContentProps>(\n  (props: ScopedProps<MenuSubContentProps>, forwardedRef) => {\n    const portalContext = usePortalContext(CONTENT_NAME, props.__scopeMenu);\n    const { forceMount = portalContext.forceMount, ...subContentProps } = props;\n    const context = useMenuContext(CONTENT_NAME, props.__scopeMenu);\n    const rootContext = useMenuRootContext(CONTENT_NAME, props.__scopeMenu);\n    const subContext = useMenuSubContext(SUB_CONTENT_NAME, props.__scopeMenu);\n    const ref = React.useRef<MenuSubContentElement>(null);\n    const composedRefs = useComposedRefs(forwardedRef, ref);\n    return (\n      <Collection.Provider scope={props.__scopeMenu}>\n        <Presence present={forceMount || context.open}>\n          <Collection.Slot scope={props.__scopeMenu}>\n            <MenuContentImpl\n              id={subContext.contentId}\n              aria-labelledby={subContext.triggerId}\n              {...subContentProps}\n              ref={composedRefs}\n              align=\"start\"\n              side={rootContext.dir === 'rtl' ? 'left' : 'right'}\n              disableOutsidePointerEvents={false}\n              disableOutsideScroll={false}\n              trapFocus={false}\n              onOpenAutoFocus={(event) => {\n                // when opening a submenu, focus content for keyboard users only\n                if (rootContext.isUsingKeyboardRef.current) ref.current?.focus();\n                event.preventDefault();\n              }}\n              // The menu might close because of focusing another menu item in the parent menu. We\n              // don't want it to refocus the trigger in that case so we handle trigger focus ourselves.\n              onCloseAutoFocus={(event) => event.preventDefault()}\n              onFocusOutside={composeEventHandlers(props.onFocusOutside, (event) => {\n                // We prevent closing when the trigger is focused to avoid triggering a re-open animation\n                // on pointer interaction.\n                if (event.target !== subContext.trigger) context.onOpenChange(false);\n              })}\n              onEscapeKeyDown={composeEventHandlers(props.onEscapeKeyDown, (event) => {\n                rootContext.onClose();\n                // ensure pressing escape in submenu doesn't escape full screen mode\n                event.preventDefault();\n              })}\n              onKeyDown={composeEventHandlers(props.onKeyDown, (event) => {\n                // Submenu key events bubble through portals. We only care about keys in this menu.\n                const isKeyDownInside = event.currentTarget.contains(event.target as HTMLElement);\n                const isCloseKey = SUB_CLOSE_KEYS[rootContext.dir].includes(event.key);\n                if (isKeyDownInside && isCloseKey) {\n                  context.onOpenChange(false);\n                  // We focus manually because we prevented it in `onCloseAutoFocus`\n                  subContext.trigger?.focus();\n                  // prevent window from scrolling\n                  event.preventDefault();\n                }\n              })}\n            />\n          </Collection.Slot>\n        </Presence>\n      </Collection.Provider>\n    );\n  }\n);\n\nMenuSubContent.displayName = SUB_CONTENT_NAME;\n\n/* -----------------------------------------------------------------------------------------------*/\n\nfunction getOpenState(open: boolean) {\n  return open ? 'open' : 'closed';\n}\n\nfunction isIndeterminate(checked?: CheckedState): checked is 'indeterminate' {\n  return checked === 'indeterminate';\n}\n\nfunction getCheckedState(checked: CheckedState) {\n  return isIndeterminate(checked) ? 'indeterminate' : checked ? 'checked' : 'unchecked';\n}\n\nfunction focusFirst(candidates: HTMLElement[]) {\n  const PREVIOUSLY_FOCUSED_ELEMENT = document.activeElement;\n  for (const candidate of candidates) {\n    // if focus is already where we want to go, we don't want to keep going through the candidates\n    if (candidate === PREVIOUSLY_FOCUSED_ELEMENT) return;\n    candidate.focus();\n    if (document.activeElement !== PREVIOUSLY_FOCUSED_ELEMENT) return;\n  }\n}\n\n/**\n * Wraps an array around itself at a given start index\n * Example: `wrapArray(['a', 'b', 'c', 'd'], 2) === ['c', 'd', 'a', 'b']`\n */\nfunction wrapArray<T>(array: T[], startIndex: number) {\n  return array.map<T>((_, index) => array[(startIndex + index) % array.length]!);\n}\n\n/**\n * This is the \"meat\" of the typeahead matching logic. It takes in all the values,\n * the search and the current match, and returns the next match (or `undefined`).\n *\n * We normalize the search because if a user has repeatedly pressed a character,\n * we want the exact same behavior as if we only had that one character\n * (ie. cycle through options starting with that character)\n *\n * We also reorder the values by wrapping the array around the current match.\n * This is so we always look forward from the current match, and picking the first\n * match will always be the correct one.\n *\n * Finally, if the normalized search is exactly one character, we exclude the\n * current match from the values because otherwise it would be the first to match always\n * and focus would never move. This is as opposed to the regular case, where we\n * don't want focus to move if the current match still matches.\n */\nfunction getNextMatch(values: string[], search: string, currentMatch?: string) {\n  const isRepeated = search.length > 1 && Array.from(search).every((char) => char === search[0]);\n  const normalizedSearch = isRepeated ? search[0]! : search;\n  const currentMatchIndex = currentMatch ? values.indexOf(currentMatch) : -1;\n  let wrappedValues = wrapArray(values, Math.max(currentMatchIndex, 0));\n  const excludeCurrentMatch = normalizedSearch.length === 1;\n  if (excludeCurrentMatch) wrappedValues = wrappedValues.filter((v) => v !== currentMatch);\n  const nextMatch = wrappedValues.find((value) =>\n    value.toLowerCase().startsWith(normalizedSearch.toLowerCase())\n  );\n  return nextMatch !== currentMatch ? nextMatch : undefined;\n}\n\ntype Point = { x: number; y: number };\ntype Polygon = Point[];\ntype Side = 'left' | 'right';\ntype GraceIntent = { area: Polygon; side: Side };\n\n// Determine if a point is inside of a polygon.\n// Based on https://github.com/substack/point-in-polygon\nfunction isPointInPolygon(point: Point, polygon: Polygon) {\n  const { x, y } = point;\n  let inside = false;\n  for (let i = 0, j = polygon.length - 1; i < polygon.length; j = i++) {\n    const ii = polygon[i]!;\n    const jj = polygon[j]!;\n    const xi = ii.x;\n    const yi = ii.y;\n    const xj = jj.x;\n    const yj = jj.y;\n\n    // prettier-ignore\n    const intersect = ((yi > y) !== (yj > y)) && (x < (xj - xi) * (y - yi) / (yj - yi) + xi);\n    if (intersect) inside = !inside;\n  }\n\n  return inside;\n}\n\nfunction isPointerInGraceArea(event: React.PointerEvent, area?: Polygon) {\n  if (!area) return false;\n  const cursorPos = { x: event.clientX, y: event.clientY };\n  return isPointInPolygon(cursorPos, area);\n}\n\nfunction whenMouse<E>(handler: React.PointerEventHandler<E>): React.PointerEventHandler<E> {\n  return (event) => (event.pointerType === 'mouse' ? handler(event) : undefined);\n}\n\nconst Root = Menu;\nconst Anchor = MenuAnchor;\nconst Portal = MenuPortal;\nconst Content = MenuContent;\nconst Group = MenuGroup;\nconst Label = MenuLabel;\nconst Item = MenuItem;\nconst CheckboxItem = MenuCheckboxItem;\nconst RadioGroup = MenuRadioGroup;\nconst RadioItem = MenuRadioItem;\nconst ItemIndicator = MenuItemIndicator;\nconst Separator = MenuSeparator;\nconst Arrow = MenuArrow;\nconst Sub = MenuSub;\nconst SubTrigger = MenuSubTrigger;\nconst SubContent = MenuSubContent;\n\nexport {\n  createMenuScope,\n  //\n  Menu,\n  MenuAnchor,\n  MenuPortal,\n  MenuContent,\n  MenuGroup,\n  MenuLabel,\n  MenuItem,\n  MenuCheckboxItem,\n  MenuRadioGroup,\n  MenuRadioItem,\n  MenuItemIndicator,\n  MenuSeparator,\n  MenuArrow,\n  MenuSub,\n  MenuSubTrigger,\n  MenuSubContent,\n  //\n  Root,\n  Anchor,\n  Portal,\n  Content,\n  Group,\n  Label,\n  Item,\n  CheckboxItem,\n  RadioGroup,\n  RadioItem,\n  ItemIndicator,\n  Separator,\n  Arrow,\n  Sub,\n  SubTrigger,\n  SubContent,\n};\nexport type {\n  MenuProps,\n  MenuAnchorProps,\n  MenuPortalProps,\n  MenuContentProps,\n  MenuGroupProps,\n  MenuLabelProps,\n  MenuItemProps,\n  MenuCheckboxItemProps,\n  MenuRadioGroupProps,\n  MenuRadioItemProps,\n  MenuItemIndicatorProps,\n  MenuSeparatorProps,\n  MenuArrowProps,\n  MenuSubProps,\n  MenuSubTriggerProps,\n  MenuSubContentProps,\n};\n","import * as React from 'react';\nimport { composeEventHandlers } from '@radix-ui/primitive';\nimport { composeRefs } from '@radix-ui/react-compose-refs';\nimport { createContextScope } from '@radix-ui/react-context';\nimport { useControllableState } from '@radix-ui/react-use-controllable-state';\nimport { Primitive } from '@radix-ui/react-primitive';\nimport * as MenuPrimitive from '@radix-ui/react-menu';\nimport { createMenuScope } from '@radix-ui/react-menu';\nimport { useId } from '@radix-ui/react-id';\n\nimport type { Scope } from '@radix-ui/react-context';\n\ntype Direction = 'ltr' | 'rtl';\n\n/* -------------------------------------------------------------------------------------------------\n * DropdownMenu\n * -----------------------------------------------------------------------------------------------*/\n\nconst DROPDOWN_MENU_NAME = 'DropdownMenu';\n\ntype ScopedProps<P> = P & { __scopeDropdownMenu?: Scope };\nconst [createDropdownMenuContext, createDropdownMenuScope] = createContextScope(\n  DROPDOWN_MENU_NAME,\n  [createMenuScope]\n);\nconst useMenuScope = createMenuScope();\n\ntype DropdownMenuContextValue = {\n  triggerId: string;\n  triggerRef: React.RefObject<HTMLButtonElement | null>;\n  contentId: string;\n  open: boolean;\n  onOpenChange(open: boolean): void;\n  onOpenToggle(): void;\n  modal: boolean;\n};\n\nconst [DropdownMenuProvider, useDropdownMenuContext] =\n  createDropdownMenuContext<DropdownMenuContextValue>(DROPDOWN_MENU_NAME);\n\ninterface DropdownMenuProps {\n  children?: React.ReactNode;\n  dir?: Direction;\n  open?: boolean;\n  defaultOpen?: boolean;\n  onOpenChange?(open: boolean): void;\n  modal?: boolean;\n}\n\nconst DropdownMenu: React.FC<DropdownMenuProps> = (props: ScopedProps<DropdownMenuProps>) => {\n  const {\n    __scopeDropdownMenu,\n    children,\n    dir,\n    open: openProp,\n    defaultOpen,\n    onOpenChange,\n    modal = true,\n  } = props;\n  const menuScope = useMenuScope(__scopeDropdownMenu);\n  const triggerRef = React.useRef<HTMLButtonElement>(null);\n  const [open, setOpen] = useControllableState({\n    prop: openProp,\n    defaultProp: defaultOpen ?? false,\n    onChange: onOpenChange,\n    caller: DROPDOWN_MENU_NAME,\n  });\n\n  return (\n    <DropdownMenuProvider\n      scope={__scopeDropdownMenu}\n      triggerId={useId()}\n      triggerRef={triggerRef}\n      contentId={useId()}\n      open={open}\n      onOpenChange={setOpen}\n      onOpenToggle={React.useCallback(() => setOpen((prevOpen) => !prevOpen), [setOpen])}\n      modal={modal}\n    >\n      <MenuPrimitive.Root {...menuScope} open={open} onOpenChange={setOpen} dir={dir} modal={modal}>\n        {children}\n      </MenuPrimitive.Root>\n    </DropdownMenuProvider>\n  );\n};\n\nDropdownMenu.displayName = DROPDOWN_MENU_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * DropdownMenuTrigger\n * -----------------------------------------------------------------------------------------------*/\n\nconst TRIGGER_NAME = 'DropdownMenuTrigger';\n\ntype DropdownMenuTriggerElement = React.ComponentRef<typeof Primitive.button>;\ntype PrimitiveButtonProps = React.ComponentPropsWithoutRef<typeof Primitive.button>;\ninterface DropdownMenuTriggerProps extends PrimitiveButtonProps {}\n\nconst DropdownMenuTrigger = React.forwardRef<DropdownMenuTriggerElement, DropdownMenuTriggerProps>(\n  (props: ScopedProps<DropdownMenuTriggerProps>, forwardedRef) => {\n    const { __scopeDropdownMenu, disabled = false, ...triggerProps } = props;\n    const context = useDropdownMenuContext(TRIGGER_NAME, __scopeDropdownMenu);\n    const menuScope = useMenuScope(__scopeDropdownMenu);\n    return (\n      <MenuPrimitive.Anchor asChild {...menuScope}>\n        <Primitive.button\n          type=\"button\"\n          id={context.triggerId}\n          aria-haspopup=\"menu\"\n          aria-expanded={context.open}\n          aria-controls={context.open ? context.contentId : undefined}\n          data-state={context.open ? 'open' : 'closed'}\n          data-disabled={disabled ? '' : undefined}\n          disabled={disabled}\n          {...triggerProps}\n          ref={composeRefs(forwardedRef, context.triggerRef)}\n          onPointerDown={composeEventHandlers(props.onPointerDown, (event) => {\n            // only call handler if it's the left button (mousedown gets triggered by all mouse buttons)\n            // but not when the control key is pressed (avoiding MacOS right click)\n            if (!disabled && event.button === 0 && event.ctrlKey === false) {\n              context.onOpenToggle();\n              // prevent trigger focusing when opening\n              // this allows the content to be given focus without competition\n              if (!context.open) event.preventDefault();\n            }\n          })}\n          onKeyDown={composeEventHandlers(props.onKeyDown, (event) => {\n            if (disabled) return;\n            if (['Enter', ' '].includes(event.key)) context.onOpenToggle();\n            if (event.key === 'ArrowDown') context.onOpenChange(true);\n            // prevent keydown from scrolling window / first focused item to execute\n            // that keydown (inadvertently closing the menu)\n            if (['Enter', ' ', 'ArrowDown'].includes(event.key)) event.preventDefault();\n          })}\n        />\n      </MenuPrimitive.Anchor>\n    );\n  }\n);\n\nDropdownMenuTrigger.displayName = TRIGGER_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * DropdownMenuPortal\n * -----------------------------------------------------------------------------------------------*/\n\nconst PORTAL_NAME = 'DropdownMenuPortal';\n\ntype MenuPortalProps = React.ComponentPropsWithoutRef<typeof MenuPrimitive.Portal>;\ninterface DropdownMenuPortalProps extends MenuPortalProps {}\n\nconst DropdownMenuPortal: React.FC<DropdownMenuPortalProps> = (\n  props: ScopedProps<DropdownMenuPortalProps>\n) => {\n  const { __scopeDropdownMenu, ...portalProps } = props;\n  const menuScope = useMenuScope(__scopeDropdownMenu);\n  return <MenuPrimitive.Portal {...menuScope} {...portalProps} />;\n};\n\nDropdownMenuPortal.displayName = PORTAL_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * DropdownMenuContent\n * -----------------------------------------------------------------------------------------------*/\n\nconst CONTENT_NAME = 'DropdownMenuContent';\n\ntype DropdownMenuContentElement = React.ComponentRef<typeof MenuPrimitive.Content>;\ntype MenuContentProps = React.ComponentPropsWithoutRef<typeof MenuPrimitive.Content>;\ninterface DropdownMenuContentProps extends Omit<MenuContentProps, 'onEntryFocus'> {}\n\nconst DropdownMenuContent = React.forwardRef<DropdownMenuContentElement, DropdownMenuContentProps>(\n  (props: ScopedProps<DropdownMenuContentProps>, forwardedRef) => {\n    const { __scopeDropdownMenu, ...contentProps } = props;\n    const context = useDropdownMenuContext(CONTENT_NAME, __scopeDropdownMenu);\n    const menuScope = useMenuScope(__scopeDropdownMenu);\n    const hasInteractedOutsideRef = React.useRef(false);\n\n    return (\n      <MenuPrimitive.Content\n        id={context.contentId}\n        aria-labelledby={context.triggerId}\n        {...menuScope}\n        {...contentProps}\n        ref={forwardedRef}\n        onCloseAutoFocus={composeEventHandlers(props.onCloseAutoFocus, (event) => {\n          if (!hasInteractedOutsideRef.current) context.triggerRef.current?.focus();\n          hasInteractedOutsideRef.current = false;\n          // Always prevent auto focus because we either focus manually or want user agent focus\n          event.preventDefault();\n        })}\n        onInteractOutside={composeEventHandlers(props.onInteractOutside, (event) => {\n          const originalEvent = event.detail.originalEvent as PointerEvent;\n          const ctrlLeftClick = originalEvent.button === 0 && originalEvent.ctrlKey === true;\n          const isRightClick = originalEvent.button === 2 || ctrlLeftClick;\n          if (!context.modal || isRightClick) hasInteractedOutsideRef.current = true;\n        })}\n        style={{\n          ...props.style,\n          // re-namespace exposed content custom properties\n          ...{\n            '--radix-dropdown-menu-content-transform-origin':\n              'var(--radix-popper-transform-origin)',\n            '--radix-dropdown-menu-content-available-width': 'var(--radix-popper-available-width)',\n            '--radix-dropdown-menu-content-available-height':\n              'var(--radix-popper-available-height)',\n            '--radix-dropdown-menu-trigger-width': 'var(--radix-popper-anchor-width)',\n            '--radix-dropdown-menu-trigger-height': 'var(--radix-popper-anchor-height)',\n          },\n        }}\n      />\n    );\n  }\n);\n\nDropdownMenuContent.displayName = CONTENT_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * DropdownMenuGroup\n * -----------------------------------------------------------------------------------------------*/\n\nconst GROUP_NAME = 'DropdownMenuGroup';\n\ntype DropdownMenuGroupElement = React.ComponentRef<typeof MenuPrimitive.Group>;\ntype MenuGroupProps = React.ComponentPropsWithoutRef<typeof MenuPrimitive.Group>;\ninterface DropdownMenuGroupProps extends MenuGroupProps {}\n\nconst DropdownMenuGroup = React.forwardRef<DropdownMenuGroupElement, DropdownMenuGroupProps>(\n  (props: ScopedProps<DropdownMenuGroupProps>, forwardedRef) => {\n    const { __scopeDropdownMenu, ...groupProps } = props;\n    const menuScope = useMenuScope(__scopeDropdownMenu);\n    return <MenuPrimitive.Group {...menuScope} {...groupProps} ref={forwardedRef} />;\n  }\n);\n\nDropdownMenuGroup.displayName = GROUP_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * DropdownMenuLabel\n * -----------------------------------------------------------------------------------------------*/\n\nconst LABEL_NAME = 'DropdownMenuLabel';\n\ntype DropdownMenuLabelElement = React.ComponentRef<typeof MenuPrimitive.Label>;\ntype MenuLabelProps = React.ComponentPropsWithoutRef<typeof MenuPrimitive.Label>;\ninterface DropdownMenuLabelProps extends MenuLabelProps {}\n\nconst DropdownMenuLabel = React.forwardRef<DropdownMenuLabelElement, DropdownMenuLabelProps>(\n  (props: ScopedProps<DropdownMenuLabelProps>, forwardedRef) => {\n    const { __scopeDropdownMenu, ...labelProps } = props;\n    const menuScope = useMenuScope(__scopeDropdownMenu);\n    return <MenuPrimitive.Label {...menuScope} {...labelProps} ref={forwardedRef} />;\n  }\n);\n\nDropdownMenuLabel.displayName = LABEL_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * DropdownMenuItem\n * -----------------------------------------------------------------------------------------------*/\n\nconst ITEM_NAME = 'DropdownMenuItem';\n\ntype DropdownMenuItemElement = React.ComponentRef<typeof MenuPrimitive.Item>;\ntype MenuItemProps = React.ComponentPropsWithoutRef<typeof MenuPrimitive.Item>;\ninterface DropdownMenuItemProps extends MenuItemProps {}\n\nconst DropdownMenuItem = React.forwardRef<DropdownMenuItemElement, DropdownMenuItemProps>(\n  (props: ScopedProps<DropdownMenuItemProps>, forwardedRef) => {\n    const { __scopeDropdownMenu, ...itemProps } = props;\n    const menuScope = useMenuScope(__scopeDropdownMenu);\n    return <MenuPrimitive.Item {...menuScope} {...itemProps} ref={forwardedRef} />;\n  }\n);\n\nDropdownMenuItem.displayName = ITEM_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * DropdownMenuCheckboxItem\n * -----------------------------------------------------------------------------------------------*/\n\nconst CHECKBOX_ITEM_NAME = 'DropdownMenuCheckboxItem';\n\ntype DropdownMenuCheckboxItemElement = React.ComponentRef<typeof MenuPrimitive.CheckboxItem>;\ntype MenuCheckboxItemProps = React.ComponentPropsWithoutRef<typeof MenuPrimitive.CheckboxItem>;\ninterface DropdownMenuCheckboxItemProps extends MenuCheckboxItemProps {}\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  DropdownMenuCheckboxItemElement,\n  DropdownMenuCheckboxItemProps\n>((props: ScopedProps<DropdownMenuCheckboxItemProps>, forwardedRef) => {\n  const { __scopeDropdownMenu, ...checkboxItemProps } = props;\n  const menuScope = useMenuScope(__scopeDropdownMenu);\n  return <MenuPrimitive.CheckboxItem {...menuScope} {...checkboxItemProps} ref={forwardedRef} />;\n});\n\nDropdownMenuCheckboxItem.displayName = CHECKBOX_ITEM_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * DropdownMenuRadioGroup\n * -----------------------------------------------------------------------------------------------*/\n\nconst RADIO_GROUP_NAME = 'DropdownMenuRadioGroup';\n\ntype DropdownMenuRadioGroupElement = React.ComponentRef<typeof MenuPrimitive.RadioGroup>;\ntype MenuRadioGroupProps = React.ComponentPropsWithoutRef<typeof MenuPrimitive.RadioGroup>;\ninterface DropdownMenuRadioGroupProps extends MenuRadioGroupProps {}\n\nconst DropdownMenuRadioGroup = React.forwardRef<\n  DropdownMenuRadioGroupElement,\n  DropdownMenuRadioGroupProps\n>((props: ScopedProps<DropdownMenuRadioGroupProps>, forwardedRef) => {\n  const { __scopeDropdownMenu, ...radioGroupProps } = props;\n  const menuScope = useMenuScope(__scopeDropdownMenu);\n  return <MenuPrimitive.RadioGroup {...menuScope} {...radioGroupProps} ref={forwardedRef} />;\n});\n\nDropdownMenuRadioGroup.displayName = RADIO_GROUP_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * DropdownMenuRadioItem\n * -----------------------------------------------------------------------------------------------*/\n\nconst RADIO_ITEM_NAME = 'DropdownMenuRadioItem';\n\ntype DropdownMenuRadioItemElement = React.ComponentRef<typeof MenuPrimitive.RadioItem>;\ntype MenuRadioItemProps = React.ComponentPropsWithoutRef<typeof MenuPrimitive.RadioItem>;\ninterface DropdownMenuRadioItemProps extends MenuRadioItemProps {}\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  DropdownMenuRadioItemElement,\n  DropdownMenuRadioItemProps\n>((props: ScopedProps<DropdownMenuRadioItemProps>, forwardedRef) => {\n  const { __scopeDropdownMenu, ...radioItemProps } = props;\n  const menuScope = useMenuScope(__scopeDropdownMenu);\n  return <MenuPrimitive.RadioItem {...menuScope} {...radioItemProps} ref={forwardedRef} />;\n});\n\nDropdownMenuRadioItem.displayName = RADIO_ITEM_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * DropdownMenuItemIndicator\n * -----------------------------------------------------------------------------------------------*/\n\nconst INDICATOR_NAME = 'DropdownMenuItemIndicator';\n\ntype DropdownMenuItemIndicatorElement = React.ComponentRef<typeof MenuPrimitive.ItemIndicator>;\ntype MenuItemIndicatorProps = React.ComponentPropsWithoutRef<typeof MenuPrimitive.ItemIndicator>;\ninterface DropdownMenuItemIndicatorProps extends MenuItemIndicatorProps {}\n\nconst DropdownMenuItemIndicator = React.forwardRef<\n  DropdownMenuItemIndicatorElement,\n  DropdownMenuItemIndicatorProps\n>((props: ScopedProps<DropdownMenuItemIndicatorProps>, forwardedRef) => {\n  const { __scopeDropdownMenu, ...itemIndicatorProps } = props;\n  const menuScope = useMenuScope(__scopeDropdownMenu);\n  return <MenuPrimitive.ItemIndicator {...menuScope} {...itemIndicatorProps} ref={forwardedRef} />;\n});\n\nDropdownMenuItemIndicator.displayName = INDICATOR_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * DropdownMenuSeparator\n * -----------------------------------------------------------------------------------------------*/\n\nconst SEPARATOR_NAME = 'DropdownMenuSeparator';\n\ntype DropdownMenuSeparatorElement = React.ComponentRef<typeof MenuPrimitive.Separator>;\ntype MenuSeparatorProps = React.ComponentPropsWithoutRef<typeof MenuPrimitive.Separator>;\ninterface DropdownMenuSeparatorProps extends MenuSeparatorProps {}\n\nconst DropdownMenuSeparator = React.forwardRef<\n  DropdownMenuSeparatorElement,\n  DropdownMenuSeparatorProps\n>((props: ScopedProps<DropdownMenuSeparatorProps>, forwardedRef) => {\n  const { __scopeDropdownMenu, ...separatorProps } = props;\n  const menuScope = useMenuScope(__scopeDropdownMenu);\n  return <MenuPrimitive.Separator {...menuScope} {...separatorProps} ref={forwardedRef} />;\n});\n\nDropdownMenuSeparator.displayName = SEPARATOR_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * DropdownMenuArrow\n * -----------------------------------------------------------------------------------------------*/\n\nconst ARROW_NAME = 'DropdownMenuArrow';\n\ntype DropdownMenuArrowElement = React.ComponentRef<typeof MenuPrimitive.Arrow>;\ntype MenuArrowProps = React.ComponentPropsWithoutRef<typeof MenuPrimitive.Arrow>;\ninterface DropdownMenuArrowProps extends MenuArrowProps {}\n\nconst DropdownMenuArrow = React.forwardRef<DropdownMenuArrowElement, DropdownMenuArrowProps>(\n  (props: ScopedProps<DropdownMenuArrowProps>, forwardedRef) => {\n    const { __scopeDropdownMenu, ...arrowProps } = props;\n    const menuScope = useMenuScope(__scopeDropdownMenu);\n    return <MenuPrimitive.Arrow {...menuScope} {...arrowProps} ref={forwardedRef} />;\n  }\n);\n\nDropdownMenuArrow.displayName = ARROW_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * DropdownMenuSub\n * -----------------------------------------------------------------------------------------------*/\n\ninterface DropdownMenuSubProps {\n  children?: React.ReactNode;\n  open?: boolean;\n  defaultOpen?: boolean;\n  onOpenChange?(open: boolean): void;\n}\n\nconst DropdownMenuSub: React.FC<DropdownMenuSubProps> = (\n  props: ScopedProps<DropdownMenuSubProps>\n) => {\n  const { __scopeDropdownMenu, children, open: openProp, onOpenChange, defaultOpen } = props;\n  const menuScope = useMenuScope(__scopeDropdownMenu);\n  const [open, setOpen] = useControllableState({\n    prop: openProp,\n    defaultProp: defaultOpen ?? false,\n    onChange: onOpenChange,\n    caller: 'DropdownMenuSub',\n  });\n\n  return (\n    <MenuPrimitive.Sub {...menuScope} open={open} onOpenChange={setOpen}>\n      {children}\n    </MenuPrimitive.Sub>\n  );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * DropdownMenuSubTrigger\n * -----------------------------------------------------------------------------------------------*/\n\nconst SUB_TRIGGER_NAME = 'DropdownMenuSubTrigger';\n\ntype DropdownMenuSubTriggerElement = React.ComponentRef<typeof MenuPrimitive.SubTrigger>;\ntype MenuSubTriggerProps = React.ComponentPropsWithoutRef<typeof MenuPrimitive.SubTrigger>;\ninterface DropdownMenuSubTriggerProps extends MenuSubTriggerProps {}\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  DropdownMenuSubTriggerElement,\n  DropdownMenuSubTriggerProps\n>((props: ScopedProps<DropdownMenuSubTriggerProps>, forwardedRef) => {\n  const { __scopeDropdownMenu, ...subTriggerProps } = props;\n  const menuScope = useMenuScope(__scopeDropdownMenu);\n  return <MenuPrimitive.SubTrigger {...menuScope} {...subTriggerProps} ref={forwardedRef} />;\n});\n\nDropdownMenuSubTrigger.displayName = SUB_TRIGGER_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * DropdownMenuSubContent\n * -----------------------------------------------------------------------------------------------*/\n\nconst SUB_CONTENT_NAME = 'DropdownMenuSubContent';\n\ntype DropdownMenuSubContentElement = React.ComponentRef<typeof MenuPrimitive.Content>;\ntype MenuSubContentProps = React.ComponentPropsWithoutRef<typeof MenuPrimitive.SubContent>;\ninterface DropdownMenuSubContentProps extends MenuSubContentProps {}\n\nconst DropdownMenuSubContent = React.forwardRef<\n  DropdownMenuSubContentElement,\n  DropdownMenuSubContentProps\n>((props: ScopedProps<DropdownMenuSubContentProps>, forwardedRef) => {\n  const { __scopeDropdownMenu, ...subContentProps } = props;\n  const menuScope = useMenuScope(__scopeDropdownMenu);\n\n  return (\n    <MenuPrimitive.SubContent\n      {...menuScope}\n      {...subContentProps}\n      ref={forwardedRef}\n      style={{\n        ...props.style,\n        // re-namespace exposed content custom properties\n        ...{\n          '--radix-dropdown-menu-content-transform-origin': 'var(--radix-popper-transform-origin)',\n          '--radix-dropdown-menu-content-available-width': 'var(--radix-popper-available-width)',\n          '--radix-dropdown-menu-content-available-height': 'var(--radix-popper-available-height)',\n          '--radix-dropdown-menu-trigger-width': 'var(--radix-popper-anchor-width)',\n          '--radix-dropdown-menu-trigger-height': 'var(--radix-popper-anchor-height)',\n        },\n      }}\n    />\n  );\n});\n\nDropdownMenuSubContent.displayName = SUB_CONTENT_NAME;\n\n/* -----------------------------------------------------------------------------------------------*/\n\nconst Root = DropdownMenu;\nconst Trigger = DropdownMenuTrigger;\nconst Portal = DropdownMenuPortal;\nconst Content = DropdownMenuContent;\nconst Group = DropdownMenuGroup;\nconst Label = DropdownMenuLabel;\nconst Item = DropdownMenuItem;\nconst CheckboxItem = DropdownMenuCheckboxItem;\nconst RadioGroup = DropdownMenuRadioGroup;\nconst RadioItem = DropdownMenuRadioItem;\nconst ItemIndicator = DropdownMenuItemIndicator;\nconst Separator = DropdownMenuSeparator;\nconst Arrow = DropdownMenuArrow;\nconst Sub = DropdownMenuSub;\nconst SubTrigger = DropdownMenuSubTrigger;\nconst SubContent = DropdownMenuSubContent;\n\nexport {\n  createDropdownMenuScope,\n  //\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuPortal,\n  DropdownMenuContent,\n  DropdownMenuGroup,\n  DropdownMenuLabel,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioGroup,\n  DropdownMenuRadioItem,\n  DropdownMenuItemIndicator,\n  DropdownMenuSeparator,\n  DropdownMenuArrow,\n  DropdownMenuSub,\n  DropdownMenuSubTrigger,\n  DropdownMenuSubContent,\n  //\n  Root,\n  Trigger,\n  Portal,\n  Content,\n  Group,\n  Label,\n  Item,\n  CheckboxItem,\n  RadioGroup,\n  RadioItem,\n  ItemIndicator,\n  Separator,\n  Arrow,\n  Sub,\n  SubTrigger,\n  SubContent,\n};\nexport type {\n  DropdownMenuProps,\n  DropdownMenuTriggerProps,\n  DropdownMenuPortalProps,\n  DropdownMenuContentProps,\n  DropdownMenuGroupProps,\n  DropdownMenuLabelProps,\n  DropdownMenuItemProps,\n  DropdownMenuCheckboxItemProps,\n  DropdownMenuRadioGroupProps,\n  DropdownMenuRadioItemProps,\n  DropdownMenuItemIndicatorProps,\n  DropdownMenuSeparatorProps,\n  DropdownMenuArrowProps,\n  DropdownMenuSubProps,\n  DropdownMenuSubTriggerProps,\n  DropdownMenuSubContentProps,\n};\n","import * as React from 'react';\nimport { composeEventHandlers } from '@radix-ui/primitive';\nimport { createCollection } from '@radix-ui/react-collection';\nimport { useComposedRefs } from '@radix-ui/react-compose-refs';\nimport { createContextScope } from '@radix-ui/react-context';\nimport { useId } from '@radix-ui/react-id';\nimport { Primitive } from '@radix-ui/react-primitive';\nimport { useCallbackRef } from '@radix-ui/react-use-callback-ref';\nimport { useControllableState } from '@radix-ui/react-use-controllable-state';\nimport { useDirection } from '@radix-ui/react-direction';\n\nimport type { Scope } from '@radix-ui/react-context';\n\nconst ENTRY_FOCUS = 'rovingFocusGroup.onEntryFocus';\nconst EVENT_OPTIONS = { bubbles: false, cancelable: true };\n\n/* -------------------------------------------------------------------------------------------------\n * RovingFocusGroup\n * -----------------------------------------------------------------------------------------------*/\n\nconst GROUP_NAME = 'RovingFocusGroup';\n\ntype ItemData = { id: string; focusable: boolean; active: boolean };\nconst [Collection, useCollection, createCollectionScope] = createCollection<\n  HTMLSpanElement,\n  ItemData\n>(GROUP_NAME);\n\ntype ScopedProps<P> = P & { __scopeRovingFocusGroup?: Scope };\nconst [createRovingFocusGroupContext, createRovingFocusGroupScope] = createContextScope(\n  GROUP_NAME,\n  [createCollectionScope]\n);\n\ntype Orientation = React.AriaAttributes['aria-orientation'];\ntype Direction = 'ltr' | 'rtl';\n\ninterface RovingFocusGroupOptions {\n  /**\n   * The orientation of the group.\n   * Mainly so arrow navigation is done accordingly (left & right vs. up & down)\n   */\n  orientation?: Orientation;\n  /**\n   * The direction of navigation between items.\n   */\n  dir?: Direction;\n  /**\n   * Whether keyboard navigation should loop around\n   * @defaultValue false\n   */\n  loop?: boolean;\n}\n\ntype RovingContextValue = RovingFocusGroupOptions & {\n  currentTabStopId: string | null;\n  onItemFocus(tabStopId: string): void;\n  onItemShiftTab(): void;\n  onFocusableItemAdd(): void;\n  onFocusableItemRemove(): void;\n};\n\nconst [RovingFocusProvider, useRovingFocusContext] =\n  createRovingFocusGroupContext<RovingContextValue>(GROUP_NAME);\n\ntype RovingFocusGroupElement = RovingFocusGroupImplElement;\ninterface RovingFocusGroupProps extends RovingFocusGroupImplProps {}\n\nconst RovingFocusGroup = React.forwardRef<RovingFocusGroupElement, RovingFocusGroupProps>(\n  (props: ScopedProps<RovingFocusGroupProps>, forwardedRef) => {\n    return (\n      <Collection.Provider scope={props.__scopeRovingFocusGroup}>\n        <Collection.Slot scope={props.__scopeRovingFocusGroup}>\n          <RovingFocusGroupImpl {...props} ref={forwardedRef} />\n        </Collection.Slot>\n      </Collection.Provider>\n    );\n  }\n);\n\nRovingFocusGroup.displayName = GROUP_NAME;\n\n/* -----------------------------------------------------------------------------------------------*/\n\ntype RovingFocusGroupImplElement = React.ComponentRef<typeof Primitive.div>;\ntype PrimitiveDivProps = React.ComponentPropsWithoutRef<typeof Primitive.div>;\ninterface RovingFocusGroupImplProps\n  extends Omit<PrimitiveDivProps, 'dir'>,\n    RovingFocusGroupOptions {\n  currentTabStopId?: string | null;\n  defaultCurrentTabStopId?: string;\n  onCurrentTabStopIdChange?: (tabStopId: string | null) => void;\n  onEntryFocus?: (event: Event) => void;\n  preventScrollOnEntryFocus?: boolean;\n}\n\nconst RovingFocusGroupImpl = React.forwardRef<\n  RovingFocusGroupImplElement,\n  RovingFocusGroupImplProps\n>((props: ScopedProps<RovingFocusGroupImplProps>, forwardedRef) => {\n  const {\n    __scopeRovingFocusGroup,\n    orientation,\n    loop = false,\n    dir,\n    currentTabStopId: currentTabStopIdProp,\n    defaultCurrentTabStopId,\n    onCurrentTabStopIdChange,\n    onEntryFocus,\n    preventScrollOnEntryFocus = false,\n    ...groupProps\n  } = props;\n  const ref = React.useRef<RovingFocusGroupImplElement>(null);\n  const composedRefs = useComposedRefs(forwardedRef, ref);\n  const direction = useDirection(dir);\n  const [currentTabStopId, setCurrentTabStopId] = useControllableState({\n    prop: currentTabStopIdProp,\n    defaultProp: defaultCurrentTabStopId ?? null,\n    onChange: onCurrentTabStopIdChange,\n    caller: GROUP_NAME,\n  });\n  const [isTabbingBackOut, setIsTabbingBackOut] = React.useState(false);\n  const handleEntryFocus = useCallbackRef(onEntryFocus);\n  const getItems = useCollection(__scopeRovingFocusGroup);\n  const isClickFocusRef = React.useRef(false);\n  const [focusableItemsCount, setFocusableItemsCount] = React.useState(0);\n\n  React.useEffect(() => {\n    const node = ref.current;\n    if (node) {\n      node.addEventListener(ENTRY_FOCUS, handleEntryFocus);\n      return () => node.removeEventListener(ENTRY_FOCUS, handleEntryFocus);\n    }\n  }, [handleEntryFocus]);\n\n  return (\n    <RovingFocusProvider\n      scope={__scopeRovingFocusGroup}\n      orientation={orientation}\n      dir={direction}\n      loop={loop}\n      currentTabStopId={currentTabStopId}\n      onItemFocus={React.useCallback(\n        (tabStopId) => setCurrentTabStopId(tabStopId),\n        [setCurrentTabStopId]\n      )}\n      onItemShiftTab={React.useCallback(() => setIsTabbingBackOut(true), [])}\n      onFocusableItemAdd={React.useCallback(\n        () => setFocusableItemsCount((prevCount) => prevCount + 1),\n        []\n      )}\n      onFocusableItemRemove={React.useCallback(\n        () => setFocusableItemsCount((prevCount) => prevCount - 1),\n        []\n      )}\n    >\n      <Primitive.div\n        tabIndex={isTabbingBackOut || focusableItemsCount === 0 ? -1 : 0}\n        data-orientation={orientation}\n        {...groupProps}\n        ref={composedRefs}\n        style={{ outline: 'none', ...props.style }}\n        onMouseDown={composeEventHandlers(props.onMouseDown, () => {\n          isClickFocusRef.current = true;\n        })}\n        onFocus={composeEventHandlers(props.onFocus, (event) => {\n          // We normally wouldn't need this check, because we already check\n          // that the focus is on the current target and not bubbling to it.\n          // We do this because Safari doesn't focus buttons when clicked, and\n          // instead, the wrapper will get focused and not through a bubbling event.\n          const isKeyboardFocus = !isClickFocusRef.current;\n\n          if (event.target === event.currentTarget && isKeyboardFocus && !isTabbingBackOut) {\n            const entryFocusEvent = new CustomEvent(ENTRY_FOCUS, EVENT_OPTIONS);\n            event.currentTarget.dispatchEvent(entryFocusEvent);\n\n            if (!entryFocusEvent.defaultPrevented) {\n              const items = getItems().filter((item) => item.focusable);\n              const activeItem = items.find((item) => item.active);\n              const currentItem = items.find((item) => item.id === currentTabStopId);\n              const candidateItems = [activeItem, currentItem, ...items].filter(\n                Boolean\n              ) as typeof items;\n              const candidateNodes = candidateItems.map((item) => item.ref.current!);\n              focusFirst(candidateNodes, preventScrollOnEntryFocus);\n            }\n          }\n\n          isClickFocusRef.current = false;\n        })}\n        onBlur={composeEventHandlers(props.onBlur, () => setIsTabbingBackOut(false))}\n      />\n    </RovingFocusProvider>\n  );\n});\n\n/* -------------------------------------------------------------------------------------------------\n * RovingFocusGroupItem\n * -----------------------------------------------------------------------------------------------*/\n\nconst ITEM_NAME = 'RovingFocusGroupItem';\n\ntype RovingFocusItemElement = React.ComponentRef<typeof Primitive.span>;\ntype PrimitiveSpanProps = React.ComponentPropsWithoutRef<typeof Primitive.span>;\ninterface RovingFocusItemProps extends Omit<PrimitiveSpanProps, 'children'> {\n  tabStopId?: string;\n  focusable?: boolean;\n  active?: boolean;\n  children?:\n    | React.ReactNode\n    | ((props: { hasTabStop: boolean; isCurrentTabStop: boolean }) => React.ReactNode);\n}\n\nconst RovingFocusGroupItem = React.forwardRef<RovingFocusItemElement, RovingFocusItemProps>(\n  (props: ScopedProps<RovingFocusItemProps>, forwardedRef) => {\n    const {\n      __scopeRovingFocusGroup,\n      focusable = true,\n      active = false,\n      tabStopId,\n      children,\n      ...itemProps\n    } = props;\n    const autoId = useId();\n    const id = tabStopId || autoId;\n    const context = useRovingFocusContext(ITEM_NAME, __scopeRovingFocusGroup);\n    const isCurrentTabStop = context.currentTabStopId === id;\n    const getItems = useCollection(__scopeRovingFocusGroup);\n\n    const { onFocusableItemAdd, onFocusableItemRemove, currentTabStopId } = context;\n\n    React.useEffect(() => {\n      if (focusable) {\n        onFocusableItemAdd();\n        return () => onFocusableItemRemove();\n      }\n    }, [focusable, onFocusableItemAdd, onFocusableItemRemove]);\n\n    return (\n      <Collection.ItemSlot\n        scope={__scopeRovingFocusGroup}\n        id={id}\n        focusable={focusable}\n        active={active}\n      >\n        <Primitive.span\n          tabIndex={isCurrentTabStop ? 0 : -1}\n          data-orientation={context.orientation}\n          {...itemProps}\n          ref={forwardedRef}\n          onMouseDown={composeEventHandlers(props.onMouseDown, (event) => {\n            // We prevent focusing non-focusable items on `mousedown`.\n            // Even though the item has tabIndex={-1}, that only means take it out of the tab order.\n            if (!focusable) event.preventDefault();\n            // Safari doesn't focus a button when clicked so we run our logic on mousedown also\n            else context.onItemFocus(id);\n          })}\n          onFocus={composeEventHandlers(props.onFocus, () => context.onItemFocus(id))}\n          onKeyDown={composeEventHandlers(props.onKeyDown, (event) => {\n            if (event.key === 'Tab' && event.shiftKey) {\n              context.onItemShiftTab();\n              return;\n            }\n\n            if (event.target !== event.currentTarget) return;\n\n            const focusIntent = getFocusIntent(event, context.orientation, context.dir);\n\n            if (focusIntent !== undefined) {\n              if (event.metaKey || event.ctrlKey || event.altKey || event.shiftKey) return;\n              event.preventDefault();\n              const items = getItems().filter((item) => item.focusable);\n              let candidateNodes = items.map((item) => item.ref.current!);\n\n              if (focusIntent === 'last') candidateNodes.reverse();\n              else if (focusIntent === 'prev' || focusIntent === 'next') {\n                if (focusIntent === 'prev') candidateNodes.reverse();\n                const currentIndex = candidateNodes.indexOf(event.currentTarget);\n                candidateNodes = context.loop\n                  ? wrapArray(candidateNodes, currentIndex + 1)\n                  : candidateNodes.slice(currentIndex + 1);\n              }\n\n              /**\n               * Imperative focus during keydown is risky so we prevent React's batching updates\n               * to avoid potential bugs. See: https://github.com/facebook/react/issues/20332\n               */\n              setTimeout(() => focusFirst(candidateNodes));\n            }\n          })}\n        >\n          {typeof children === 'function'\n            ? children({ isCurrentTabStop, hasTabStop: currentTabStopId != null })\n            : children}\n        </Primitive.span>\n      </Collection.ItemSlot>\n    );\n  }\n);\n\nRovingFocusGroupItem.displayName = ITEM_NAME;\n\n/* -----------------------------------------------------------------------------------------------*/\n\n// prettier-ignore\nconst MAP_KEY_TO_FOCUS_INTENT: Record<string, FocusIntent> = {\n  ArrowLeft: 'prev', ArrowUp: 'prev',\n  ArrowRight: 'next', ArrowDown: 'next',\n  PageUp: 'first', Home: 'first',\n  PageDown: 'last', End: 'last',\n};\n\nfunction getDirectionAwareKey(key: string, dir?: Direction) {\n  if (dir !== 'rtl') return key;\n  return key === 'ArrowLeft' ? 'ArrowRight' : key === 'ArrowRight' ? 'ArrowLeft' : key;\n}\n\ntype FocusIntent = 'first' | 'last' | 'prev' | 'next';\n\nfunction getFocusIntent(event: React.KeyboardEvent, orientation?: Orientation, dir?: Direction) {\n  const key = getDirectionAwareKey(event.key, dir);\n  if (orientation === 'vertical' && ['ArrowLeft', 'ArrowRight'].includes(key)) return undefined;\n  if (orientation === 'horizontal' && ['ArrowUp', 'ArrowDown'].includes(key)) return undefined;\n  return MAP_KEY_TO_FOCUS_INTENT[key];\n}\n\nfunction focusFirst(candidates: HTMLElement[], preventScroll = false) {\n  const PREVIOUSLY_FOCUSED_ELEMENT = document.activeElement;\n  for (const candidate of candidates) {\n    // if focus is already where we want to go, we don't want to keep going through the candidates\n    if (candidate === PREVIOUSLY_FOCUSED_ELEMENT) return;\n    candidate.focus({ preventScroll });\n    if (document.activeElement !== PREVIOUSLY_FOCUSED_ELEMENT) return;\n  }\n}\n\n/**\n * Wraps an array around itself at a given start index\n * Example: `wrapArray(['a', 'b', 'c', 'd'], 2) === ['c', 'd', 'a', 'b']`\n */\nfunction wrapArray<T>(array: T[], startIndex: number) {\n  return array.map<T>((_, index) => array[(startIndex + index) % array.length]!);\n}\n\nconst Root = RovingFocusGroup;\nconst Item = RovingFocusGroupItem;\n\nexport {\n  createRovingFocusGroupScope,\n  //\n  RovingFocusGroup,\n  RovingFocusGroupItem,\n  //\n  Root,\n  Item,\n};\nexport type { RovingFocusGroupProps, RovingFocusItemProps };\n"],"names":["DirectionContext","react__WEBPACK_IMPORTED_MODULE_0__","createContext","useDirection","localDir","globalDir","useContext","SELECTION_KEYS","LAST_KEYS","FIRST_LAST_KEYS","SUB_OPEN_KEYS","ltr","rtl","SUB_CLOSE_KEYS","MENU_NAME","Collection","useCollection","createCollectionScope","createCollection","createMenuContext","createMenuScope","createContextScope","createPopperScope","createRovingFocusGroupScope","usePopperScope","useRovingFocusGroupScope","MenuProvider","useMenuContext","MenuRootProvider","useMenuRootContext","Menu","__scopeMenu","open","children","dir","onOpenChange","modal","props","popperScope","content","setContent","React","isUsingKeyboardRef","handleOpenChange","useCallbackRef","direction","handleKeyDown","current","document","addEventListener","handlePointer","capture","once","removeEventListener","jsx","PopperPrimitive","scope","onContentChange","onClose","displayName","MenuAnchor","forwardedRef","anchorProps","ref","PORTAL_NAME","PortalProvider","usePortalContext","forceMount","MenuPortal","container","context","Presence","present","PortalPrimitive","asChild","CONTENT_NAME","MenuContentProvider","useMenuContentContext","MenuContent","portalContext","contentProps","rootContext","Provider","Slot","MenuRootContentModal","MenuRootContentNonModal","composedRefs","useComposedRefs","hideOthers","MenuContentImpl","trapFocus","disableOutsidePointerEvents","disableOutsideScroll","onFocusOutside","composeEventHandlers","event","preventDefault","checkForDefaultPrevented","onDismiss","createSlot","loop","onOpenAutoFocus","onCloseAutoFocus","onEntryFocus","onEscapeKeyDown","onPointerDownOutside","onInteractOutside","rovingFocusGroupScope","getItems","currentItemId","setCurrentItemId","contentRef","timerRef","searchRef","pointerGraceTimerRef","pointerGraceIntentRef","pointerDirRef","lastPointerXRef","ScrollLockWrapper","RemoveScroll","handleTypeaheadSearch","items","search","key","filter","item","disabled","currentItem","activeElement","currentMatch","find","textValue","nextMatch","getNextMatch","values","startIndex","normalizedSearch","isRepeated","length","Array","from","every","char","wrappedValues","Math","max","indexOf","array","map","_","index","v","value","toLowerCase","startsWith","newItem","updateSearch","window","clearTimeout","setTimeout","focus","useFocusGuards","isPointerMovingToSubmenu","area","isMovingTowards","side","isPointInPolygon","point","polygon","x","y","inside","i","j","ii","jj","xi","yi","xj","yj","clientX","clientY","onItemEnter","onItemLeave","onTriggerLeave","onPointerGraceIntentChange","intent","as","allowPinchZoom","FocusScope","trapped","onMountAutoFocus","preventScroll","onUnmountAutoFocus","DismissableLayer","RovingFocusGroup","orientation","currentTabStopId","onCurrentTabStopIdChange","preventScrollOnEntryFocus","role","getOpenState","style","outline","onKeyDown","isKeyDownInside","target","closest","currentTarget","isModifierKey","ctrlKey","altKey","metaKey","isCharacterKey","includes","candidateNodes","reverse","focusFirst","candidates","PREVIOUSLY_FOCUSED_ELEMENT","candidate","onBlur","contains","onPointerMove","whenMouse","pointerXHasChanged","newDir","MenuGroup","groupProps","Primitive","div","MenuLabel","labelProps","ITEM_NAME","ITEM_SELECT","MenuItem","onSelect","itemProps","contentContext","isPointerDownRef","MenuItemImpl","onClick","menuItem","itemSelectEvent","CustomEvent","bubbles","cancelable","dispatchDiscreteCustomEvent","defaultPrevented","onPointerDown","onPointerUp","click","isTypingAhead","isFocused","setIsFocused","textContent","setTextContent","trim","ItemSlot","focusable","onPointerLeave","onFocus","MenuCheckboxItem","checked","onCheckedChange","checkboxItemProps","ItemIndicatorProvider","isIndeterminate","getCheckedState","RADIO_GROUP_NAME","RadioGroupProvider","useRadioGroupContext","onValueChange","MenuRadioGroup","handleValueChange","RADIO_ITEM_NAME","MenuRadioItem","radioItemProps","ITEM_INDICATOR_NAME","useItemIndicatorContext","MenuItemIndicator","itemIndicatorProps","indicatorContext","span","MenuSeparator","separatorProps","MenuArrow","arrowProps","SUB_NAME","MenuSubProvider","useMenuSubContext","MenuSub","parentMenuContext","trigger","setTrigger","contentId","useId","triggerId","onTriggerChange","SUB_TRIGGER_NAME","MenuSubTrigger","subContext","openTimerRef","clearOpenTimer","pointerGraceTimer","id","composeRefs","contentRect","getBoundingClientRect","dataset","rightSide","contentNearEdge","contentFarEdge","top","bottom","SUB_CONTENT_NAME","MenuSubContent","subContentProps","align","isCloseKey","handler","pointerType","DROPDOWN_MENU_NAME","createDropdownMenuContext","createDropdownMenuScope","useMenuScope","DropdownMenuProvider","useDropdownMenuContext","DropdownMenu","__scopeDropdownMenu","openProp","defaultOpen","menuScope","triggerRef","setOpen","useControllableState","prop","defaultProp","onChange","caller","onOpenToggle","prevOpen","TRIGGER_NAME","DropdownMenuTrigger","triggerProps","button","type","DropdownMenuPortal","portalProps","DropdownMenuContent","hasInteractedOutsideRef","originalEvent","detail","ctrlLeftClick","isRightClick","DropdownMenuGroup","DropdownMenuLabel","DropdownMenuItem","DropdownMenuCheckboxItem","DropdownMenuRadioGroup","radioGroupProps","DropdownMenuRadioItem","DropdownMenuItemIndicator","DropdownMenuSeparator","DropdownMenuArrow","DropdownMenuSubTrigger","subTriggerProps","DropdownMenuSubContent","Root","Trigger","Portal","Content","Group","Label","Item","CheckboxItem","RadioGroup","RadioItem","ItemIndicator","Separator","Sub","SubTrigger","SubContent","ENTRY_FOCUS","EVENT_OPTIONS","GROUP_NAME","createRovingFocusGroupContext","RovingFocusProvider","useRovingFocusContext","__scopeRovingFocusGroup","RovingFocusGroupImpl","currentTabStopIdProp","defaultCurrentTabStopId","setCurrentTabStopId","isTabbingBackOut","setIsTabbingBackOut","handleEntryFocus","isClickFocusRef","focusableItemsCount","setFocusableItemsCount","node","onItemFocus","tabStopId","onItemShiftTab","onFocusableItemAdd","prevCount","onFocusableItemRemove","tabIndex","onMouseDown","isKeyboardFocus","entryFocusEvent","dispatchEvent","candidateItems","active","Boolean","RovingFocusGroupItem","autoId","isCurrentTabStop","shiftKey","focusIntent","getFocusIntent","MAP_KEY_TO_FOCUS_INTENT","currentIndex","slice","hasTabStop","ArrowLeft","ArrowUp","ArrowRight","ArrowDown","PageUp","Home","PageDown","End"],"sourceRoot":""}