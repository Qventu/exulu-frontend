{"version":3,"file":"static/chunks/1275.bc45e0e7fb75aa0c.js","mappings":"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","sources":["webpack://_N_E/./node_modules/codemirror/addon/lint/lint.js"],"sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/5/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n  var GUTTER_ID = \"CodeMirror-lint-markers\";\n  var LINT_LINE_ID = \"CodeMirror-lint-line-\";\n\n  function showTooltip(cm, e, content) {\n    var tt = document.createElement(\"div\");\n    tt.className = \"CodeMirror-lint-tooltip cm-s-\" + cm.options.theme;\n    tt.appendChild(content.cloneNode(true));\n    if (cm.state.lint.options.selfContain)\n      cm.getWrapperElement().appendChild(tt);\n    else\n      document.body.appendChild(tt);\n\n    function position(e) {\n      if (!tt.parentNode) return CodeMirror.off(document, \"mousemove\", position);\n      var top = Math.max(0, e.clientY - tt.offsetHeight - 5);\n      var left = Math.max(0, Math.min(e.clientX + 5, tt.ownerDocument.defaultView.innerWidth - tt.offsetWidth));\n      tt.style.top = top + \"px\"\n      tt.style.left = left + \"px\";\n    }\n    CodeMirror.on(document, \"mousemove\", position);\n    position(e);\n    if (tt.style.opacity != null) tt.style.opacity = 1;\n    return tt;\n  }\n  function rm(elt) {\n    if (elt.parentNode) elt.parentNode.removeChild(elt);\n  }\n  function hideTooltip(tt) {\n    if (!tt.parentNode) return;\n    if (tt.style.opacity == null) rm(tt);\n    tt.style.opacity = 0;\n    setTimeout(function() { rm(tt); }, 600);\n  }\n\n  function showTooltipFor(cm, e, content, node) {\n    var tooltip = showTooltip(cm, e, content);\n    function hide() {\n      CodeMirror.off(node, \"mouseout\", hide);\n      if (tooltip) { hideTooltip(tooltip); tooltip = null; }\n    }\n    var poll = setInterval(function() {\n      if (tooltip) for (var n = node;; n = n.parentNode) {\n        if (n && n.nodeType == 11) n = n.host;\n        if (n == document.body) return;\n        if (!n) { hide(); break; }\n      }\n      if (!tooltip) return clearInterval(poll);\n    }, 400);\n    CodeMirror.on(node, \"mouseout\", hide);\n  }\n\n  function LintState(cm, conf, hasGutter) {\n    this.marked = [];\n    if (conf instanceof Function) conf = {getAnnotations: conf};\n    if (!conf || conf === true) conf = {};\n    this.options = {};\n    this.linterOptions = conf.options || {};\n    for (var prop in defaults) this.options[prop] = defaults[prop];\n    for (var prop in conf) {\n      if (defaults.hasOwnProperty(prop)) {\n        if (conf[prop] != null) this.options[prop] = conf[prop];\n      } else if (!conf.options) {\n        this.linterOptions[prop] = conf[prop];\n      }\n    }\n    this.timeout = null;\n    this.hasGutter = hasGutter;\n    this.onMouseOver = function(e) { onMouseOver(cm, e); };\n    this.waitingFor = 0\n  }\n\n  var defaults = {\n    highlightLines: false,\n    tooltips: true,\n    delay: 500,\n    lintOnChange: true,\n    getAnnotations: null,\n    async: false,\n    selfContain: null,\n    formatAnnotation: null,\n    onUpdateLinting: null\n  }\n\n  function clearMarks(cm) {\n    var state = cm.state.lint;\n    if (state.hasGutter) cm.clearGutter(GUTTER_ID);\n    if (state.options.highlightLines) clearErrorLines(cm);\n    for (var i = 0; i < state.marked.length; ++i)\n      state.marked[i].clear();\n    state.marked.length = 0;\n  }\n\n  function clearErrorLines(cm) {\n    cm.eachLine(function(line) {\n      var has = line.wrapClass && /\\bCodeMirror-lint-line-\\w+\\b/.exec(line.wrapClass);\n      if (has) cm.removeLineClass(line, \"wrap\", has[0]);\n    })\n  }\n\n  function makeMarker(cm, labels, severity, multiple, tooltips) {\n    var marker = document.createElement(\"div\"), inner = marker;\n    marker.className = \"CodeMirror-lint-marker CodeMirror-lint-marker-\" + severity;\n    if (multiple) {\n      inner = marker.appendChild(document.createElement(\"div\"));\n      inner.className = \"CodeMirror-lint-marker CodeMirror-lint-marker-multiple\";\n    }\n\n    if (tooltips != false) CodeMirror.on(inner, \"mouseover\", function(e) {\n      showTooltipFor(cm, e, labels, inner);\n    });\n\n    return marker;\n  }\n\n  function getMaxSeverity(a, b) {\n    if (a == \"error\") return a;\n    else return b;\n  }\n\n  function groupByLine(annotations) {\n    var lines = [];\n    for (var i = 0; i < annotations.length; ++i) {\n      var ann = annotations[i], line = ann.from.line;\n      (lines[line] || (lines[line] = [])).push(ann);\n    }\n    return lines;\n  }\n\n  function annotationTooltip(ann) {\n    var severity = ann.severity;\n    if (!severity) severity = \"error\";\n    var tip = document.createElement(\"div\");\n    tip.className = \"CodeMirror-lint-message CodeMirror-lint-message-\" + severity;\n    if (typeof ann.messageHTML != 'undefined') {\n      tip.innerHTML = ann.messageHTML;\n    } else {\n      tip.appendChild(document.createTextNode(ann.message));\n    }\n    return tip;\n  }\n\n  function lintAsync(cm, getAnnotations) {\n    var state = cm.state.lint\n    var id = ++state.waitingFor\n    function abort() {\n      id = -1\n      cm.off(\"change\", abort)\n    }\n    cm.on(\"change\", abort)\n    getAnnotations(cm.getValue(), function(annotations, arg2) {\n      cm.off(\"change\", abort)\n      if (state.waitingFor != id) return\n      if (arg2 && annotations instanceof CodeMirror) annotations = arg2\n      cm.operation(function() {updateLinting(cm, annotations)})\n    }, state.linterOptions, cm);\n  }\n\n  function startLinting(cm) {\n    var state = cm.state.lint;\n    if (!state) return;\n    var options = state.options;\n    /*\n     * Passing rules in `options` property prevents JSHint (and other linters) from complaining\n     * about unrecognized rules like `onUpdateLinting`, `delay`, `lintOnChange`, etc.\n     */\n    var getAnnotations = options.getAnnotations || cm.getHelper(CodeMirror.Pos(0, 0), \"lint\");\n    if (!getAnnotations) return;\n    if (options.async || getAnnotations.async) {\n      lintAsync(cm, getAnnotations)\n    } else {\n      var annotations = getAnnotations(cm.getValue(), state.linterOptions, cm);\n      if (!annotations) return;\n      if (annotations.then) annotations.then(function(issues) {\n        cm.operation(function() {updateLinting(cm, issues)})\n      });\n      else cm.operation(function() {updateLinting(cm, annotations)})\n    }\n  }\n\n  function updateLinting(cm, annotationsNotSorted) {\n    var state = cm.state.lint;\n    if (!state) return;\n    var options = state.options;\n    clearMarks(cm);\n\n    var annotations = groupByLine(annotationsNotSorted);\n\n    for (var line = 0; line < annotations.length; ++line) {\n      var anns = annotations[line];\n      if (!anns) continue;\n\n      var maxSeverity = null;\n      var tipLabel = state.hasGutter && document.createDocumentFragment();\n\n      for (var i = 0; i < anns.length; ++i) {\n        var ann = anns[i];\n        var severity = ann.severity;\n        if (!severity) severity = \"error\";\n        maxSeverity = getMaxSeverity(maxSeverity, severity);\n\n        if (options.formatAnnotation) ann = options.formatAnnotation(ann);\n        if (state.hasGutter) tipLabel.appendChild(annotationTooltip(ann));\n\n        if (ann.to) state.marked.push(cm.markText(ann.from, ann.to, {\n          className: \"CodeMirror-lint-mark CodeMirror-lint-mark-\" + severity,\n          __annotation: ann\n        }));\n      }\n      if (state.hasGutter)\n        cm.setGutterMarker(line, GUTTER_ID, makeMarker(cm, tipLabel, maxSeverity, anns.length > 1,\n                                                       options.tooltips));\n\n      if (options.highlightLines)\n        cm.addLineClass(line, \"wrap\", LINT_LINE_ID + maxSeverity);\n    }\n    if (options.onUpdateLinting) options.onUpdateLinting(annotationsNotSorted, annotations, cm);\n  }\n\n  function onChange(cm) {\n    var state = cm.state.lint;\n    if (!state) return;\n    clearTimeout(state.timeout);\n    state.timeout = setTimeout(function(){startLinting(cm);}, state.options.delay);\n  }\n\n  function popupTooltips(cm, annotations, e) {\n    var target = e.target || e.srcElement;\n    var tooltip = document.createDocumentFragment();\n    for (var i = 0; i < annotations.length; i++) {\n      var ann = annotations[i];\n      tooltip.appendChild(annotationTooltip(ann));\n    }\n    showTooltipFor(cm, e, tooltip, target);\n  }\n\n  function onMouseOver(cm, e) {\n    var target = e.target || e.srcElement;\n    if (!/\\bCodeMirror-lint-mark-/.test(target.className)) return;\n    var box = target.getBoundingClientRect(), x = (box.left + box.right) / 2, y = (box.top + box.bottom) / 2;\n    var spans = cm.findMarksAt(cm.coordsChar({left: x, top: y}, \"client\"));\n\n    var annotations = [];\n    for (var i = 0; i < spans.length; ++i) {\n      var ann = spans[i].__annotation;\n      if (ann) annotations.push(ann);\n    }\n    if (annotations.length) popupTooltips(cm, annotations, e);\n  }\n\n  CodeMirror.defineOption(\"lint\", false, function(cm, val, old) {\n    if (old && old != CodeMirror.Init) {\n      clearMarks(cm);\n      if (cm.state.lint.options.lintOnChange !== false)\n        cm.off(\"change\", onChange);\n      CodeMirror.off(cm.getWrapperElement(), \"mouseover\", cm.state.lint.onMouseOver);\n      clearTimeout(cm.state.lint.timeout);\n      delete cm.state.lint;\n    }\n\n    if (val) {\n      var gutters = cm.getOption(\"gutters\"), hasLintGutter = false;\n      for (var i = 0; i < gutters.length; ++i) if (gutters[i] == GUTTER_ID) hasLintGutter = true;\n      var state = cm.state.lint = new LintState(cm, val, hasLintGutter);\n      if (state.options.lintOnChange)\n        cm.on(\"change\", onChange);\n      if (state.options.tooltips != false && state.options.tooltips != \"gutter\")\n        CodeMirror.on(cm.getWrapperElement(), \"mouseover\", state.onMouseOver);\n\n      startLinting(cm);\n    }\n  });\n\n  CodeMirror.defineExtension(\"performLint\", function() {\n    startLinting(this);\n  });\n});\n"],"names":["mod","CodeMirror","GUTTER_ID","rm","elt","parentNode","removeChild","showTooltipFor","cm","e","content","node","tooltip","showTooltip","tt","document","createElement","position","off","top","Math","max","clientY","offsetHeight","left","min","clientX","ownerDocument","defaultView","innerWidth","offsetWidth","style","className","options","theme","appendChild","cloneNode","state","lint","selfContain","getWrapperElement","body","on","opacity","hide","setTimeout","poll","setInterval","n","nodeType","host","clearInterval","LintState","conf","hasGutter","prop","marked","Function","getAnnotations","linterOptions","defaults","hasOwnProperty","timeout","onMouseOver","target","srcElement","test","box","getBoundingClientRect","x","right","y","bottom","spans","findMarksAt","coordsChar","annotations","i","length","ann","__annotation","push","popupTooltips","createDocumentFragment","annotationTooltip","waitingFor","highlightLines","tooltips","delay","lintOnChange","async","formatAnnotation","onUpdateLinting","clearMarks","clearGutter","clearErrorLines","eachLine","line","has","wrapClass","exec","removeLineClass","clear","severity","tip","messageHTML","innerHTML","createTextNode","message","startLinting","getHelper","Pos","lintAsync","id","abort","getValue","arg2","operation","updateLinting","then","issues","annotationsNotSorted","groupByLine","lines","from","anns","maxSeverity","tipLabel","a","b","to","markText","setGutterMarker","makeMarker","labels","multiple","marker","inner","addLineClass","LINT_LINE_ID","onChange","clearTimeout","defineOption","val","old","Init","gutters","getOption","hasLintGutter","defineExtension","__webpack_require__"],"sourceRoot":""}