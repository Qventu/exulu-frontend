{"version":3,"file":"static/chunks/1336.23bfbff85c2a2355.js","mappings":"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","sources":["webpack://_N_E/./node_modules/codemirror/addon/search/searchcursor.js"],"sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/5/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"))\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod)\n  else // Plain browser env\n    mod(CodeMirror)\n})(function(CodeMirror) {\n  \"use strict\"\n  var Pos = CodeMirror.Pos\n\n  function regexpFlags(regexp) {\n    var flags = regexp.flags\n    return flags != null ? flags : (regexp.ignoreCase ? \"i\" : \"\")\n      + (regexp.global ? \"g\" : \"\")\n      + (regexp.multiline ? \"m\" : \"\")\n  }\n\n  function ensureFlags(regexp, flags) {\n    var current = regexpFlags(regexp), target = current\n    for (var i = 0; i < flags.length; i++) if (target.indexOf(flags.charAt(i)) == -1)\n      target += flags.charAt(i)\n    return current == target ? regexp : new RegExp(regexp.source, target)\n  }\n\n  function maybeMultiline(regexp) {\n    return /\\\\s|\\\\n|\\n|\\\\W|\\\\D|\\[\\^/.test(regexp.source)\n  }\n\n  function searchRegexpForward(doc, regexp, start) {\n    regexp = ensureFlags(regexp, \"g\")\n    for (var line = start.line, ch = start.ch, last = doc.lastLine(); line <= last; line++, ch = 0) {\n      regexp.lastIndex = ch\n      var string = doc.getLine(line), match = regexp.exec(string)\n      if (match)\n        return {from: Pos(line, match.index),\n                to: Pos(line, match.index + match[0].length),\n                match: match}\n    }\n  }\n\n  function searchRegexpForwardMultiline(doc, regexp, start) {\n    if (!maybeMultiline(regexp)) return searchRegexpForward(doc, regexp, start)\n\n    regexp = ensureFlags(regexp, \"gm\")\n    var string, chunk = 1\n    for (var line = start.line, last = doc.lastLine(); line <= last;) {\n      // This grows the search buffer in exponentially-sized chunks\n      // between matches, so that nearby matches are fast and don't\n      // require concatenating the whole document (in case we're\n      // searching for something that has tons of matches), but at the\n      // same time, the amount of retries is limited.\n      for (var i = 0; i < chunk; i++) {\n        if (line > last) break\n        var curLine = doc.getLine(line++)\n        string = string == null ? curLine : string + \"\\n\" + curLine\n      }\n      chunk = chunk * 2\n      regexp.lastIndex = start.ch\n      var match = regexp.exec(string)\n      if (match) {\n        var before = string.slice(0, match.index).split(\"\\n\"), inside = match[0].split(\"\\n\")\n        var startLine = start.line + before.length - 1, startCh = before[before.length - 1].length\n        return {from: Pos(startLine, startCh),\n                to: Pos(startLine + inside.length - 1,\n                        inside.length == 1 ? startCh + inside[0].length : inside[inside.length - 1].length),\n                match: match}\n      }\n    }\n  }\n\n  function lastMatchIn(string, regexp, endMargin) {\n    var match, from = 0\n    while (from <= string.length) {\n      regexp.lastIndex = from\n      var newMatch = regexp.exec(string)\n      if (!newMatch) break\n      var end = newMatch.index + newMatch[0].length\n      if (end > string.length - endMargin) break\n      if (!match || end > match.index + match[0].length)\n        match = newMatch\n      from = newMatch.index + 1\n    }\n    return match\n  }\n\n  function searchRegexpBackward(doc, regexp, start) {\n    regexp = ensureFlags(regexp, \"g\")\n    for (var line = start.line, ch = start.ch, first = doc.firstLine(); line >= first; line--, ch = -1) {\n      var string = doc.getLine(line)\n      var match = lastMatchIn(string, regexp, ch < 0 ? 0 : string.length - ch)\n      if (match)\n        return {from: Pos(line, match.index),\n                to: Pos(line, match.index + match[0].length),\n                match: match}\n    }\n  }\n\n  function searchRegexpBackwardMultiline(doc, regexp, start) {\n    if (!maybeMultiline(regexp)) return searchRegexpBackward(doc, regexp, start)\n    regexp = ensureFlags(regexp, \"gm\")\n    var string, chunkSize = 1, endMargin = doc.getLine(start.line).length - start.ch\n    for (var line = start.line, first = doc.firstLine(); line >= first;) {\n      for (var i = 0; i < chunkSize && line >= first; i++) {\n        var curLine = doc.getLine(line--)\n        string = string == null ? curLine : curLine + \"\\n\" + string\n      }\n      chunkSize *= 2\n\n      var match = lastMatchIn(string, regexp, endMargin)\n      if (match) {\n        var before = string.slice(0, match.index).split(\"\\n\"), inside = match[0].split(\"\\n\")\n        var startLine = line + before.length, startCh = before[before.length - 1].length\n        return {from: Pos(startLine, startCh),\n                to: Pos(startLine + inside.length - 1,\n                        inside.length == 1 ? startCh + inside[0].length : inside[inside.length - 1].length),\n                match: match}\n      }\n    }\n  }\n\n  var doFold, noFold\n  if (String.prototype.normalize) {\n    doFold = function(str) { return str.normalize(\"NFD\").toLowerCase() }\n    noFold = function(str) { return str.normalize(\"NFD\") }\n  } else {\n    doFold = function(str) { return str.toLowerCase() }\n    noFold = function(str) { return str }\n  }\n\n  // Maps a position in a case-folded line back to a position in the original line\n  // (compensating for codepoints increasing in number during folding)\n  function adjustPos(orig, folded, pos, foldFunc) {\n    if (orig.length == folded.length) return pos\n    for (var min = 0, max = pos + Math.max(0, orig.length - folded.length);;) {\n      if (min == max) return min\n      var mid = (min + max) >> 1\n      var len = foldFunc(orig.slice(0, mid)).length\n      if (len == pos) return mid\n      else if (len > pos) max = mid\n      else min = mid + 1\n    }\n  }\n\n  function searchStringForward(doc, query, start, caseFold) {\n    // Empty string would match anything and never progress, so we\n    // define it to match nothing instead.\n    if (!query.length) return null\n    var fold = caseFold ? doFold : noFold\n    var lines = fold(query).split(/\\r|\\n\\r?/)\n\n    search: for (var line = start.line, ch = start.ch, last = doc.lastLine() + 1 - lines.length; line <= last; line++, ch = 0) {\n      var orig = doc.getLine(line).slice(ch), string = fold(orig)\n      if (lines.length == 1) {\n        var found = string.indexOf(lines[0])\n        if (found == -1) continue search\n        var start = adjustPos(orig, string, found, fold) + ch\n        return {from: Pos(line, adjustPos(orig, string, found, fold) + ch),\n                to: Pos(line, adjustPos(orig, string, found + lines[0].length, fold) + ch)}\n      } else {\n        var cutFrom = string.length - lines[0].length\n        if (string.slice(cutFrom) != lines[0]) continue search\n        for (var i = 1; i < lines.length - 1; i++)\n          if (fold(doc.getLine(line + i)) != lines[i]) continue search\n        var end = doc.getLine(line + lines.length - 1), endString = fold(end), lastLine = lines[lines.length - 1]\n        if (endString.slice(0, lastLine.length) != lastLine) continue search\n        return {from: Pos(line, adjustPos(orig, string, cutFrom, fold) + ch),\n                to: Pos(line + lines.length - 1, adjustPos(end, endString, lastLine.length, fold))}\n      }\n    }\n  }\n\n  function searchStringBackward(doc, query, start, caseFold) {\n    if (!query.length) return null\n    var fold = caseFold ? doFold : noFold\n    var lines = fold(query).split(/\\r|\\n\\r?/)\n\n    search: for (var line = start.line, ch = start.ch, first = doc.firstLine() - 1 + lines.length; line >= first; line--, ch = -1) {\n      var orig = doc.getLine(line)\n      if (ch > -1) orig = orig.slice(0, ch)\n      var string = fold(orig)\n      if (lines.length == 1) {\n        var found = string.lastIndexOf(lines[0])\n        if (found == -1) continue search\n        return {from: Pos(line, adjustPos(orig, string, found, fold)),\n                to: Pos(line, adjustPos(orig, string, found + lines[0].length, fold))}\n      } else {\n        var lastLine = lines[lines.length - 1]\n        if (string.slice(0, lastLine.length) != lastLine) continue search\n        for (var i = 1, start = line - lines.length + 1; i < lines.length - 1; i++)\n          if (fold(doc.getLine(start + i)) != lines[i]) continue search\n        var top = doc.getLine(line + 1 - lines.length), topString = fold(top)\n        if (topString.slice(topString.length - lines[0].length) != lines[0]) continue search\n        return {from: Pos(line + 1 - lines.length, adjustPos(top, topString, top.length - lines[0].length, fold)),\n                to: Pos(line, adjustPos(orig, string, lastLine.length, fold))}\n      }\n    }\n  }\n\n  function SearchCursor(doc, query, pos, options) {\n    this.atOccurrence = false\n    this.afterEmptyMatch = false\n    this.doc = doc\n    pos = pos ? doc.clipPos(pos) : Pos(0, 0)\n    this.pos = {from: pos, to: pos}\n\n    var caseFold\n    if (typeof options == \"object\") {\n      caseFold = options.caseFold\n    } else { // Backwards compat for when caseFold was the 4th argument\n      caseFold = options\n      options = null\n    }\n\n    if (typeof query == \"string\") {\n      if (caseFold == null) caseFold = false\n      this.matches = function(reverse, pos) {\n        return (reverse ? searchStringBackward : searchStringForward)(doc, query, pos, caseFold)\n      }\n    } else {\n      query = ensureFlags(query, \"gm\")\n      if (!options || options.multiline !== false)\n        this.matches = function(reverse, pos) {\n          return (reverse ? searchRegexpBackwardMultiline : searchRegexpForwardMultiline)(doc, query, pos)\n        }\n      else\n        this.matches = function(reverse, pos) {\n          return (reverse ? searchRegexpBackward : searchRegexpForward)(doc, query, pos)\n        }\n    }\n  }\n\n  SearchCursor.prototype = {\n    findNext: function() {return this.find(false)},\n    findPrevious: function() {return this.find(true)},\n\n    find: function(reverse) {\n      var head = this.doc.clipPos(reverse ? this.pos.from : this.pos.to);\n      if (this.afterEmptyMatch && this.atOccurrence) {\n        // do not return the same 0 width match twice\n        head = Pos(head.line, head.ch)\n        if (reverse) {\n          head.ch--;\n          if (head.ch < 0) {\n            head.line--;\n            head.ch = (this.doc.getLine(head.line) || \"\").length;\n          }\n        } else {\n          head.ch++;\n          if (head.ch > (this.doc.getLine(head.line) || \"\").length) {\n            head.ch = 0;\n            head.line++;\n          }\n        }\n        if (CodeMirror.cmpPos(head, this.doc.clipPos(head)) != 0) {\n           return this.atOccurrence = false\n        }\n      }\n      var result = this.matches(reverse, head)\n      this.afterEmptyMatch = result && CodeMirror.cmpPos(result.from, result.to) == 0\n\n      if (result) {\n        this.pos = result\n        this.atOccurrence = true\n        return this.pos.match || true\n      } else {\n        var end = Pos(reverse ? this.doc.firstLine() : this.doc.lastLine() + 1, 0)\n        this.pos = {from: end, to: end}\n        return this.atOccurrence = false\n      }\n    },\n\n    from: function() {if (this.atOccurrence) return this.pos.from},\n    to: function() {if (this.atOccurrence) return this.pos.to},\n\n    replace: function(newText, origin) {\n      if (!this.atOccurrence) return\n      var lines = CodeMirror.splitLines(newText)\n      this.doc.replaceRange(lines, this.pos.from, this.pos.to, origin)\n      this.pos.to = Pos(this.pos.from.line + lines.length - 1,\n                        lines[lines.length - 1].length + (lines.length == 1 ? this.pos.from.ch : 0))\n    }\n  }\n\n  CodeMirror.defineExtension(\"getSearchCursor\", function(query, pos, caseFold) {\n    return new SearchCursor(this.doc, query, pos, caseFold)\n  })\n  CodeMirror.defineDocExtension(\"getSearchCursor\", function(query, pos, caseFold) {\n    return new SearchCursor(this, query, pos, caseFold)\n  })\n\n  CodeMirror.defineExtension(\"selectMatches\", function(query, caseFold) {\n    var ranges = []\n    var cur = this.getSearchCursor(query, this.getCursor(\"from\"), caseFold)\n    while (cur.findNext()) {\n      if (CodeMirror.cmpPos(cur.to(), this.getCursor(\"to\")) > 0) break\n      ranges.push({anchor: cur.from(), head: cur.to()})\n    }\n    if (ranges.length)\n      this.setSelections(ranges, 0)\n  })\n});\n"],"names":["mod","CodeMirror","doFold","noFold","Pos","ensureFlags","regexp","flags","current","ignoreCase","global","multiline","target","i","length","indexOf","charAt","RegExp","source","maybeMultiline","test","searchRegexpForward","doc","start","line","ch","last","lastLine","lastIndex","string","getLine","match","exec","from","index","to","lastMatchIn","endMargin","newMatch","end","searchRegexpBackward","first","firstLine","adjustPos","orig","folded","pos","foldFunc","min","max","Math","mid","len","slice","SearchCursor","query","options","caseFold","atOccurrence","afterEmptyMatch","clipPos","matches","reverse","fold","lines","split","search","found","lastIndexOf","top","topString","cutFrom","endString","chunkSize","curLine","before","inside","startLine","startCh","chunk","String","prototype","normalize","str","toLowerCase","findNext","find","findPrevious","head","cmpPos","result","replace","newText","origin","splitLines","replaceRange","defineExtension","defineDocExtension","ranges","cur","getSearchCursor","getCursor","push","anchor","setSelections","__webpack_require__"],"sourceRoot":""}