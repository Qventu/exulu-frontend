{"version":3,"file":"static/chunks/2291.a4ac68253afb8a2c.js","mappings":"uJCEAA,IAAAC,UAAqB,WDArBC,IACA,IAAAC,EAAmB,GAAAC,EAAAC,EAAA,EAAY,CAC/BC,cAAAC,GAAAA,EAAAC,QAAA,CAAiDJ,EAAAK,EAAS,EAC1DC,SAAkBN,EAAAO,EAAQ,CAC1BC,WAAoBR,EAAAS,EAAU,CAC9BC,aAAA,CAAwBC,QAAAb,EAAAa,OAAA,CACxB,GACA,OACAb,OAAAA,EACAc,WAAAb,EAAAa,UAAA,CACAC,MAAAd,EAAAc,KAAA,CACAC,OAAcC,EAAAC,CAAA,CACdC,cAAA,aACAC,KAAA,QACAC,YAAA,IACAC,cAAA,CACAC,MAAA,WACAC,QAAA,QACA,CACA,CACA,0DEtBe,SAAAR,EAAAS,CAAA,CAAAC,CAAA,EACf,IAAAC,EAAAC,EACA,IAAYC,OAAAA,CAAA,CAAAC,YAAAA,CAAA,EAAsBL,EAIlC,OAAAM,CAHA,GAAAF,IAAAA,EAAAG,MAAA,CAEAH,EAAAI,EAAA,cAAAN,CAAAA,EAAA,KAAAR,aAAA,GAAAQ,KAAA,IAAAA,EAAA,OAAAA,EAAAO,IAAA,CAAAR,EAAA,OADAI,CACA,GACA,YAAAF,CAAAA,EAAA,KAAA5B,MAAA,GAAA4B,KAAA,IAAAA,EAAA,OAAAA,EAAAO,UAAA,KACA","sources":["webpack://_N_E/./node_modules/codemirror-graphql/esm/utils/mode-factory.js","webpack://_N_E/./node_modules/codemirror-graphql/esm/mode.js","webpack://_N_E/./node_modules/codemirror-graphql/esm/utils/mode-indent.js"],"sourcesContent":["import { LexRules, ParseRules, isIgnored, onlineParser, } from 'graphql-language-service';\nimport indent from './mode-indent';\nconst graphqlModeFactory = config => {\n    const parser = onlineParser({\n        eatWhitespace: stream => stream.eatWhile(isIgnored),\n        lexRules: LexRules,\n        parseRules: ParseRules,\n        editorConfig: { tabSize: config.tabSize },\n    });\n    return {\n        config,\n        startState: parser.startState,\n        token: parser.token,\n        indent,\n        electricInput: /^\\s*[})\\]]/,\n        fold: 'brace',\n        lineComment: '#',\n        closeBrackets: {\n            pairs: '()[]{}\"\"',\n            explode: '()[]{}',\n        },\n    };\n};\nexport default graphqlModeFactory;\n//# sourceMappingURL=mode-factory.js.map","import CodeMirror from 'codemirror';\nimport modeFactory from './utils/mode-factory';\nCodeMirror.defineMode('graphql', modeFactory);\n//# sourceMappingURL=mode.js.map","export default function indent(state, textAfter) {\n    var _a, _b;\n    const { levels, indentLevel } = state;\n    const level = !levels || levels.length === 0\n        ? indentLevel\n        : levels.at(-1) - (((_a = this.electricInput) === null || _a === void 0 ? void 0 : _a.test(textAfter)) ? 1 : 0);\n    return (level || 0) * (((_b = this.config) === null || _b === void 0 ? void 0 : _b.indentUnit) || 0);\n}\n//# sourceMappingURL=mode-indent.js.map"],"names":["codemirror_default","defineMode","config","parser","esm","Xs","eatWhitespace","stream","eatWhile","WU","lexRules","nW","parseRules","kh","editorConfig","tabSize","startState","token","indent","mode_indent","Z","electricInput","fold","lineComment","closeBrackets","pairs","explode","state","textAfter","_a","_b","levels","indentLevel","level","length","at","test","indentUnit"],"sourceRoot":""}