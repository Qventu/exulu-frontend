"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[6373],{62869:function(n,t,e){e.d(t,{d:function(){return s},z:function(){return d}});var r=e(57437),i=e(37053),u=e(90535),o=e(2265),a=e(94508);let s=(0,u.j)("inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50",{variants:{variant:{default:"bg-primary text-primary-foreground hover:bg-primary/90",destructive:"bg-destructive text-destructive-foreground hover:bg-destructive/90",outline:"border border-input bg-background hover:bg-accent hover:text-accent-foreground",secondary:"bg-secondary text-secondary-foreground hover:bg-secondary/80",ghost:"hover:bg-accent hover:text-accent-foreground",link:"text-primary underline-offset-4 hover:underline"},size:{default:"h-10 px-4 py-2",sm:"h-9 rounded-md px-3",lg:"h-11 rounded-md px-8",icon:"size-10"}},defaultVariants:{variant:"default",size:"default"}}),d=o.forwardRef((n,t)=>{let{className:e,variant:u,size:o,asChild:d=!1,...c}=n,l=d?i.g7:"button";return(0,r.jsx)(l,{className:(0,a.cn)(s({variant:u,size:o,className:e})),ref:t,...c})});d.displayName="Button"},94508:function(n,t,e){e.d(t,{cn:function(){return u}});var r=e(61994),i=e(53335);function u(){for(var n=arguments.length,t=Array(n),e=0;e<n;e++)t[e]=arguments[e];return(0,i.m6)((0,r.W)(t))}},27689:function(n,t,e){e.d(t,{$6:function(){return tG},$W:function(){return en},A1:function(){return n4},Ak:function(){return tz},Az:function(){return tj},B4:function(){return el},B_:function(){return tx},Dt:function(){return tP},E3:function(){return tA},Ep:function(){return eg},Eq:function(){return tn},GJ:function(){return n1},Hk:function(){return tQ},JL:function(){return ta},JM:function(){return tS},Jq:function(){return eo},L5:function(){return tw},MU:function(){return ti},Md:function(){return nH},Mh:function(){return t2},Mp:function(){return tq},N:function(){return to},Nu:function(){return ef},OP:function(){return e$},P3:function(){return n2},Pe:function(){return tm},QW:function(){return ec},Qf:function(){return tk},RV:function(){return t5},S9:function(){return tb},Tj:function(){return tF},Ts:function(){return t8},Ul:function(){return ty},W6:function(){return tN},W9:function(){return tl},Wc:function(){return nK},Wr:function(){return ea},YH:function(){return tV},Yr:function(){return tX},ZX:function(){return tg},Zy:function(){return tO},_J:function(){return tU},as:function(){return tc},b2:function(){return tZ},bI:function(){return tu},ci:function(){return tD},d5:function(){return tK},dc:function(){return n6},eY:function(){return tC},fA:function(){return ep},fB:function(){return tp},fG:function(){return tB},fM:function(){return tM},fV:function(){return n3},fc:function(){return es},fo:function(){return td},hx:function(){return t3},i9:function(){return er},iA:function(){return t7},iC:function(){return ed},j9:function(){return tW},jL:function(){return tH},jm:function(){return t4},k9:function(){return eu},kH:function(){return tI},kZ:function(){return tJ},kk:function(){return tE},kp:function(){return tY},l1:function(){return ts},lU:function(){return tR},lW:function(){return t6},lk:function(){return tf},mN:function(){return te},oo:function(){return ei},ps:function(){return n7},qK:function(){return tv},r1:function(){return tr},rR:function(){return t_},s5:function(){return ee},tK:function(){return tT},tO:function(){return n8},ty:function(){return tt},ui:function(){return th},uw:function(){return n5},vP:function(){return et},ve:function(){return t$},ym:function(){return n9}});var r=e(45008),i=e(70080);function u(){let n=(0,r._)(['\n  query GetAgents(\n    $page: Int!\n    $limit: Int!\n    $filters: [FilterAgent]\n    $sort: SortBy = { field: "updatedAt", direction: DESC }\n  ) {\n    agentsPagination(\n      page: $page\n      limit: $limit\n      sort: $sort\n      filters: $filters\n    ) {\n      pageInfo {\n        pageCount\n        itemCount\n        currentPage\n        hasPreviousPage\n        hasNextPage\n      }\n      items {\n        ',"\n      }\n    }\n  }\n"]);return u=function(){return n},n}function o(){let n=(0,r._)(['\n  query GetAgentSessions(\n    $page: Int!\n    $limit: Int!\n    $filters: [FilterAgent_session]\n    $sort: SortBy = { field: "updatedAt", direction: DESC }\n  ) {\n    agent_sessionsPagination(\n      page: $page\n      limit: $limit\n      sort: $sort\n      filters: $filters\n    ) {\n      pageInfo {\n        pageCount\n        itemCount\n        currentPage\n        hasPreviousPage\n        hasNextPage\n      }\n      items {\n          createdAt\n          updatedAt\n          user\n          title\n          agent\n          rights_mode\n          RBAC {\n            type\n            users {\n              id\n              rights\n            }\n            roles {\n              id\n              rights\n            }\n            projects {\n              id\n              rights\n            }\n          }\n          id\n      }\n    }\n  }\n']);return o=function(){return n},n}function a(){let n=(0,r._)(["\n  query GetContexts {\n    contexts {\n      items {\n        ","\n      }\n    }\n  }\n"]);return a=function(){return n},n}function s(){let n=(0,r._)(["\n  query GetContextById($id: ID!) {\n    contextById(id: $id) {\n      ","\n    }\n  }\n"]);return s=function(){return n},n}function d(){let n=(0,r._)(["\n    query ","Pagination($page: Int!, $limit: Int!, $filters: [Filter",'_items], $sort: SortBy = { field: "updatedAt", direction: DESC }) {\n      ',"","(page: $page, limit: $limit, filters: $filters, sort: $sort) {\n        pageInfo {\n          pageCount\n          itemCount\n          currentPage\n          hasPreviousPage\n          hasNextPage\n        }\n        items {\n          ","\n        }\n      }\n    }\n  "]);return d=function(){return n},n}function c(){let n=(0,r._)(["\n    mutation ProcessItemField","($item: ID!, $field: ","_itemsProcessorFieldEnum!) {\n      ","_itemsProcessItemField(item: $item, field: $field) {\n        message\n        result\n        job\n      }\n    }\n  "]);return c=function(){return n},n}function l(){let n=(0,r._)(["\n    query ","ById($id: ID!) {\n      ","_itemsById(id: $id) {\n        ","\n        ","\n      }\n    }\n  "]);return l=function(){return n},n}function f(){let n=(0,r._)(["\n    mutation CreateOne","($input: ","_itemsInput!) {\n      ","_itemsCreateOne(input: $input) {\n        item {\n          id\n        }\n        job\n      }\n    }\n  "]);return f=function(){return n},n}function m(){let n=(0,r._)(["\n    mutation DeleteChunks","($where: [Filter","_items]) {\n      ","_itemsDeleteChunks(where: $where) {\n        items\n        jobs\n      }\n    }\n  "]);return m=function(){return n},n}function $(){let n=(0,r._)(["\n    mutation GenerateChunks","($where: [Filter","_items]) {\n      ","_itemsGenerateChunks(where: $where) {\n        items\n        jobs\n      }\n    }\n  "]);return $=function(){return n},n}function g(){let n=(0,r._)(["\n    mutation UpdateOneById","($id: ID!, $input: ","_itemsInput!) {\n      ","_itemsUpdateOneById(id: $id, input: $input) {\n        item {\n          id\n        }\n        job\n      }\n    }\n  "]);return g=function(){return n},n}function p(){let n=(0,r._)(["\n    mutation DeleteOneById","($id: ID!) {\n      ","_itemsRemoveOneById(id: $id) {\n        id\n        ","\n      }\n    }\n  "]);return p=function(){return n},n}function _(){let n=(0,r._)(["\n  mutation UpdateAgentSessionRbac(\n    $id: ID!\n    $RBAC: RBACInput\n    $rights_mode: String\n  ) {\n    agent_sessionsUpdateOneById(id: $id, input: { rights_mode: $rights_mode, RBAC: $RBAC }) {\n      item {\n        id\n      }\n    }\n  }\n"]);return _=function(){return n},n}function y(){let n=(0,r._)(["\n  mutation UpdateAgentSessionProject(\n    $id: ID!\n    $project: String\n  ) {\n    agent_sessionsUpdateOneById(id: $id, input: {project: $project}) {\n      item {\n        id\n      }\n    }\n  }\n"]);return y=function(){return n},n}function P(){let n=(0,r._)(["\n  mutation UpdateAgentSessionTitle(\n    $id: ID!\n    $title: String\n  ) {\n    agent_sessionsUpdateOneById(id: $id, input: {title: $title}) {\n      item {\n        id\n        title\n      }\n    }\n  }\n"]);return P=function(){return n},n}function I(){let n=(0,r._)(['\n  query GetAgentSessionMessages(\n    $page: Int!\n    $limit: Int!\n    $filters: [FilterAgent_message]\n    $sort: SortBy = { field: "createdAt", direction: ASC }\n  ) {\n    agent_messagesPagination(\n      page: $page\n      limit: $limit\n      sort: $sort\n      filters: $filters\n    ) {\n      pageInfo {\n        pageCount\n        itemCount\n        currentPage\n        hasPreviousPage\n        hasNextPage\n      }\n      items {\n        id\n        session\n        content\n        createdAt\n      }\n    }\n  }\n']);return I=function(){return n},n}function v(){let n=(0,r._)(['\n  query GetJobResults(\n    $page: Int!\n    $limit: Int!\n    $filters: [FilterJob_result]\n    $sort: SortBy = {\n      field: "createdAt",\n      direction: DESC\n    }\n  ) {\n    job_resultsPagination(\n      page: $page\n      limit: $limit\n      sort: $sort\n      filters: $filters\n    ) {\n      items {\n        job_id\n        state\n        error\n        label\n        result\n        metadata\n        createdAt\n        updatedAt\n        id\n      }\n      pageInfo {\n        pageCount\n        itemCount\n        currentPage\n        hasPreviousPage\n        hasNextPage\n      }\n    }\n  }\n']);return v=function(){return n},n}function h(){let n=(0,r._)(["\n  query GetUserRoles($page: Int!, $limit: Int!) {\n    rolesPagination(page: $page, limit: $limit) {\n      pageInfo {\n        pageCount\n        itemCount\n        currentPage\n        hasPreviousPage\n        hasNextPage\n      }\n      items {\n        id\n        createdAt\n        updatedAt\n        agents\n        workflows\n        api\n        variables\n        users\n        name\n      }\n    }\n  }\n"]);return h=function(){return n},n}function A(){let n=(0,r._)(["\n  query GetUsers(\n    $page: Int!\n    $limit: Int!\n    $filters: [FilterUser]\n    $sort: SortBy\n  ) {\n    usersPagination(page: $page, limit: $limit, filters: $filters, sort: $sort) {\n      pageInfo {\n        pageCount\n        itemCount\n        currentPage\n        hasPreviousPage\n        hasNextPage\n      }\n      items {\n        id\n        name\n        firstname\n        lastname\n        email\n        last_used\n        createdAt\n        type\n        apikey\n        emailVerified\n        anthropic_token\n        super_admin\n        role\n      }\n    }\n  }\n"]);return A=function(){return n},n}function C(){let n=(0,r._)(["\n  query GetUserRoleById($id: ID!) {\n    roleById(id: $id) {\n      id\n      name\n      agents\n      workflows\n      api\n      variables\n      users\n      createdAt\n      updatedAt\n    }\n  }\n"]);return C=function(){return n},n}function S(){let n=(0,r._)(["\n  query GetJobResultById($id: ID!) {\n    job_resultById(id: $id) {\n        id\n        job_id\n        state\n        error\n        label\n        result\n        metadata\n        createdAt\n        updatedAt\n    }\n  }\n"]);return S=function(){return n},n}function B(){let n=(0,r._)(["\n  query GetAgentById($id: ID!) {\n    agentById(id: $id) {\n      ","\n    }\n  }\n"]);return B=function(){return n},n}function b(){let n=(0,r._)(["\n  query GetAgentsByIds($ids: [ID!]!) {\n    agentByIds(ids: $ids) {\n      ","\n    }\n  }\n"]);return b=function(){return n},n}function j(){let n=(0,r._)(["\n  query GetAgentSessionById($id: ID!) {\n    agent_sessionById(id: $id) {\n        createdAt\n        updatedAt\n        user\n        title\n        agent\n        created_by\n        rights_mode\n        RBAC {\n          type\n          users {\n            id\n            rights\n          }\n          roles {\n            id\n            rights\n          }\n          projects {\n            id\n            rights\n          }\n        }\n        id\n    }\n  }\n"]);return j=function(){return n},n}function k(){let n=(0,r._)(["\n  query GetAgentSession($filters: [FilterAgent_session]) {\n    agent_sessionOne(filters: $filters) {\n        createdAt\n        updatedAt\n        user\n        title\n        agent\n        id\n    }\n  }\n"]);return k=function(){return n},n}function D(){let n=(0,r._)(["\n    mutation UpdateUser(\n      $email: String,\n      $firstname: String,\n      $anthropic_token: String,\n      $super_admin: Boolean,\n      $lastname: String,\n      $role: String,\n      $favourite_agents: JSON,\n      $id: ID!\n     ) {\n        usersUpdateOneById(id: $id, input: {\n            email: $email,\n            firstname: $firstname,\n            anthropic_token: $anthropic_token,\n            super_admin: $super_admin,\n            lastname: $lastname,\n            role: $role,\n            favourite_agents: $favourite_agents\n        }) {\n          item {\n            ","\n          }\n        }\n    }\n"]);return D=function(){return n},n}function R(){let n=(0,r._)(["\n    mutation CreateUser(\n      $firstname: String,\n      $type: String,\n      $apikey: String,\n      $email: String,\n      $role: String\n     ) {\n      usersCreateOne(input: {\n            firstname: $firstname,\n            type: $type,\n            apikey: $apikey,\n            email: $email,\n            role: $role\n        }) {\n            item {\n              id\n            }\n        }\n    }\n"]);return R=function(){return n},n}function q(){let n=(0,r._)(["\n  mutation UpdateUserRole(\n    $id: ID!\n    $name: String\n    $agents: String\n    $workflows: String\n    $api: String\n    $variables: String\n    $users: String\n  ) {\n    rolesUpdateOneById(\n      id: $id\n      input: {\n        name: $name\n        agents: $agents\n        workflows: $workflows\n        api: $api\n        variables: $variables\n        users: $users\n      }\n    ) {\n        item {\n          id\n          createdAt\n          agents\n          api\n          workflows\n          variables\n          users\n        }\n    }\n  }\n"]);return q=function(){return n},n}function w(){let n=(0,r._)(["\n   query GetUserByEmail($email: String!) {\n        userOne(filters: {email: $email}) {\n            ","\n        }\n    }\n"]);return w=function(){return n},n}function O(){let n=(0,r._)(["\n  mutation createAgentSession(\n    $title: String,\n    $user: Float\n    $agent: String\n    $project: String\n    $rights_mode: String\n    $RBAC: RBACInput\n  ) {\n    agent_sessionsCreateOne(\n      input: { agent: $agent, user: $user, title: $title, project: $project, rights_mode: $rights_mode, RBAC: $RBAC }\n    ) {\n      item {\n        id\n      }\n    }\n  }\n"]);return O=function(){return n},n}function x(){let n=(0,r._)(["\n  mutation createAgent(\n    $name: String!\n    $description: String!\n    $rights_mode: String!\n    $backend: String!\n    $image: String\n    $RBAC: RBACInput\n  ) {\n    agentsCreateOne(\n      input: {\n        name: $name\n        description: $description\n        rights_mode: $rights_mode\n        backend: $backend\n        image: $image\n        RBAC: $RBAC\n      }\n    ) {\n       item {\n        id\n        name\n        description\n        rights_mode\n        RBAC {\n          type\n          users {\n            id\n            rights\n          }\n          roles {\n            id\n            rights\n          }\n          projects {\n            id\n            rights\n          }\n        }\n        createdAt\n       }\n    }\n  }\n"]);return x=function(){return n},n}function U(){let n=(0,r._)(["\n  query GetTools {\n    tools {\n      items {\n        id\n        name\n        description\n        config\n        type\n      }\n    }\n  }\n"]);return U=function(){return n},n}function G(){let n=(0,r._)(["\n  mutation UpdateAgent(\n    $id: ID!\n    $name: String\n    $backend: String\n    $description: String\n    $instructions: String\n    $rights_mode: String\n    $category: String\n    $tools: JSON\n    $active: Boolean\n    $providerapikey: String\n    $RBAC: RBACInput\n  ) {\n    agentsUpdateOneById(\n      input: { \n        name: $name\n        backend: $backend\n        description: $description\n        category: $category\n        instructions: $instructions\n        rights_mode: $rights_mode\n        active: $active\n        tools: $tools\n        providerapikey: $providerapikey\n        RBAC: $RBAC\n      }\n      id: $id\n    ) {\n        item {\n          id\n          name\n          description\n          instructions\n          category\n          rights_mode\n          RBAC {\n            type\n            users {\n              id\n              rights\n            }\n            roles {\n              id\n              rights\n            }\n            projects {\n              id\n              rights\n            }\n          }\n        }\n    }\n  }\n"]);return G=function(){return n},n}function E(){let n=(0,r._)(["\n  mutation CreateUserRole($name: String!, $agents: String, $workflows: String, $variables: String, $users: String, $api: String) {\n    rolesCreateOne(input: { name: $name, agents: $agents, workflows: $workflows, variables: $variables, users: $users, api: $api}) {\n        item {\n          id\n          createdAt\n          agents\n          api\n          workflows\n          variables\n          users\n          name\n        }\n    }\n  }\n"]);return E=function(){return n},n}function N(){let n=(0,r._)(["\n  mutation CreateUser($email: String!, $password: String, $type: String, $emailVerified: String) {\n    usersCreateOne(input: { email: $email, password: $password, type: $type, emailVerified: $emailVerified }) {\n        item {\n          id\n          createdAt\n          emailVerified\n          type\n          name\n        }\n    }\n  }\n"]);return N=function(){return n},n}function F(){let n=(0,r._)(["\n  mutation ResetUserPassword($id: ID!, $password: String!) {\n    usersUpdateOneById(id: $id, input: { password: $password }) {\n      item {\n        id\n      }\n    }\n  }\n"]);return F=function(){return n},n}function J(){let n=(0,r._)(["\n  query GetProviders {\n    providers {\n      items {\n        id\n        name\n        description\n        provider\n        modelName\n        providerName\n      }\n    }\n  }\n"]);return J=function(){return n},n}function T(){let n=(0,r._)(["\n  mutation RemoveUserById($id: ID!) {\n    usersRemoveOneById(id: $id) {\n      id\n    }\n  }\n"]);return T=function(){return n},n}function Q(){let n=(0,r._)(["\n  mutation RemoveJobResultById($id: ID!) {\n    job_resultsRemoveOneById(id: $id) {\n      id\n    }\n  }\n"]);return Q=function(){return n},n}function W(){let n=(0,r._)(["\n  mutation RemoveUserRoleById($id: ID!) {\n    rolesRemoveOneById(id: $id) {\n      id\n    }\n  }\n"]);return W=function(){return n},n}function V(){let n=(0,r._)(["\n  mutation RemoveAgentById($id: ID!) {\n    agentsRemoveOneById(id: $id) {\n      id\n    }\n  }\n"]);return V=function(){return n},n}function L(){let n=(0,r._)(["\n  mutation RemoveAgentSessionById($id: ID!) {\n    agent_sessionsRemoveOneById(id: $id) {\n      id\n    }\n  }\n"]);return L=function(){return n},n}function M(){let n=(0,r._)(["\n  query GetJobStatistics($user: Float, $agent: String, $from: String, $to: String) {\n    jobStatistics(user: $user, agent: $agent, from: $from, to: $to) {\n      completedCount\n      failedCount\n      averageDuration\n    }\n  }\n"]);return M=function(){return n},n}function z(){let n=(0,r._)(['\n  query GetVariables(\n    $page: Int!\n    $limit: Int!\n    $filters: [FilterVariable]\n    $sort: SortBy = { field: "updatedAt", direction: DESC }\n  ) {\n    variablesPagination(\n      page: $page\n      limit: $limit\n      sort: $sort\n      filters: $filters\n    ) {\n      pageInfo {\n        pageCount\n        itemCount\n        currentPage\n        hasPreviousPage\n        hasNextPage\n      }\n      items {\n        id\n        name\n        value\n        encrypted\n        createdAt\n        updatedAt\n      }\n    }\n  }\n']);return z=function(){return n},n}function H(){let n=(0,r._)(["\n  query GetVariableById($id: ID!) {\n    variableById(id: $id) {\n      id\n      name\n      value\n      encrypted\n      createdAt\n      updatedAt\n    }\n  }\n"]);return H=function(){return n},n}function K(){let n=(0,r._)(["\n  mutation CreateVariable(\n    $name: String!\n    $value: String!\n    $encrypted: Boolean\n  ) {\n    variablesCreateOne(\n      input: {\n        name: $name\n        value: $value\n        encrypted: $encrypted\n      }\n    ) {\n      item {\n        id\n        name\n        value\n        encrypted\n        createdAt\n        updatedAt\n      }\n    }\n  }\n"]);return K=function(){return n},n}function Y(){let n=(0,r._)(["\n  mutation UpdateVariable(\n    $id: ID!\n    $name: String\n    $value: String\n    $encrypted: Boolean\n  ) {\n    variablesUpdateOneById(\n      id: $id\n      input: {\n        name: $name\n        value: $value\n        encrypted: $encrypted\n      }\n    ) {\n      id\n      name\n      value\n      encrypted\n      createdAt\n      updatedAt\n    }\n  }\n"]);return Y=function(){return n},n}function Z(){let n=(0,r._)(["\n  mutation RemoveVariableById($id: ID!) {\n    variablesRemoveOneById(id: $id) {\n      id\n    }\n  }\n"]);return Z=function(){return n},n}function X(){let n=(0,r._)(["\n  query GetUserById($id: ID!) {\n    userById(id: $id) {\n      id\n      name\n      firstname\n      lastname\n      email\n    }\n  }\n"]);return X=function(){return n},n}function nn(){let n=(0,r._)(['\n  query GetWorkflowTemplates(\n    $page: Int!\n    $limit: Int!\n    $filters: [FilterWorkflow_template]\n    $sort: SortBy = { field: "updatedAt", direction: DESC }\n  ) {\n    workflow_templatesPagination(\n      page: $page\n      limit: $limit\n      sort: $sort\n      filters: $filters\n    ) {\n      pageInfo {\n        pageCount\n        itemCount\n        currentPage\n        hasPreviousPage\n        hasNextPage\n      }\n      items {\n        id\n        name\n        description\n        owner\n        rights_mode\n        variables\n        steps_json\n        example_metadata_json\n        createdAt\n        updatedAt\n        RBAC {\n          type\n          users {\n            id\n            rights\n          }\n          roles {\n            id\n            rights\n          }\n          projects {\n            id\n            rights\n          }\n        }\n      }\n    }\n  }\n']);return nn=function(){return n},n}function nt(){let n=(0,r._)(["\n  query GetWorkflowTemplateById($id: ID!) {\n    workflow_templateById(id: $id) {\n      id\n      name\n      description\n      owner\n      rights_mode\n      variables\n      steps_json\n      example_metadata_json\n      createdAt\n      updatedAt\n    }\n  }\n"]);return nt=function(){return n},n}function ne(){let n=(0,r._)(["\n  mutation CreateWorkflowTemplate(\n    $name: String!\n    $description: String\n    $owner: Float!\n    $rights_mode: String!\n    $RBAC: RBACInput\n    $variables: JSON\n    $steps_json: JSON!\n    $example_metadata_json: JSON\n  ) {\n    workflow_templatesCreateOne(\n      input: {\n        name: $name\n        description: $description\n        owner: $owner\n        rights_mode: $rights_mode\n        RBAC: $RBAC\n        variables: $variables\n        steps_json: $steps_json\n        example_metadata_json: $example_metadata_json\n      }\n    ) {\n      id\n      name\n      description\n      owner\n      rights_mode\n      rights_mode\n      RBAC {\n        type\n        users {\n          id\n          rights\n        }\n        roles {\n          id\n          rights\n        }\n        projects {\n          id\n          rights\n        }\n      }\n      variables\n      steps_json\n      example_metadata_json\n      createdAt\n      updatedAt\n    }\n  }\n"]);return ne=function(){return n},n}function nr(){let n=(0,r._)(["\n  mutation UpdateWorkflowTemplate(\n    $id: ID!\n    $name: String\n    $description: String\n    $rights_mode: String\n    $RBAC: RBACInput\n    $variables: JSON\n    $steps_json: JSON\n    $example_metadata_json: JSON\n  ) {\n    workflow_templatesUpdateOneById(\n      id: $id\n      input: {\n        name: $name\n        description: $description\n        rights_mode: $rights_mode\n        RBAC: $RBAC\n        variables: $variables\n        steps_json: $steps_json\n        example_metadata_json: $example_metadata_json\n      }\n    ) {\n      id\n      name\n      description\n      owner\n      rights_mode\n      RBAC {\n        type\n        users {\n          id\n          rights\n        }\n        roles {\n          id\n          rights\n        }\n        projects {\n          id\n          rights\n        }\n      }\n      variables\n      steps_json\n      example_metadata_json\n      createdAt\n      updatedAt\n    }\n  }\n"]);return nr=function(){return n},n}function ni(){let n=(0,r._)(["\n  mutation RemoveWorkflowTemplateById($id: ID!) {\n    workflow_templatesRemoveOneById(id: $id) {\n      id\n    }\n  }\n"]);return ni=function(){return n},n}function nu(){let n=(0,r._)(["\n  query GetJobStatisticsEnhanced($user: Float, $agent: String, $from: String, $to: String) {\n    jobStatistics(user: $user, agent: $agent, from: $from, to: $to) {\n      runningCount\n      erroredCount\n      completedCount\n      failedCount\n      averageDuration\n    }\n  }\n"]);return nu=function(){return n},n}function no(){let n=(0,r._)(["\n  query AgentSessionsStatistics($from: Date!, $to: Date!) {\n    agent_sessionsStatistics(filters: {\n      createdAt: { and: [{ gte: $from }, { lte: $to }] }\n    }) {\n      group\n      count\n    }\n  }\n"]);return no=function(){return n},n}function na(){let n=(0,r._)(['\n  query WorkflowRunsStatistics($from: Date!, $to: Date!) {\n    jobsStatistics(filters: {\n      type: { eq: "workflow" }\n      createdAt: { and: [{ gte: $from }, { lte: $to }] }\n    }) {\n      group\n      count\n    }\n  }\n']);return na=function(){return n},n}function ns(){let n=(0,r._)(['\n  query EmbeddingJobsStatistics($from: Date!, $to: Date!) {\n    jobsStatistics(filters: {\n      type: { eq: "embedder" }\n      createdAt: { and: [{ gte: $from }, { lte: $to }] }\n    }) {\n      group\n      count\n    }\n  }\n']);return ns=function(){return n},n}function nd(){let n=(0,r._)(["\n  query FunctionCallsStatistics($from: Date!, $to: Date!) {\n    trackingStatistics(filters: {\n      type: { eq: TOOL_CALL }\n      createdAt: { and: [{ gte: $from }, { lte: $to }] }\n    }) {\n      group\n      count\n    }\n  }\n"]);return nd=function(){return n},n}function nc(){let n=(0,r._)(['  \n  query AgentCallsStatistics($from: Date!, $to: Date!) {\n    trackingStatistics(filters: {\n      type: { eq: AGENT_RUN }\n      name: { eq: "count" }\n      createdAt: { and: [{ gte: $from }, { lte: $to }] }\n    }) {\n      group\n      count\n    }\n  }\n']);return nc=function(){return n},n}function nl(){let n=(0,r._)(['  \n  query AgentCallsStatistics($from: Date!, $to: Date!) {\n    trackingStatistics(filters: {\n      name: { in: ["inputTokens", "outputTokens"] }\n      createdAt: { and: [{ gte: $from }, { lte: $to }] }\n    }) {\n      group\n      count\n    }\n  }\n']);return nl=function(){return n},n}function nf(){let n=(0,r._)(['\n  query TimeSeriesStatistics($type: typeEnum!, $from: Date!, $to: Date!) {\n    trackingStatistics(\n      groupBy: "createdAt"\n      filters: {\n        type: { eq: $type }\n        createdAt: { and: [{ gte: $from }, { lte: $to }] }\n      }\n    ) {\n      group\n      count\n    }\n  }\n']);return nf=function(){return n},n}function nm(){let n=(0,r._)(["\n  query DonutStatistics($type: typeEnum!, $groupBy: String!, $from: Date!, $to: Date!) {\n    trackingStatistics(\n      groupBy: $groupBy\n      filters: {\n        type: { eq: $type }\n        createdAt: { and: [{ gte: $from }, { lte: $to }] }\n      }\n    ) {\n      group\n      count\n    }\n  }\n"]);return nm=function(){return n},n}function n$(){let n=(0,r._)(['\n  query GetProjects(\n    $page: Int!\n    $limit: Int!\n    $filters: [FilterProject]\n    $sort: SortBy = { field: "updatedAt", direction: DESC }\n  ) {\n    projectsPagination(\n      page: $page\n      limit: $limit\n      sort: $sort\n      filters: $filters\n    ) {\n      pageInfo {\n        pageCount\n        itemCount\n        currentPage\n        hasPreviousPage\n        hasNextPage\n      }\n      items {\n        ',"\n      }\n    }\n  }\n"]);return n$=function(){return n},n}function ng(){let n=(0,r._)(["\n  query GetProjectsByIds($ids: [ID!]!) {\n    projectByIds(ids: $ids) {\n      ","\n    }\n  }\n"]);return ng=function(){return n},n}function np(){let n=(0,r._)(["\n  query GetProjectById($id: ID!) {\n    projectById(id: $id) {\n      ","\n    }\n  }\n"]);return np=function(){return n},n}function n_(){let n=(0,r._)(["\n  mutation UpdateUserFavouriteProjects($id: ID!, $favourite_projects: JSON) {\n    userUpdateById(input: { favourite_projects: $favourite_projects }, filter: { id: $id }) {\n      item {\n        id\n        favourite_projects\n      }\n    }\n  }\n"]);return n_=function(){return n},n}function ny(){let n=(0,r._)(["\n  mutation CreateProject($input: projectInput!) {\n    projectsCreateOne(input: $input) {\n      item {\n        ","\n      }\n    }\n  }\n"]);return ny=function(){return n},n}function nP(){let n=(0,r._)(["\n  mutation UpdateProject($id: ID!, $input: projectInput!) {\n    projectsUpdateOneById(id: $id, input: $input) {\n      item {\n        ","\n      }\n    }\n  }\n"]);return nP=function(){return n},n}function nI(){let n=(0,r._)(["\n  mutation DeleteProject($id: ID!) {\n    projectsRemoveOneById(id: $id) {\n      id\n      name\n    }\n  }\n"]);return nI=function(){return n},n}function nv(){let n=(0,r._)(["\n  query GetTestCases(\n    $page: Int!\n    $limit: Int!\n    $filters: [FilterTest_case]\n  ) {\n    test_casesPagination(page: $page, limit: $limit, filters: $filters) {\n      pageInfo {\n        pageCount\n        itemCount\n        currentPage\n        hasPreviousPage\n        hasNextPage\n      }\n      items {\n        ","\n      }\n    }\n  }\n"]);return nv=function(){return n},n}function nh(){let n=(0,r._)(["\n  query GetTestCaseById($id: ID!) {\n    test_caseById(id: $id) {\n      ","\n    }\n  }\n"]);return nh=function(){return n},n}function nA(){let n=(0,r._)(["\n  mutation CreateTestCase($data: test_caseInput!) {\n    test_casesCreateOne(input: $data) {\n      item {\n        ","\n      }\n    }\n  }\n"]);return nA=function(){return n},n}function nC(){let n=(0,r._)(["\n  mutation UpdateTestCase($id: ID!, $data: test_caseInput!) {\n    test_casesUpdateOneById(id: $id, input: $data) {\n      item {\n        ","\n      }\n    }\n  }\n"]);return nC=function(){return n},n}function nS(){let n=(0,r._)(["\n  mutation DeleteTestCase($id: ID!) {\n    test_casesRemoveOneById(id: $id) {\n      id\n      name\n    }\n  }\n"]);return nS=function(){return n},n}function nB(){let n=(0,r._)(["\n  query GetEvalSets(\n    $page: Int!\n    $limit: Int!\n    $filters: [FilterEval_set]\n  ) {\n    eval_setsPagination(page: $page, limit: $limit, filters: $filters) {\n      pageInfo {\n        pageCount\n        itemCount\n        currentPage\n        hasPreviousPage\n        hasNextPage\n      }\n      items {\n        ","\n      }\n    }\n  }\n"]);return nB=function(){return n},n}function nb(){let n=(0,r._)(["\n  query GetEvals {\n    evals {\n      items {\n        ","\n      }\n    }\n  }\n"]);return nb=function(){return n},n}function nj(){let n=(0,r._)(["\n  query GetEvalSetById($id: ID!) {\n    eval_setById(id: $id) {\n      ","\n    }\n  }\n"]);return nj=function(){return n},n}function nk(){let n=(0,r._)(["\n  mutation CreateEvalSet($data: eval_setInput!) {\n    eval_setsCreateOne(input: $data) {\n      item {\n        ","\n      }\n    }\n  }\n"]);return nk=function(){return n},n}function nD(){let n=(0,r._)(["\n  mutation UpdateEvalSet($id: ID!, $data: eval_setInput!) {\n    eval_setsUpdateOneById(id: $id, input: $data) {\n      item {\n        ","\n      }\n    }\n  }\n"]);return nD=function(){return n},n}function nR(){let n=(0,r._)(["\n  mutation DeleteEvalSet($id: ID!) {\n    eval_setsRemoveOneById(id: $id) {\n      id\n      name\n    }\n  }\n"]);return nR=function(){return n},n}function nq(){let n=(0,r._)(["\n  query GetEvalRuns(\n    $page: Int!\n    $limit: Int!\n    $filters: [FilterEval_run]\n  ) {\n    eval_runsPagination(page: $page, limit: $limit, filters: $filters) {\n      pageInfo {\n        pageCount\n        itemCount\n        currentPage\n        hasPreviousPage\n        hasNextPage\n      }\n      items {\n        ","\n      }\n    }\n  }\n"]);return nq=function(){return n},n}function nw(){let n=(0,r._)(["\n  query GetEvalRunById($id: ID!) {\n    eval_runById(id: $id) {\n      ","\n    }\n  }\n"]);return nw=function(){return n},n}function nO(){let n=(0,r._)(["\n  mutation CreateEvalRun($data: eval_runInput!) {\n    eval_runsCreateOne(input: $data) {\n      item {\n        ","\n      }\n    }\n  }\n"]);return nO=function(){return n},n}function nx(){let n=(0,r._)(["\n  query GetQueue($queue: QueueEnum!) {\n    queue(queue: $queue) {\n      name\n      concurrency\n      ratelimit\n      isMaxed\n      isPaused\n      jobs {\n        paused\n        completed\n        failed\n        waiting\n        active\n        delayed\n      }\n    }\n  }\n"]);return nx=function(){return n},n}function nU(){let n=(0,r._)(["\n  query GetJobs($queue: QueueEnum!, $statusses: [JobStateEnum!]) {\n    jobs(queue: $queue, statusses: $statusses) {\n      items {\n        name\n        id\n        returnvalue\n        stacktrace\n        failedReason\n        state\n        data\n        timestamp\n      }\n      pageInfo {\n        pageCount\n        itemCount\n        currentPage\n        hasPreviousPage\n        hasNextPage\n      }\n    }\n  }\n"]);return nU=function(){return n},n}function nG(){let n=(0,r._)(["\n  mutation DeleteJob($queue: QueueEnum!, $id: String!) {\n    deleteJob(queue: $queue, id: $id) {\n      success\n    }\n  }\n"]);return nG=function(){return n},n}function nE(){let n=(0,r._)(["\n  mutation PauseQueue($queue: QueueEnum!) {\n    pauseQueue(queue: $queue) {\n      success\n    }\n  }\n"]);return nE=function(){return n},n}function nN(){let n=(0,r._)(["\n  mutation ResumeQueue($queue: QueueEnum!) {\n    resumeQueue(queue: $queue) {\n      success\n    }\n  }\n"]);return nN=function(){return n},n}function nF(){let n=(0,r._)(["\n  mutation DrainQueue($queue: QueueEnum!) {\n    drainQueue(queue: $queue) {\n      success\n    }\n  }\n"]);return nF=function(){return n},n}function nJ(){let n=(0,r._)(["\n  mutation RunEval($id: ID!) {\n    runEval(id: $id) {\n      jobs\n      count\n    }\n  }\n"]);return nJ=function(){return n},n}function nT(){let n=(0,r._)(["\n  mutation UpdateEvalRun($id: ID!, $data: eval_runInput!) {\n    eval_runsUpdateOneById(id: $id, input: $data) {\n      item {\n        ","\n      }\n    }\n  }\n"]);return nT=function(){return n},n}function nQ(){let n=(0,r._)(["\n  mutation DeleteEvalRun($id: ID!) {\n    eval_runsRemoveOneById(id: $id) {\n      id\n    }\n  }\n"]);return nQ=function(){return n},n}function nW(){let n=(0,r._)(["\n  query GetPlatformConfigurations {\n    platform_configurationsPagination {\n      pageInfo {\n        pageCount\n        itemCount\n        currentPage\n        hasPreviousPage\n        hasNextPage\n      }\n      items {\n        ","\n      }\n    }\n  }\n"]);return nW=function(){return n},n}function nV(){let n=(0,r._)(["\n  query GetPlatformConfigurationByKey($config_key: FilterOperatorString!) {\n    platform_configurationsPagination(page: 1, limit: 1, filters: { config_key: $config_key }) {\n      pageInfo {\n        pageCount\n        itemCount\n        currentPage\n        hasPreviousPage\n        hasNextPage\n      }\n      items {\n        ","\n      }\n    }\n  }\n"]);return nV=function(){return n},n}function nL(){let n=(0,r._)(["\n  mutation CreatePlatformConfiguration($data: platform_configurationInput!) {\n    platform_configurationsCreateOne(input: $data) {\n      item {\n        ","\n      }\n    }\n  }\n"]);return nL=function(){return n},n}function nM(){let n=(0,r._)(["\n  mutation UpdatePlatformConfiguration($id: ID!, $data: platform_configurationInput!) {\n    platform_configurationsUpdateOneById(id: $id, input: $data) {\n      item {\n        ","\n      }\n    }\n  }\n"]);return nM=function(){return n},n}function nz(){let n=(0,r._)(["\n  mutation DeletePlatformConfiguration($id: ID!) {\n    platform_configurationsRemoveOneById(id: $id) {\n      id\n    }\n  }\n"]);return nz=function(){return n},n}let nH="_itemsPagination",nK="_itemsCreateOne",nY="\n    id\n    name\n    description\n    embedder\n    slug\n    active\n    fields\n    configuration\n",nZ=n=>"\nid\nname\ndescription\ntags\nexternal_id\ncreatedAt\nembeddings_updated_at\nupdatedAt\nrights_mode\nRBAC {\n  type\n  users {\n    id\n    rights\n  }\n  roles {\n    id\n    rights\n  }\n  projects {\n    id\n    rights\n  }\n}\n".concat(n.join("\n"),"\n"),nX="\nid\nfirstname\nlastname\nemail\nsuper_admin\napikey\nanthropic_token\ntype\nrole\nfavourite_agents\n",n0="\nid\nname\nproviderapikey\ninstructions\ndescription\nactive\nimage\ntools\nproviderName\nmodelName\nmaxContextLength\nprovider\nslug\ncategory\nrateLimit {\n  name\n  rate_limit {\n    time\n    limit\n  }\n}\nstreaming\ncapabilities {\n  text\n  images\n  files\n  audio\n  video\n}\nbackend\nrights_mode\nRBAC {\n      type\n      users {\n        id\n        rights\n      }\n      roles {\n        id\n        rights\n      }\n      projects {\n        id\n        rights\n      }\n}\ncreatedAt\nupdatedAt\n",n9=(0,i.Ps)(u(),n0),n1=(0,i.Ps)(o()),n5=(0,i.Ps)(a(),nY),n3=(0,i.Ps)(s(),nY),n2=(n,t)=>{let e=n.charAt(0).toUpperCase()+n.slice(1);return(0,i.Ps)(d(),n,e,n,nH,nZ(t))},n6=n=>(0,i.Ps)(c(),n,n,n),n4=function(n,t){let e=arguments.length>2&&void 0!==arguments[2]&&arguments[2];return(0,i.Ps)(l(),n,n,nZ(t),e?"chunks { fts_rank hybrid_score content source chunk_index chunk_id chunk_created_at chunk_updated_at embedding_size }":"")},n8=n=>(0,i.Ps)(f(),n,n,n),n7=n=>{let t=n.charAt(0).toUpperCase()+n.slice(1);return(0,i.Ps)(m(),n,t,n)},tn=n=>{let t=n.charAt(0).toUpperCase()+n.slice(1);return(0,i.Ps)($(),n,t,n)},tt=n=>(0,i.Ps)(g(),n,n,n),te=(n,t)=>(0,i.Ps)(p(),n,n,t.join("\n")),tr=(0,i.Ps)(_()),ti=(0,i.Ps)(y()),tu=(0,i.Ps)(P()),to=(0,i.Ps)(I()),ta=(0,i.Ps)(v()),ts=(0,i.Ps)(h()),td=(0,i.Ps)(A());(0,i.Ps)(C()),(0,i.Ps)(S());let tc=(0,i.Ps)(B(),n0),tl=(0,i.Ps)(b(),n0),tf=(0,i.Ps)(j());(0,i.Ps)(k());let tm=(0,i.Ps)(D(),nX),t$=(0,i.Ps)(R()),tg=(0,i.Ps)(q());(0,i.Ps)(w(),nX);let tp=(0,i.Ps)(O()),t_=(0,i.Ps)(x()),ty=(0,i.Ps)(U()),tP=(0,i.Ps)(G()),tI=(0,i.Ps)(E()),tv=(0,i.Ps)(N()),th=(0,i.Ps)(F()),tA=(0,i.Ps)(J()),tC=(0,i.Ps)(T());(0,i.Ps)(Q());let tS=(0,i.Ps)(W()),tB=(0,i.Ps)(V()),tb=(0,i.Ps)(L());(0,i.Ps)(M());let tj=(0,i.Ps)(z()),tk=(0,i.Ps)(H()),tD=(0,i.Ps)(K()),tR=(0,i.Ps)(Y()),tq=(0,i.Ps)(Z()),tw=(0,i.Ps)(X()),tO=(0,i.Ps)(nn());(0,i.Ps)(nt());let tx=(0,i.Ps)(ne()),tU=(0,i.Ps)(nr()),tG=(0,i.Ps)(ni()),tE=(0,i.Ps)(nu()),tN=(0,i.Ps)(no()),tF=(0,i.Ps)(na());(0,i.Ps)(ns());let tJ=(0,i.Ps)(nd()),tT=(0,i.Ps)(nc()),tQ=(0,i.Ps)(nl()),tW=(0,i.Ps)(nf()),tV=(0,i.Ps)(nm()),tL="\n  id\n  name\n  description\n  image\n  custom_instructions\n  rights_mode\n  created_by\n  createdAt\n  updatedAt\n  project_items\n  RBAC {\n    type\n    users {\n      id\n      rights\n    }\n    roles {\n      id\n      rights\n    }\n  }\n",tM=(0,i.Ps)(n$(),tL),tz=(0,i.Ps)(ng(),tL),tH=(0,i.Ps)(np(),tL),tK=(0,i.Ps)(n_()),tY=(0,i.Ps)(ny(),tL),tZ=(0,i.Ps)(nP(),tL),tX=(0,i.Ps)(nI()),t0="\n  id\n  name\n  description\n  inputs\n  expected_output\n  expected_tools\n  expected_knowledge_sources\n  expected_agent_tools\n  eval_set_id\n  createdAt\n  updatedAt\n",t9="\n  id\n  name\n  description\n  createdAt\n  updatedAt\n",t1="\n  id\n  name\n  eval_set_id\n  agent_id\n  eval_functions\n  config\n  scoring_method\n  pass_threshold\n  test_case_ids\n  createdAt\n  updatedAt\n  rights_mode\n  RBAC {\n    type\n    users {\n      id\n      rights\n    }\n    roles {\n      id\n      rights\n    }\n    projects {\n      id\n      rights\n    }\n  }\n",t5=(0,i.Ps)(nv(),t0);(0,i.Ps)(nh(),t0);let t3=(0,i.Ps)(nA(),t0),t2=(0,i.Ps)(nC(),t0),t6=(0,i.Ps)(nS()),t4=(0,i.Ps)(nB(),t9),t8=(0,i.Ps)(nb(),"\n  id\n  name\n  description\n  config {\n    name\n    description\n  }\n  llm\n"),t7=(0,i.Ps)(nj(),t9),en=(0,i.Ps)(nk(),t9),et=(0,i.Ps)(nD(),t9),ee=(0,i.Ps)(nR()),er=(0,i.Ps)(nq(),t1);(0,i.Ps)(nw(),t1);let ei=(0,i.Ps)(nO(),t1),eu=(0,i.Ps)(nx()),eo=(0,i.Ps)(nU()),ea=(0,i.Ps)(nG()),es=(0,i.Ps)(nE()),ed=(0,i.Ps)(nN()),ec=(0,i.Ps)(nF()),el=(0,i.Ps)(nJ()),ef=(0,i.Ps)(nT(),t1);(0,i.Ps)(nQ());let em="\n  id\n  config_key\n  config_value\n  description\n  createdAt\n  updatedAt\n",e$=(0,i.Ps)(nW(),em);(0,i.Ps)(nV(),em);let eg=(0,i.Ps)(nL(),em),ep=(0,i.Ps)(nM(),em);(0,i.Ps)(nz())}}]);
//# sourceMappingURL=6373-7f2c537f3ddc202c.js.map