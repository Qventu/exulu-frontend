{"version":3,"file":"static/chunks/5455.c547dd6fb4d58fd7.js","mappings":"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","sources":["webpack://_N_E/./node_modules/codemirror-graphql/esm/utils/forEachState.js","webpack://_N_E/./node_modules/codemirror-graphql/esm/utils/hintList.js","webpack://_N_E/./node_modules/codemirror-graphql/esm/variables/hint.js"],"sourcesContent":["export default function forEachState(stack, fn) {\n    const reverseStateStack = [];\n    let state = stack;\n    while (state === null || state === void 0 ? void 0 : state.kind) {\n        reverseStateStack.push(state);\n        state = state.prevState;\n    }\n    for (let i = reverseStateStack.length - 1; i >= 0; i--) {\n        fn(reverseStateStack[i]);\n    }\n}\n//# sourceMappingURL=forEachState.js.map","export default function hintList(cursor, token, list) {\n    const hints = filterAndSortList(list, normalizeText(token.string));\n    if (!hints) {\n        return;\n    }\n    const tokenStart = token.type !== null && /\"|\\w/.test(token.string[0])\n        ? token.start\n        : token.end;\n    return {\n        list: hints,\n        from: { line: cursor.line, ch: tokenStart },\n        to: { line: cursor.line, ch: token.end },\n    };\n}\nfunction filterAndSortList(list, text) {\n    if (!text) {\n        return filterNonEmpty(list, entry => !entry.isDeprecated);\n    }\n    const byProximity = list.map(entry => ({\n        proximity: getProximity(normalizeText(entry.text), text),\n        entry,\n    }));\n    const conciseMatches = filterNonEmpty(filterNonEmpty(byProximity, pair => pair.proximity <= 2), pair => !pair.entry.isDeprecated);\n    const sortedMatches = conciseMatches.sort((a, b) => (a.entry.isDeprecated ? 1 : 0) - (b.entry.isDeprecated ? 1 : 0) ||\n        a.proximity - b.proximity ||\n        a.entry.text.length - b.entry.text.length);\n    return sortedMatches.map(pair => pair.entry);\n}\nfunction filterNonEmpty(array, predicate) {\n    const filtered = array.filter(predicate);\n    return filtered.length === 0 ? array : filtered;\n}\nfunction normalizeText(text) {\n    return text.toLowerCase().replaceAll(/\\W/g, '');\n}\nfunction getProximity(suggestion, text) {\n    let proximity = lexicalDistance(text, suggestion);\n    if (suggestion.length > text.length) {\n        proximity -= suggestion.length - text.length - 1;\n        proximity += suggestion.indexOf(text) === 0 ? 0 : 0.5;\n    }\n    return proximity;\n}\nfunction lexicalDistance(a, b) {\n    let i;\n    let j;\n    const d = [];\n    const aLength = a.length;\n    const bLength = b.length;\n    for (i = 0; i <= aLength; i++) {\n        d[i] = [i];\n    }\n    for (j = 1; j <= bLength; j++) {\n        d[0][j] = j;\n    }\n    for (i = 1; i <= aLength; i++) {\n        for (j = 1; j <= bLength; j++) {\n            const cost = a[i - 1] === b[j - 1] ? 0 : 1;\n            d[i][j] = Math.min(d[i - 1][j] + 1, d[i][j - 1] + 1, d[i - 1][j - 1] + cost);\n            if (i > 1 && j > 1 && a[i - 1] === b[j - 2] && a[i - 2] === b[j - 1]) {\n                d[i][j] = Math.min(d[i][j], d[i - 2][j - 2] + cost);\n            }\n        }\n    }\n    return d[aLength][bLength];\n}\n//# sourceMappingURL=hintList.js.map","import CodeMirror from 'codemirror';\nimport { getNullableType, getNamedType, GraphQLEnumType, GraphQLInputObjectType, GraphQLList, GraphQLBoolean, } from 'graphql';\nimport forEachState from '../utils/forEachState';\nimport hintList from '../utils/hintList';\nCodeMirror.registerHelper('hint', 'graphql-variables', (editor, options) => {\n    const cur = editor.getCursor();\n    const token = editor.getTokenAt(cur);\n    const results = getVariablesHint(cur, token, options);\n    if ((results === null || results === void 0 ? void 0 : results.list) && results.list.length > 0) {\n        results.from = CodeMirror.Pos(results.from.line, results.from.ch);\n        results.to = CodeMirror.Pos(results.to.line, results.to.ch);\n        CodeMirror.signal(editor, 'hasCompletion', editor, results, token);\n    }\n    return results;\n});\nfunction getVariablesHint(cur, token, options) {\n    const state = token.state.kind === 'Invalid' ? token.state.prevState : token.state;\n    const { kind, step } = state;\n    if (kind === 'Document' && step === 0) {\n        return hintList(cur, token, [{ text: '{' }]);\n    }\n    const { variableToType } = options;\n    if (!variableToType) {\n        return;\n    }\n    const typeInfo = getTypeInfo(variableToType, token.state);\n    if (kind === 'Document' || (kind === 'Variable' && step === 0)) {\n        const variableNames = Object.keys(variableToType);\n        return hintList(cur, token, variableNames.map(name => ({\n            text: `\"${name}\": `,\n            type: variableToType[name],\n        })));\n    }\n    if ((kind === 'ObjectValue' || (kind === 'ObjectField' && step === 0)) &&\n        typeInfo.fields) {\n        const inputFields = Object.keys(typeInfo.fields).map(fieldName => typeInfo.fields[fieldName]);\n        return hintList(cur, token, inputFields.map(field => ({\n            text: `\"${field.name}\": `,\n            type: field.type,\n            description: field.description,\n        })));\n    }\n    if (kind === 'StringValue' ||\n        kind === 'NumberValue' ||\n        kind === 'BooleanValue' ||\n        kind === 'NullValue' ||\n        (kind === 'ListValue' && step === 1) ||\n        (kind === 'ObjectField' && step === 2) ||\n        (kind === 'Variable' && step === 2)) {\n        const namedInputType = typeInfo.type\n            ? getNamedType(typeInfo.type)\n            : undefined;\n        if (namedInputType instanceof GraphQLInputObjectType) {\n            return hintList(cur, token, [{ text: '{' }]);\n        }\n        if (namedInputType instanceof GraphQLEnumType) {\n            const values = namedInputType.getValues();\n            return hintList(cur, token, values.map(value => ({\n                text: `\"${value.name}\"`,\n                type: namedInputType,\n                description: value.description,\n            })));\n        }\n        if (namedInputType === GraphQLBoolean) {\n            return hintList(cur, token, [\n                { text: 'true', type: GraphQLBoolean, description: 'Not false.' },\n                { text: 'false', type: GraphQLBoolean, description: 'Not true.' },\n            ]);\n        }\n    }\n}\nfunction getTypeInfo(variableToType, tokenState) {\n    const info = {\n        type: null,\n        fields: null,\n    };\n    forEachState(tokenState, state => {\n        switch (state.kind) {\n            case 'Variable': {\n                info.type = variableToType[state.name];\n                break;\n            }\n            case 'ListValue': {\n                const nullableType = info.type ? getNullableType(info.type) : undefined;\n                info.type =\n                    nullableType instanceof GraphQLList ? nullableType.ofType : null;\n                break;\n            }\n            case 'ObjectValue': {\n                const objectType = info.type ? getNamedType(info.type) : undefined;\n                info.fields =\n                    objectType instanceof GraphQLInputObjectType\n                        ? objectType.getFields()\n                        : null;\n                break;\n            }\n            case 'ObjectField': {\n                const objectField = state.name && info.fields ? info.fields[state.name] : null;\n                info.type = objectField === null || objectField === void 0 ? void 0 : objectField.type;\n                break;\n            }\n        }\n    });\n    return info;\n}\n//# sourceMappingURL=hint.js.map"],"names":["forEachState","stack","fn","reverseStateStack","state","kind","push","prevState","i","length","hintList","cursor","token","list","text","hints","normalizeText","string","sortedMatches","filterNonEmpty","map","entry","suggestion","proximity","lexicalDistance","a","b","j","d","aLength","bLength","cost","Math","min","indexOf","pair","isDeprecated","sort","tokenStart","type","test","start","end","from","line","ch","to","array","predicate","filtered","filter","toLowerCase","replaceAll","codemirror_default","registerHelper","editor","options","cur","getCursor","getTokenAt","results","getVariablesHint","step","variableToType","typeInfo","getTypeInfo","tokenState","info","fields","Z","name","nullableType","definition","tf","undefined","p2","ofType","objectType","xC","sR","getFields","objectField","variableNames","keys","inputFields","fieldName","field","description","namedInputType","mR","values","getValues","value","scalars","EZ","Pos","signal"],"sourceRoot":""}