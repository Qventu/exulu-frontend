{"version":3,"file":"static/chunks/9184.dbe55a2c20bce0e6.js","mappings":"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","sources":["webpack://_N_E/./node_modules/codemirror/addon/hint/show-hint.js"],"sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/5/LICENSE\n\n// declare global: DOMRect\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  var HINT_ELEMENT_CLASS        = \"CodeMirror-hint\";\n  var ACTIVE_HINT_ELEMENT_CLASS = \"CodeMirror-hint-active\";\n\n  // This is the old interface, kept around for now to stay\n  // backwards-compatible.\n  CodeMirror.showHint = function(cm, getHints, options) {\n    if (!getHints) return cm.showHint(options);\n    if (options && options.async) getHints.async = true;\n    var newOpts = {hint: getHints};\n    if (options) for (var prop in options) newOpts[prop] = options[prop];\n    return cm.showHint(newOpts);\n  };\n\n  CodeMirror.defineExtension(\"showHint\", function(options) {\n    options = parseOptions(this, this.getCursor(\"start\"), options);\n    var selections = this.listSelections()\n    if (selections.length > 1) return;\n    // By default, don't allow completion when something is selected.\n    // A hint function can have a `supportsSelection` property to\n    // indicate that it can handle selections.\n    if (this.somethingSelected()) {\n      if (!options.hint.supportsSelection) return;\n      // Don't try with cross-line selections\n      for (var i = 0; i < selections.length; i++)\n        if (selections[i].head.line != selections[i].anchor.line) return;\n    }\n\n    if (this.state.completionActive) this.state.completionActive.close();\n    var completion = this.state.completionActive = new Completion(this, options);\n    if (!completion.options.hint) return;\n\n    CodeMirror.signal(this, \"startCompletion\", this);\n    completion.update(true);\n  });\n\n  CodeMirror.defineExtension(\"closeHint\", function() {\n    if (this.state.completionActive) this.state.completionActive.close()\n  })\n\n  function Completion(cm, options) {\n    this.cm = cm;\n    this.options = options;\n    this.widget = null;\n    this.debounce = 0;\n    this.tick = 0;\n    this.startPos = this.cm.getCursor(\"start\");\n    this.startLen = this.cm.getLine(this.startPos.line).length - this.cm.getSelection().length;\n\n    if (this.options.updateOnCursorActivity) {\n      var self = this;\n      cm.on(\"cursorActivity\", this.activityFunc = function() { self.cursorActivity(); });\n    }\n  }\n\n  var requestAnimationFrame = window.requestAnimationFrame || function(fn) {\n    return setTimeout(fn, 1000/60);\n  };\n  var cancelAnimationFrame = window.cancelAnimationFrame || clearTimeout;\n\n  Completion.prototype = {\n    close: function() {\n      if (!this.active()) return;\n      this.cm.state.completionActive = null;\n      this.tick = null;\n      if (this.options.updateOnCursorActivity) {\n        this.cm.off(\"cursorActivity\", this.activityFunc);\n      }\n\n      if (this.widget && this.data) CodeMirror.signal(this.data, \"close\");\n      if (this.widget) this.widget.close();\n      CodeMirror.signal(this.cm, \"endCompletion\", this.cm);\n    },\n\n    active: function() {\n      return this.cm.state.completionActive == this;\n    },\n\n    pick: function(data, i) {\n      var completion = data.list[i], self = this;\n      this.cm.operation(function() {\n        if (completion.hint)\n          completion.hint(self.cm, data, completion);\n        else\n          self.cm.replaceRange(getText(completion), completion.from || data.from,\n                               completion.to || data.to, \"complete\");\n        CodeMirror.signal(data, \"pick\", completion);\n        self.cm.scrollIntoView();\n      });\n      if (this.options.closeOnPick) {\n        this.close();\n      }\n    },\n\n    cursorActivity: function() {\n      if (this.debounce) {\n        cancelAnimationFrame(this.debounce);\n        this.debounce = 0;\n      }\n\n      var identStart = this.startPos;\n      if(this.data) {\n        identStart = this.data.from;\n      }\n\n      var pos = this.cm.getCursor(), line = this.cm.getLine(pos.line);\n      if (pos.line != this.startPos.line || line.length - pos.ch != this.startLen - this.startPos.ch ||\n          pos.ch < identStart.ch || this.cm.somethingSelected() ||\n          (!pos.ch || this.options.closeCharacters.test(line.charAt(pos.ch - 1)))) {\n        this.close();\n      } else {\n        var self = this;\n        this.debounce = requestAnimationFrame(function() {self.update();});\n        if (this.widget) this.widget.disable();\n      }\n    },\n\n    update: function(first) {\n      if (this.tick == null) return\n      var self = this, myTick = ++this.tick\n      fetchHints(this.options.hint, this.cm, this.options, function(data) {\n        if (self.tick == myTick) self.finishUpdate(data, first)\n      })\n    },\n\n    finishUpdate: function(data, first) {\n      if (this.data) CodeMirror.signal(this.data, \"update\");\n\n      var picked = (this.widget && this.widget.picked) || (first && this.options.completeSingle);\n      if (this.widget) this.widget.close();\n\n      this.data = data;\n\n      if (data && data.list.length) {\n        if (picked && data.list.length == 1) {\n          this.pick(data, 0);\n        } else {\n          this.widget = new Widget(this, data);\n          CodeMirror.signal(data, \"shown\");\n        }\n      }\n    }\n  };\n\n  function parseOptions(cm, pos, options) {\n    var editor = cm.options.hintOptions;\n    var out = {};\n    for (var prop in defaultOptions) out[prop] = defaultOptions[prop];\n    if (editor) for (var prop in editor)\n      if (editor[prop] !== undefined) out[prop] = editor[prop];\n    if (options) for (var prop in options)\n      if (options[prop] !== undefined) out[prop] = options[prop];\n    if (out.hint.resolve) out.hint = out.hint.resolve(cm, pos)\n    return out;\n  }\n\n  function getText(completion) {\n    if (typeof completion == \"string\") return completion;\n    else return completion.text;\n  }\n\n  function buildKeyMap(completion, handle) {\n    var baseMap = {\n      Up: function() {handle.moveFocus(-1);},\n      Down: function() {handle.moveFocus(1);},\n      PageUp: function() {handle.moveFocus(-handle.menuSize() + 1, true);},\n      PageDown: function() {handle.moveFocus(handle.menuSize() - 1, true);},\n      Home: function() {handle.setFocus(0);},\n      End: function() {handle.setFocus(handle.length - 1);},\n      Enter: handle.pick,\n      Tab: handle.pick,\n      Esc: handle.close\n    };\n\n    var mac = /Mac/.test(navigator.platform);\n\n    if (mac) {\n      baseMap[\"Ctrl-P\"] = function() {handle.moveFocus(-1);};\n      baseMap[\"Ctrl-N\"] = function() {handle.moveFocus(1);};\n    }\n\n    var custom = completion.options.customKeys;\n    var ourMap = custom ? {} : baseMap;\n    function addBinding(key, val) {\n      var bound;\n      if (typeof val != \"string\")\n        bound = function(cm) { return val(cm, handle); };\n      // This mechanism is deprecated\n      else if (baseMap.hasOwnProperty(val))\n        bound = baseMap[val];\n      else\n        bound = val;\n      ourMap[key] = bound;\n    }\n    if (custom)\n      for (var key in custom) if (custom.hasOwnProperty(key))\n        addBinding(key, custom[key]);\n    var extra = completion.options.extraKeys;\n    if (extra)\n      for (var key in extra) if (extra.hasOwnProperty(key))\n        addBinding(key, extra[key]);\n    return ourMap;\n  }\n\n  function getHintElement(hintsElement, el) {\n    while (el && el != hintsElement) {\n      if (el.nodeName.toUpperCase() === \"LI\" && el.parentNode == hintsElement) return el;\n      el = el.parentNode;\n    }\n  }\n\n  function Widget(completion, data) {\n    this.id = \"cm-complete-\" + Math.floor(Math.random(1e6))\n    this.completion = completion;\n    this.data = data;\n    this.picked = false;\n    var widget = this, cm = completion.cm;\n    var ownerDocument = cm.getInputField().ownerDocument;\n    var parentWindow = ownerDocument.defaultView || ownerDocument.parentWindow;\n\n    var hints = this.hints = ownerDocument.createElement(\"ul\");\n    hints.setAttribute(\"role\", \"listbox\")\n    hints.setAttribute(\"aria-expanded\", \"true\")\n    hints.id = this.id\n    var theme = completion.cm.options.theme;\n    hints.className = \"CodeMirror-hints \" + theme;\n    this.selectedHint = data.selectedHint || 0;\n\n    var completions = data.list;\n    for (var i = 0; i < completions.length; ++i) {\n      var elt = hints.appendChild(ownerDocument.createElement(\"li\")), cur = completions[i];\n      var className = HINT_ELEMENT_CLASS + (i != this.selectedHint ? \"\" : \" \" + ACTIVE_HINT_ELEMENT_CLASS);\n      if (cur.className != null) className = cur.className + \" \" + className;\n      elt.className = className;\n      if (i == this.selectedHint) elt.setAttribute(\"aria-selected\", \"true\")\n      elt.id = this.id + \"-\" + i\n      elt.setAttribute(\"role\", \"option\")\n      if (cur.render) cur.render(elt, data, cur);\n      else elt.appendChild(ownerDocument.createTextNode(cur.displayText || getText(cur)));\n      elt.hintId = i;\n    }\n\n    var container = completion.options.container || ownerDocument.body;\n    var pos = cm.cursorCoords(completion.options.alignWithWord ? data.from : null);\n    var left = pos.left, top = pos.bottom, below = true;\n    var offsetLeft = 0, offsetTop = 0;\n    if (container !== ownerDocument.body) {\n      // We offset the cursor position because left and top are relative to the offsetParent's top left corner.\n      var isContainerPositioned = ['absolute', 'relative', 'fixed'].indexOf(parentWindow.getComputedStyle(container).position) !== -1;\n      var offsetParent = isContainerPositioned ? container : container.offsetParent;\n      var offsetParentPosition = offsetParent.getBoundingClientRect();\n      var bodyPosition = ownerDocument.body.getBoundingClientRect();\n      offsetLeft = (offsetParentPosition.left - bodyPosition.left - offsetParent.scrollLeft);\n      offsetTop = (offsetParentPosition.top - bodyPosition.top - offsetParent.scrollTop);\n    }\n    hints.style.left = (left - offsetLeft) + \"px\";\n    hints.style.top = (top - offsetTop) + \"px\";\n\n    // If we're at the edge of the screen, then we want the menu to appear on the left of the cursor.\n    var winW = parentWindow.innerWidth || Math.max(ownerDocument.body.offsetWidth, ownerDocument.documentElement.offsetWidth);\n    var winH = parentWindow.innerHeight || Math.max(ownerDocument.body.offsetHeight, ownerDocument.documentElement.offsetHeight);\n    container.appendChild(hints);\n    cm.getInputField().setAttribute(\"aria-autocomplete\", \"list\")\n    cm.getInputField().setAttribute(\"aria-owns\", this.id)\n    cm.getInputField().setAttribute(\"aria-activedescendant\", this.id + \"-\" + this.selectedHint)\n\n    var box = completion.options.moveOnOverlap ? hints.getBoundingClientRect() : new DOMRect();\n    var scrolls = completion.options.paddingForScrollbar ? hints.scrollHeight > hints.clientHeight + 1 : false;\n\n    // Compute in the timeout to avoid reflow on init\n    var startScroll;\n    setTimeout(function() { startScroll = cm.getScrollInfo(); });\n\n    var overlapY = box.bottom - winH;\n    if (overlapY > 0) { // Does not fit below\n      var height = box.bottom - box.top, spaceAbove = box.top - (pos.bottom - pos.top) - 2\n      if (winH - box.top < spaceAbove) { // More room at the top\n        if (height > spaceAbove) hints.style.height = (height = spaceAbove) + \"px\";\n        hints.style.top = ((top = pos.top - height) + offsetTop) + \"px\";\n        below = false;\n      } else {\n        hints.style.height = (winH - box.top - 2) + \"px\";\n      }\n    }\n    var overlapX = box.right - winW;\n    if (scrolls) overlapX += cm.display.nativeBarWidth;\n    if (overlapX > 0) {\n      if (box.right - box.left > winW) {\n        hints.style.width = (winW - 5) + \"px\";\n        overlapX -= (box.right - box.left) - winW;\n      }\n      hints.style.left = (left = Math.max(pos.left - overlapX - offsetLeft, 0)) + \"px\";\n    }\n    if (scrolls) for (var node = hints.firstChild; node; node = node.nextSibling)\n      node.style.paddingRight = cm.display.nativeBarWidth + \"px\"\n\n    cm.addKeyMap(this.keyMap = buildKeyMap(completion, {\n      moveFocus: function(n, avoidWrap) { widget.changeActive(widget.selectedHint + n, avoidWrap); },\n      setFocus: function(n) { widget.changeActive(n); },\n      menuSize: function() { return widget.screenAmount(); },\n      length: completions.length,\n      close: function() { completion.close(); },\n      pick: function() { widget.pick(); },\n      data: data\n    }));\n\n    if (completion.options.closeOnUnfocus) {\n      var closingOnBlur;\n      cm.on(\"blur\", this.onBlur = function() { closingOnBlur = setTimeout(function() { completion.close(); }, 100); });\n      cm.on(\"focus\", this.onFocus = function() { clearTimeout(closingOnBlur); });\n    }\n\n    cm.on(\"scroll\", this.onScroll = function() {\n      var curScroll = cm.getScrollInfo(), editor = cm.getWrapperElement().getBoundingClientRect();\n      if (!startScroll) startScroll = cm.getScrollInfo();\n      var newTop = top + startScroll.top - curScroll.top;\n      var point = newTop - (parentWindow.pageYOffset || (ownerDocument.documentElement || ownerDocument.body).scrollTop);\n      if (!below) point += hints.offsetHeight;\n      if (point <= editor.top || point >= editor.bottom) return completion.close();\n      hints.style.top = newTop + \"px\";\n      hints.style.left = (left + startScroll.left - curScroll.left) + \"px\";\n    });\n\n    CodeMirror.on(hints, \"dblclick\", function(e) {\n      var t = getHintElement(hints, e.target || e.srcElement);\n      if (t && t.hintId != null) {widget.changeActive(t.hintId); widget.pick();}\n    });\n\n    CodeMirror.on(hints, \"click\", function(e) {\n      var t = getHintElement(hints, e.target || e.srcElement);\n      if (t && t.hintId != null) {\n        widget.changeActive(t.hintId);\n        if (completion.options.completeOnSingleClick) widget.pick();\n      }\n    });\n\n    CodeMirror.on(hints, \"mousedown\", function() {\n      setTimeout(function(){cm.focus();}, 20);\n    });\n\n    // The first hint doesn't need to be scrolled to on init\n    var selectedHintRange = this.getSelectedHintRange();\n    if (selectedHintRange.from !== 0 || selectedHintRange.to !== 0) {\n      this.scrollToActive();\n    }\n\n    CodeMirror.signal(data, \"select\", completions[this.selectedHint], hints.childNodes[this.selectedHint]);\n    return true;\n  }\n\n  Widget.prototype = {\n    close: function() {\n      if (this.completion.widget != this) return;\n      this.completion.widget = null;\n      if (this.hints.parentNode) this.hints.parentNode.removeChild(this.hints);\n      this.completion.cm.removeKeyMap(this.keyMap);\n      var input = this.completion.cm.getInputField()\n      input.removeAttribute(\"aria-activedescendant\")\n      input.removeAttribute(\"aria-owns\")\n\n      var cm = this.completion.cm;\n      if (this.completion.options.closeOnUnfocus) {\n        cm.off(\"blur\", this.onBlur);\n        cm.off(\"focus\", this.onFocus);\n      }\n      cm.off(\"scroll\", this.onScroll);\n    },\n\n    disable: function() {\n      this.completion.cm.removeKeyMap(this.keyMap);\n      var widget = this;\n      this.keyMap = {Enter: function() { widget.picked = true; }};\n      this.completion.cm.addKeyMap(this.keyMap);\n    },\n\n    pick: function() {\n      this.completion.pick(this.data, this.selectedHint);\n    },\n\n    changeActive: function(i, avoidWrap) {\n      if (i >= this.data.list.length)\n        i = avoidWrap ? this.data.list.length - 1 : 0;\n      else if (i < 0)\n        i = avoidWrap ? 0  : this.data.list.length - 1;\n      if (this.selectedHint == i) return;\n      var node = this.hints.childNodes[this.selectedHint];\n      if (node) {\n        node.className = node.className.replace(\" \" + ACTIVE_HINT_ELEMENT_CLASS, \"\");\n        node.removeAttribute(\"aria-selected\")\n      }\n      node = this.hints.childNodes[this.selectedHint = i];\n      node.className += \" \" + ACTIVE_HINT_ELEMENT_CLASS;\n      node.setAttribute(\"aria-selected\", \"true\")\n      this.completion.cm.getInputField().setAttribute(\"aria-activedescendant\", node.id)\n      this.scrollToActive()\n      CodeMirror.signal(this.data, \"select\", this.data.list[this.selectedHint], node);\n    },\n\n    scrollToActive: function() {\n      var selectedHintRange = this.getSelectedHintRange();\n      var node1 = this.hints.childNodes[selectedHintRange.from];\n      var node2 = this.hints.childNodes[selectedHintRange.to];\n      var firstNode = this.hints.firstChild;\n      if (node1.offsetTop < this.hints.scrollTop)\n        this.hints.scrollTop = node1.offsetTop - firstNode.offsetTop;\n      else if (node2.offsetTop + node2.offsetHeight > this.hints.scrollTop + this.hints.clientHeight)\n        this.hints.scrollTop = node2.offsetTop + node2.offsetHeight - this.hints.clientHeight + firstNode.offsetTop;\n    },\n\n    screenAmount: function() {\n      return Math.floor(this.hints.clientHeight / this.hints.firstChild.offsetHeight) || 1;\n    },\n\n    getSelectedHintRange: function() {\n      var margin = this.completion.options.scrollMargin || 0;\n      return {\n        from: Math.max(0, this.selectedHint - margin),\n        to: Math.min(this.data.list.length - 1, this.selectedHint + margin),\n      };\n    }\n  };\n\n  function applicableHelpers(cm, helpers) {\n    if (!cm.somethingSelected()) return helpers\n    var result = []\n    for (var i = 0; i < helpers.length; i++)\n      if (helpers[i].supportsSelection) result.push(helpers[i])\n    return result\n  }\n\n  function fetchHints(hint, cm, options, callback) {\n    if (hint.async) {\n      hint(cm, callback, options)\n    } else {\n      var result = hint(cm, options)\n      if (result && result.then) result.then(callback)\n      else callback(result)\n    }\n  }\n\n  function resolveAutoHints(cm, pos) {\n    var helpers = cm.getHelpers(pos, \"hint\"), words\n    if (helpers.length) {\n      var resolved = function(cm, callback, options) {\n        var app = applicableHelpers(cm, helpers);\n        function run(i) {\n          if (i == app.length) return callback(null)\n          fetchHints(app[i], cm, options, function(result) {\n            if (result && result.list.length > 0) callback(result)\n            else run(i + 1)\n          })\n        }\n        run(0)\n      }\n      resolved.async = true\n      resolved.supportsSelection = true\n      return resolved\n    } else if (words = cm.getHelper(cm.getCursor(), \"hintWords\")) {\n      return function(cm) { return CodeMirror.hint.fromList(cm, {words: words}) }\n    } else if (CodeMirror.hint.anyword) {\n      return function(cm, options) { return CodeMirror.hint.anyword(cm, options) }\n    } else {\n      return function() {}\n    }\n  }\n\n  CodeMirror.registerHelper(\"hint\", \"auto\", {\n    resolve: resolveAutoHints\n  });\n\n  CodeMirror.registerHelper(\"hint\", \"fromList\", function(cm, options) {\n    var cur = cm.getCursor(), token = cm.getTokenAt(cur)\n    var term, from = CodeMirror.Pos(cur.line, token.start), to = cur\n    if (token.start < cur.ch && /\\w/.test(token.string.charAt(cur.ch - token.start - 1))) {\n      term = token.string.substr(0, cur.ch - token.start)\n    } else {\n      term = \"\"\n      from = cur\n    }\n    var found = [];\n    for (var i = 0; i < options.words.length; i++) {\n      var word = options.words[i];\n      if (word.slice(0, term.length) == term)\n        found.push(word);\n    }\n\n    if (found.length) return {list: found, from: from, to: to};\n  });\n\n  CodeMirror.commands.autocomplete = CodeMirror.showHint;\n\n  var defaultOptions = {\n    hint: CodeMirror.hint.auto,\n    completeSingle: true,\n    alignWithWord: true,\n    closeCharacters: /[\\s()\\[\\]{};:>,]/,\n    closeOnPick: true,\n    closeOnUnfocus: true,\n    updateOnCursorActivity: true,\n    completeOnSingleClick: true,\n    container: null,\n    customKeys: null,\n    extraKeys: null,\n    paddingForScrollbar: true,\n    moveOnOverlap: true,\n  };\n\n  CodeMirror.defineOption(\"hintOptions\", null);\n});\n"],"names":["mod","CodeMirror","ACTIVE_HINT_ELEMENT_CLASS","Completion","cm","options","widget","debounce","tick","startPos","getCursor","startLen","getLine","line","length","getSelection","updateOnCursorActivity","self","on","activityFunc","cursorActivity","showHint","getHints","async","newOpts","hint","prop","defineExtension","parseOptions","pos","editor","hintOptions","out","defaultOptions","undefined","resolve","selections","listSelections","somethingSelected","supportsSelection","i","head","anchor","state","completionActive","close","completion","signal","update","requestAnimationFrame","window","fn","setTimeout","cancelAnimationFrame","clearTimeout","getText","text","getHintElement","hintsElement","el","nodeName","toUpperCase","parentNode","Widget","data","id","Math","floor","random","picked","startScroll","closingOnBlur","ownerDocument","getInputField","parentWindow","defaultView","hints","createElement","setAttribute","theme","className","selectedHint","completions","list","elt","appendChild","cur","HINT_ELEMENT_CLASS","render","createTextNode","displayText","hintId","container","body","cursorCoords","alignWithWord","from","left","top","bottom","below","offsetLeft","offsetTop","offsetParent","isContainerPositioned","indexOf","getComputedStyle","position","offsetParentPosition","getBoundingClientRect","bodyPosition","scrollLeft","scrollTop","style","winW","innerWidth","max","offsetWidth","documentElement","winH","innerHeight","offsetHeight","box","moveOnOverlap","DOMRect","scrolls","paddingForScrollbar","scrollHeight","clientHeight","getScrollInfo","overlapY","height","spaceAbove","overlapX","right","display","nativeBarWidth","width","node","firstChild","nextSibling","paddingRight","addKeyMap","keyMap","buildKeyMap","handle","baseMap","Up","moveFocus","Down","PageUp","menuSize","PageDown","Home","setFocus","End","Enter","pick","Tab","Esc","test","navigator","platform","custom","customKeys","ourMap","addBinding","key","val","bound","hasOwnProperty","extra","extraKeys","n","avoidWrap","changeActive","screenAmount","closeOnUnfocus","onBlur","onFocus","onScroll","curScroll","getWrapperElement","newTop","point","pageYOffset","e","t","target","srcElement","completeOnSingleClick","focus","selectedHintRange","getSelectedHintRange","to","scrollToActive","childNodes","fetchHints","callback","result","then","prototype","active","off","operation","replaceRange","scrollIntoView","closeOnPick","identStart","ch","closeCharacters","charAt","disable","first","myTick","finishUpdate","completeSingle","removeChild","removeKeyMap","input","removeAttribute","replace","node1","node2","firstNode","margin","scrollMargin","min","registerHelper","words","helpers","getHelpers","resolved","app","applicableHelpers","push","run","getHelper","fromList","anyword","term","token","getTokenAt","Pos","start","string","substr","found","word","slice","commands","autocomplete","auto","defineOption","__webpack_require__"],"sourceRoot":""}