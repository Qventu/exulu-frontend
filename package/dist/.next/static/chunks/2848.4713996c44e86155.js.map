{"version":3,"file":"static/chunks/2848.4713996c44e86155.js","mappings":"uFAKAA,SAKCC,CAAA,EACD,aAEA,IAAAC,EAAA,GACAC,EAAA,cACAC,EAAAH,EAAAG,GAAA,CAAAC,EAAAJ,EAAAK,MAAA,CAEA,SAAAC,EAAAC,CAAA,EACA,IAAAC,EAAAD,EAAAE,MAAA,CAAAP,GACA,OAAAM,IAAAA,EAAA,EAAAA,CACA,CA+BA,SAAAE,EAAAC,CAAA,CAAAC,CAAA,EACA,IAAAC,EAAAF,EAAAD,OAAA,GACA,MAAAG,CAAA,IAAAA,EAAAC,gBAAA,EAAAD,EAAAE,SAAA,CAAAJ,EAAAK,SAAA,CAAAJ,GAAAC,CACA,CAhCAb,EAAAiB,QAAA,CAAAC,aAAA,UAAAP,CAAA,EACAA,EAAAO,aAAA,EACA,EAEAlB,EAAAmB,eAAA,0BAAAC,CAAA,EACAA,GAAAA,CAAAA,EAAAnB,CAAA,EAGA,QADAoB,EAAAC,IAAAC,EAAA,KAAAC,cAAA,GAAAX,EAAA,KACAY,EAAAF,EAAAG,MAAA,GAAoCD,GAAA,EAAQA,IAAA,CAC5C,IAAAE,EAAAJ,CAAA,CAAAE,EAAA,CAAAE,IAAA,GAAAC,EAAAL,CAAA,CAAAE,EAAA,CAAAG,EAAA,EACAD,CAAAA,EAAAE,IAAA,EAAAR,IACAO,EAAAC,IAAA,EAAAR,GAAAO,CAAAA,EAAAzB,EAAAkB,EAAA,IACAA,EAAAM,EAAAE,IAAA,CACAhB,MAAAA,EACAF,IARA,CAQAmB,SAAA,CAAAH,EAAAC,EAAAR,GAAAP,EAAA,MACeF,IATf,CASeoB,WAAA,CAAAJ,EAAAC,EAAAR,GAAmCP,EAAA,QAC1CA,MAAAA,EACRF,IAXA,CAWAmB,SAAA,CAAAH,EAAAC,EAAAR,GAEAT,IAbA,CAaAoB,WAAA,CAAAJ,EAAAC,EAAAR,GAEA,CACA,GAYApB,EAAAmB,eAAA,wBAAAQ,CAAA,CAAAC,CAAA,CAAAR,CAAA,EACAA,GAAAA,CAAAA,EAAAnB,CAAA,EACA,IAAA+B,EAAA,KAAAnB,EAAAH,EAAAsB,EAAAL,GACAM,EAAAD,EAAAE,OAAA,CAAAP,EAAAE,IAAA,EACA,IAAAI,CAAAA,MAAAA,GAZA,aAAAE,IAAA,CAAAxB,EAAAyB,cAAA,CAAAjC,EAAAS,EAAAiB,IAAA,oBAAAM,IAAA,CAYAF,EAAA,GAEA,IAAAI,EAAAjB,EAAAW,WAAA,EAAAlB,EAAAkB,WAAA,CACA,IAAAM,EAAA,CACAjB,CAAAA,EAAAkB,iBAAA,EAAAzB,EAAAyB,iBAAA,IACAlB,EAAAmB,SAAA,IACAP,EAAAQ,YAAA,CAAAb,EAAAC,EAAAR,IAEA,MACA,CAEA,IAAAqB,EAAAC,KAAAC,GAAA,CAAAf,GAAAA,EAAAgB,EAAA,EAAAhB,EAAAC,IAAA,EAAAF,EAAAE,IAAA,CAAAD,EAAAC,IAAA,GAAAD,EAAAC,IAAA,CAAAG,EAAAa,QAAA,MACAC,EAAA1B,MAAAA,EAAA2B,OAAA,KAAA3B,EAAA2B,OAAA,CACAC,EAAA5B,EAAA6B,iBAAA,EAAAtB,EAAAE,IAAA,EAAAD,EAAAC,IAAA,CAEAG,EAAAkB,SAAA,YACA,GAAA9B,EAAA+B,MAAA,EAEA,QADAC,EAAA,KACA3B,EAAAE,EAAAE,IAAA,CAAgCJ,EAAAgB,EAAS,EAAAhB,EAAA,CACzC,IAAAI,EAAAG,EAAAE,OAAA,CAAAT,GACA4B,EAAAxB,KAAAA,EAAApB,MAAA,CAAAP,GAAA2B,EAAAA,EAAAyB,KAAA,GAAAhD,EAAAuB,IACAuB,CAAAA,MAAAA,GAAAA,EAAA1B,MAAA,CAAA2B,EAAA3B,MAAA,GACA0B,CAAAA,EAAAC,CAAA,CAEA,CACA,QAAA5B,EAAAE,EAAAE,IAAA,CAAgCJ,EAAAgB,EAAS,EAAAhB,EAAA,CACzC,IAAAI,EAAAG,EAAAE,OAAA,CAAAT,GAAA8B,EAAAH,EAAA1B,MAAA,CACA,IAAAxB,EAAAiC,IAAA,CAAAN,EAAA,IACAA,EAAAyB,KAAA,GAAAC,IAAAH,GAAAG,CAAAA,EAAAjD,EAAAuB,EAAA,EACAG,EAAAwB,YAAA,CAAAJ,EAAAf,EAAAS,EAAA3C,EAAAsB,EAAA,GAAAtB,EAAAsB,EAAA8B,IACA,CACA,MACA,QAAA9B,EAAAE,EAAAE,IAAA,CAAgCJ,EAAAgB,EAAS,EAAAhB,EACzCuB,CAAAA,GAAA9C,EAAAiC,IAAA,CAAAH,EAAAE,OAAA,CAAAT,GAAA,GACAO,EAAAwB,YAAA,CAAAnB,EAAAS,EAAA3C,EAAAsB,EAAA,GAGA,GACA,GAEAzB,EAAAmB,eAAA,yBAAAQ,CAAA,CAAAC,CAAA,CAAAR,CAAA,EACAA,GAAAA,CAAAA,EAAAnB,CAAA,EACA,IAAA+B,EAAA,KAAAnB,EAAAH,EAAAsB,EAAAL,GACA8B,EAAArC,EAAAkB,iBAAA,EAAAzB,EAAAyB,iBAAA,CACAoB,EAAAtC,EAAAuC,eAAA,EAAA9C,EAAA8C,eAAA,CACA,IAAAF,GAAA,CAAAC,EAAA,CACAtC,CAAAA,EAAAW,WAAA,EAAAlB,EAAAkB,WAAA,GAAAX,CAAA,GAAAA,EAAAmB,SAAA,EACAP,EAAAD,WAAA,CAAAJ,EAAAC,EAAAR,GACA,MACA,CACA,kBAAAe,IAAA,CAAAH,EAAAI,cAAA,CAAAjC,EAAAwB,EAAAE,IAAA,OAEA,IAAAY,EAAAC,KAAAC,GAAA,CAAAf,EAAAC,IAAA,CAAAG,EAAAa,QAAA,IACAJ,GAAAd,EAAAE,IAAA,EAAAD,GAAAA,EAAAgB,EAAA,EAAA1C,EAAAiC,IAAA,CAAAH,EAAAE,OAAA,CAAAO,KAAA,EAAAA,EAEA,IAAAK,EAAA1B,MAAAA,EAAA2B,OAAA,KAAA3B,EAAA2B,OAAA,CACApB,EAAAE,IAAA,CAAAY,GAEAT,EAAAkB,SAAA,YACA,GAAA9B,CAAA,GAAAA,EAAAmB,SAAA,EACA,IAAAqB,EAAA1D,EAAAiC,IAAA,CAAAH,EAAAE,OAAA,CAAAO,IACAT,EAAAwB,YAAA,CAAAV,EAAAY,EAAAvD,EAAAsC,IACAT,EAAAwB,YAAA,CAAAC,EAAAX,EAAA3C,EAAAwB,EAAAE,IAAA,KACA,IAAAgC,EAAAzC,EAAA0C,gBAAA,EAAAjD,EAAAiD,gBAAA,CACA,GAAAD,MAAAA,EAAA,QAAApC,EAAAE,EAAAE,IAAA,GAAsDJ,GAAAgB,EAAU,EAAAhB,EAChEA,CAAAA,GAAAgB,GAAAmB,CAAA,GACA5B,EAAAwB,YAAA,CAAAK,EAAAf,EAAA3C,EAAAsB,EAAA,GACA,KAAQ,CACR,IAAAsC,EAAA3D,GAAAA,EAAA4B,EAAAgC,SAAA,OAAApC,GAAAqC,EAAA,CAAAjC,EAAAkC,iBAAA,GACAlC,EAAAwB,YAAA,CAAAE,EAAA9B,GACAmC,GAAA/B,EAAAmC,YAAA,CAAAF,EAAArC,EAAAI,EAAAgC,SAAA,SAAApC,GACAI,EAAAwB,YAAA,CAAAC,EAAA9B,EACA,CACA,GACA,GAEA3B,EAAAmB,eAAA,sBAAAQ,CAAA,CAAAC,CAAA,CAAAR,CAAA,EACAA,GAAAA,CAAAA,EAAAnB,CAAA,EACA,IAKAmE,EALApC,EAAA,KAAAnB,EAAAH,EAAAsB,EAAAL,GACAc,EAAAC,KAAAC,GAAA,CAAAf,GAAAA,EAAAgB,EAAA,EAAAhB,EAAAC,IAAA,EAAAF,EAAAE,IAAA,CAAAD,EAAAC,IAAA,CAAAD,EAAAC,IAAA,GAAAG,EAAAa,QAAA,IAAAwB,EAAA3B,KAAAC,GAAA,CAAAhB,EAAAE,IAAA,CAAAY,GAGA6B,EAAAlD,EAAAW,WAAA,EAAAlB,EAAAkB,WAAA,CAAAwC,EAAA,GACAzB,EAAA1B,MAAAA,EAAA2B,OAAA,KAAA3B,EAAA2B,OAAA,CACAhB,EAAAA,GACAuC,EADA,CAEA,QAAA7C,EAAA4C,EAA0B5C,GAAAgB,EAAU,EAAAhB,EAAA,CACpC,IAAAI,EAAAG,EAAAE,OAAA,CAAAT,GACAjB,EAAAqB,EAAA2C,OAAA,CAAAF,GAEA,GADA9D,EAAA,eAAA2B,IAAA,CAAAH,EAAAI,cAAA,CAAAjC,EAAAsB,EAAAjB,EAAA,MAAAA,CAAAA,EAAA,IACA,IAAAA,GAAAN,EAAAiC,IAAA,CAAAN,IACArB,EAAA,IAAAN,EAAAiC,IAAA,CAAAN,EAAAyB,KAAA,GAAA9C,IADA,MAAAuB,EAEAwC,EAAAE,IAAA,CAAA5C,EACA,CAWA,GAVAG,EAAAkB,SAAA,YACA,QAAAzB,EAAA4C,EAA4B5C,GAAAgB,EAAU,EAAAhB,EAAA,CACtC,IAAAI,EAAA0C,CAAA,CAAA9C,EAAA4C,EAAA,CACAzD,EAAAiB,EAAA2C,OAAA,CAAAF,GAAAI,EAAA9D,EAAA0D,EAAA5C,MAAA,CACAd,EAAA,IACAiB,EAAAyB,KAAA,CAAAoB,EAAAA,EAAA5B,EAAApB,MAAA,GAAAoB,GAAA4B,CAAAA,GAAA5B,EAAApB,MAAA,EACA0C,EAAA,GACApC,EAAAwB,YAAA,IAAArD,EAAAsB,EAAAb,GAAAT,EAAAsB,EAAAiD,IACA,CACA,GACAN,EAAA,QACA,CAGA,IAAAX,EAAArC,EAAAkB,iBAAA,EAAAzB,EAAAyB,iBAAA,CACAoB,EAAAtC,EAAAuC,eAAA,EAAA9C,EAAA8C,eAAA,CACA,IAAAF,GAAA,CAAAC,EAAA,SACA,IAAAG,EAAAzC,EAAA0C,gBAAA,EAAAjD,EAAAiD,gBAAA,CACAa,EAAA3C,EAAAE,OAAA,CAAAmC,GAAAO,EAAAD,EAAAH,OAAA,CAAAf,GACA,GAAAmB,IAAAA,EAAA,SACA,IAAAC,EAAApC,GAAA4B,EAAAM,EAAA3C,EAAAE,OAAA,CAAAO,GACAqC,EAAAD,EAAAL,OAAA,CAAAd,EAAAjB,GAAA4B,EAAAO,EAAAnB,EAAA/B,MAAA,IACAqD,EAAA5E,EAAAkE,EAAAO,EAAA,GAAAI,EAAA7E,EAAAsC,EAAAqC,EAAA,GACA,GAAAA,IAAAA,GACA,WAAA3C,IAAA,CAAAH,EAAAI,cAAA,CAAA2C,KACA,WAAA5C,IAAA,CAAAH,EAAAI,cAAA,CAAA4C,KACAhD,EAAAiD,QAAA,CAAAF,EAAAC,EAAA,MAAAR,OAAA,CAAAd,GAAA,GACA,SAIA,IAAAwB,EAAAP,EAAAQ,WAAA,CAAA1B,EAAA9B,EAAAiB,EAAA,EACAwC,EAAAF,IAAAA,EAAA,GAAAP,EAAArB,KAAA,GAAA3B,EAAAiB,EAAA,EAAA4B,OAAA,CAAAd,EAAAwB,EAAAzB,EAAA/B,MAAA,EACA,GAAAwD,IAAAA,GAAAE,IAAAA,GAAAA,EAAA1B,EAAAhC,MAAA,EAAAC,EAAAiB,EAAA,UAEAwC,EAAAP,EAAAL,OAAA,CAAAd,EAAA9B,EAAAgB,EAAA,EACA,IAAAyC,EAAAR,EAAAvB,KAAA,CAAA1B,EAAAgB,EAAA,EAAAuC,WAAA,CAAA1B,EAAA2B,EAAAxD,EAAAgB,EAAA,SAEA,EADA,IAAAwC,GAAAC,IAAAA,EAAA,GAAAzD,EAAAgB,EAAA,CAAAyC,EACAD,CAAAA,IAAAA,GAAAF,IAAAA,GAAAA,GAAAtD,EAAAgB,EAAA,IAEAZ,EAAAkB,SAAA,YACAlB,EAAAwB,YAAA,IAAArD,EAAAsC,EAAAqC,EAAAhC,CAAAA,GAAA+B,EAAAvB,KAAA,CAAAwB,EAAAhC,EAAApB,MAAA,CAAAoD,IAAAhC,EAAAA,EAAApB,MAAA,KACAvB,EAAAsC,EAAAqC,EAAApB,EAAAhC,MAAA,GACA,IAAA4D,EAAAV,EAAAnB,EAAA/B,MAAA,CAGA,GAFAoB,GAAA6B,EAAArB,KAAA,CAAAgC,EAAAA,EAAAxC,EAAApB,MAAA,GAAAoB,GAAAwC,CAAAA,GAAAxC,EAAApB,MAAA,EACAM,EAAAwB,YAAA,IAAArD,EAAAkE,EAAAO,GAAAzE,EAAAkE,EAAAiB,IACAzB,EAAA,QAAApC,EAAA4C,EAAA,EAAwC5C,GAAAgB,EAAU,EAAAhB,EAAA,CAClD,IAAAI,EAAAG,EAAAE,OAAA,CAAAT,GAAAjB,EAAAqB,EAAA2C,OAAA,CAAAX,GACA,IAAArD,CAAAA,IAAAA,GAAAN,EAAAiC,IAAA,CAAAN,EAAAyB,KAAA,GAAA9C,GAAA,GACA,IAAA+E,EAAA/E,EAAAqD,EAAAnC,MAAA,CACAoB,GAAAjB,EAAAyB,KAAA,CAAAiC,EAAAA,EAAAzC,EAAApB,MAAA,GAAAoB,GAAAyC,CAAAA,GAAAzC,EAAApB,MAAA,EACAM,EAAAwB,YAAA,IAAArD,EAAAsB,EAAAjB,GAAAL,EAAAsB,EAAA8D,IACA,CACA,GACA,GACA,EACA,EA7MQC,EAAQ","sources":["webpack://_N_E/./node_modules/codemirror/addon/comment/comment.js"],"sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/5/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  var noOptions = {};\n  var nonWS = /[^\\s\\u00a0]/;\n  var Pos = CodeMirror.Pos, cmp = CodeMirror.cmpPos;\n\n  function firstNonWS(str) {\n    var found = str.search(nonWS);\n    return found == -1 ? 0 : found;\n  }\n\n  CodeMirror.commands.toggleComment = function(cm) {\n    cm.toggleComment();\n  };\n\n  CodeMirror.defineExtension(\"toggleComment\", function(options) {\n    if (!options) options = noOptions;\n    var cm = this;\n    var minLine = Infinity, ranges = this.listSelections(), mode = null;\n    for (var i = ranges.length - 1; i >= 0; i--) {\n      var from = ranges[i].from(), to = ranges[i].to();\n      if (from.line >= minLine) continue;\n      if (to.line >= minLine) to = Pos(minLine, 0);\n      minLine = from.line;\n      if (mode == null) {\n        if (cm.uncomment(from, to, options)) mode = \"un\";\n        else { cm.lineComment(from, to, options); mode = \"line\"; }\n      } else if (mode == \"un\") {\n        cm.uncomment(from, to, options);\n      } else {\n        cm.lineComment(from, to, options);\n      }\n    }\n  });\n\n  // Rough heuristic to try and detect lines that are part of multi-line string\n  function probablyInsideString(cm, pos, line) {\n    return /\\bstring\\b/.test(cm.getTokenTypeAt(Pos(pos.line, 0))) && !/^[\\'\\\"\\`]/.test(line)\n  }\n\n  function getMode(cm, pos) {\n    var mode = cm.getMode()\n    return mode.useInnerComments === false || !mode.innerMode ? mode : cm.getModeAt(pos)\n  }\n\n  CodeMirror.defineExtension(\"lineComment\", function(from, to, options) {\n    if (!options) options = noOptions;\n    var self = this, mode = getMode(self, from);\n    var firstLine = self.getLine(from.line);\n    if (firstLine == null || probablyInsideString(self, from, firstLine)) return;\n\n    var commentString = options.lineComment || mode.lineComment;\n    if (!commentString) {\n      if (options.blockCommentStart || mode.blockCommentStart) {\n        options.fullLines = true;\n        self.blockComment(from, to, options);\n      }\n      return;\n    }\n\n    var end = Math.min(to.ch != 0 || to.line == from.line ? to.line + 1 : to.line, self.lastLine() + 1);\n    var pad = options.padding == null ? \" \" : options.padding;\n    var blankLines = options.commentBlankLines || from.line == to.line;\n\n    self.operation(function() {\n      if (options.indent) {\n        var baseString = null;\n        for (var i = from.line; i < end; ++i) {\n          var line = self.getLine(i);\n          var whitespace = line.search(nonWS) === -1 ? line : line.slice(0, firstNonWS(line));\n          if (baseString == null || baseString.length > whitespace.length) {\n            baseString = whitespace;\n          }\n        }\n        for (var i = from.line; i < end; ++i) {\n          var line = self.getLine(i), cut = baseString.length;\n          if (!blankLines && !nonWS.test(line)) continue;\n          if (line.slice(0, cut) != baseString) cut = firstNonWS(line);\n          self.replaceRange(baseString + commentString + pad, Pos(i, 0), Pos(i, cut));\n        }\n      } else {\n        for (var i = from.line; i < end; ++i) {\n          if (blankLines || nonWS.test(self.getLine(i)))\n            self.replaceRange(commentString + pad, Pos(i, 0));\n        }\n      }\n    });\n  });\n\n  CodeMirror.defineExtension(\"blockComment\", function(from, to, options) {\n    if (!options) options = noOptions;\n    var self = this, mode = getMode(self, from);\n    var startString = options.blockCommentStart || mode.blockCommentStart;\n    var endString = options.blockCommentEnd || mode.blockCommentEnd;\n    if (!startString || !endString) {\n      if ((options.lineComment || mode.lineComment) && options.fullLines != false)\n        self.lineComment(from, to, options);\n      return;\n    }\n    if (/\\bcomment\\b/.test(self.getTokenTypeAt(Pos(from.line, 0)))) return\n\n    var end = Math.min(to.line, self.lastLine());\n    if (end != from.line && to.ch == 0 && nonWS.test(self.getLine(end))) --end;\n\n    var pad = options.padding == null ? \" \" : options.padding;\n    if (from.line > end) return;\n\n    self.operation(function() {\n      if (options.fullLines != false) {\n        var lastLineHasText = nonWS.test(self.getLine(end));\n        self.replaceRange(pad + endString, Pos(end));\n        self.replaceRange(startString + pad, Pos(from.line, 0));\n        var lead = options.blockCommentLead || mode.blockCommentLead;\n        if (lead != null) for (var i = from.line + 1; i <= end; ++i)\n          if (i != end || lastLineHasText)\n            self.replaceRange(lead + pad, Pos(i, 0));\n      } else {\n        var atCursor = cmp(self.getCursor(\"to\"), to) == 0, empty = !self.somethingSelected()\n        self.replaceRange(endString, to);\n        if (atCursor) self.setSelection(empty ? to : self.getCursor(\"from\"), to)\n        self.replaceRange(startString, from);\n      }\n    });\n  });\n\n  CodeMirror.defineExtension(\"uncomment\", function(from, to, options) {\n    if (!options) options = noOptions;\n    var self = this, mode = getMode(self, from);\n    var end = Math.min(to.ch != 0 || to.line == from.line ? to.line : to.line - 1, self.lastLine()), start = Math.min(from.line, end);\n\n    // Try finding line comments\n    var lineString = options.lineComment || mode.lineComment, lines = [];\n    var pad = options.padding == null ? \" \" : options.padding, didSomething;\n    lineComment: {\n      if (!lineString) break lineComment;\n      for (var i = start; i <= end; ++i) {\n        var line = self.getLine(i);\n        var found = line.indexOf(lineString);\n        if (found > -1 && !/comment/.test(self.getTokenTypeAt(Pos(i, found + 1)))) found = -1;\n        if (found == -1 && nonWS.test(line)) break lineComment;\n        if (found > -1 && nonWS.test(line.slice(0, found))) break lineComment;\n        lines.push(line);\n      }\n      self.operation(function() {\n        for (var i = start; i <= end; ++i) {\n          var line = lines[i - start];\n          var pos = line.indexOf(lineString), endPos = pos + lineString.length;\n          if (pos < 0) continue;\n          if (line.slice(endPos, endPos + pad.length) == pad) endPos += pad.length;\n          didSomething = true;\n          self.replaceRange(\"\", Pos(i, pos), Pos(i, endPos));\n        }\n      });\n      if (didSomething) return true;\n    }\n\n    // Try block comments\n    var startString = options.blockCommentStart || mode.blockCommentStart;\n    var endString = options.blockCommentEnd || mode.blockCommentEnd;\n    if (!startString || !endString) return false;\n    var lead = options.blockCommentLead || mode.blockCommentLead;\n    var startLine = self.getLine(start), open = startLine.indexOf(startString)\n    if (open == -1) return false\n    var endLine = end == start ? startLine : self.getLine(end)\n    var close = endLine.indexOf(endString, end == start ? open + startString.length : 0);\n    var insideStart = Pos(start, open + 1), insideEnd = Pos(end, close + 1)\n    if (close == -1 ||\n        !/comment/.test(self.getTokenTypeAt(insideStart)) ||\n        !/comment/.test(self.getTokenTypeAt(insideEnd)) ||\n        self.getRange(insideStart, insideEnd, \"\\n\").indexOf(endString) > -1)\n      return false;\n\n    // Avoid killing block comments completely outside the selection.\n    // Positions of the last startString before the start of the selection, and the first endString after it.\n    var lastStart = startLine.lastIndexOf(startString, from.ch);\n    var firstEnd = lastStart == -1 ? -1 : startLine.slice(0, from.ch).indexOf(endString, lastStart + startString.length);\n    if (lastStart != -1 && firstEnd != -1 && firstEnd + endString.length != from.ch) return false;\n    // Positions of the first endString after the end of the selection, and the last startString before it.\n    firstEnd = endLine.indexOf(endString, to.ch);\n    var almostLastStart = endLine.slice(to.ch).lastIndexOf(startString, firstEnd - to.ch);\n    lastStart = (firstEnd == -1 || almostLastStart == -1) ? -1 : to.ch + almostLastStart;\n    if (firstEnd != -1 && lastStart != -1 && lastStart != to.ch) return false;\n\n    self.operation(function() {\n      self.replaceRange(\"\", Pos(end, close - (pad && endLine.slice(close - pad.length, close) == pad ? pad.length : 0)),\n                        Pos(end, close + endString.length));\n      var openEnd = open + startString.length;\n      if (pad && startLine.slice(openEnd, openEnd + pad.length) == pad) openEnd += pad.length;\n      self.replaceRange(\"\", Pos(start, open), Pos(start, openEnd));\n      if (lead) for (var i = start + 1; i <= end; ++i) {\n        var line = self.getLine(i), found = line.indexOf(lead);\n        if (found == -1 || nonWS.test(line.slice(0, found))) continue;\n        var foundEnd = found + lead.length;\n        if (pad && line.slice(foundEnd, foundEnd + pad.length) == pad) foundEnd += pad.length;\n        self.replaceRange(\"\", Pos(i, found), Pos(i, foundEnd));\n      }\n    });\n    return true;\n  });\n});\n"],"names":["mod","CodeMirror","noOptions","nonWS","Pos","cmp","cmpPos","firstNonWS","str","found","search","getMode","cm","pos","mode","useInnerComments","innerMode","getModeAt","commands","toggleComment","defineExtension","options","minLine","Infinity","ranges","listSelections","i","length","from","to","line","uncomment","lineComment","self","firstLine","getLine","test","getTokenTypeAt","commentString","blockCommentStart","fullLines","blockComment","end","Math","min","ch","lastLine","pad","padding","blankLines","commentBlankLines","operation","indent","baseString","whitespace","slice","cut","replaceRange","startString","endString","blockCommentEnd","lastLineHasText","lead","blockCommentLead","atCursor","getCursor","empty","somethingSelected","setSelection","didSomething","start","lineString","lines","indexOf","push","endPos","startLine","open","endLine","close","insideStart","insideEnd","getRange","lastStart","lastIndexOf","firstEnd","almostLastStart","openEnd","foundEnd","__webpack_require__"],"sourceRoot":""}