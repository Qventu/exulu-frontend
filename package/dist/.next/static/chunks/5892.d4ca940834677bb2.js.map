{"version":3,"file":"static/chunks/5892.d4ca940834677bb2.js","mappings":"8JAGAA,IAAAC,cAAyB,mBAAAC,EAAAC,KACzB,IAAYC,OAAAA,CAAA,CAAAC,kBAAAA,CAAA,CAAAC,oBAAAA,CAAA,EAAiDH,EAC7D,IAAAC,EACA,OAEA,IAAAG,EAAAL,EAAAM,SAAA,GACAC,EAAAP,EAAAQ,UAAA,CAAAH,GACAI,EAAAF,OAAAA,EAAAG,IAAA,SAAAC,IAAA,CAAAJ,EAAAK,MAAA,KACAL,EAAAM,KAAA,CACAN,EAAAO,GAAA,CACAC,EAAA,IAAyBC,EAAAC,EAAQ,CAAAZ,EAAAa,IAAA,CAAAT,GAEjCU,EAAA,CACAC,KAAAC,CAFuB,EAAAL,EAAAM,EAAA,EAA0BpB,EAAAF,EAAAuB,QAAA,GAAAR,EAAAR,EAAAJ,EAAAC,GAEjDoB,GAAA,CAAAC,IACA,IAAAC,EACA,OACAC,KAAA,OAAAD,CAAAA,EAAAD,MAAAA,EAAA,OAAAA,EAAAG,SAAA,GAAAF,KAAA,IAAAA,EAAAA,EAAAD,EAAAI,KAAA,CACAnB,KAAAe,EAAAf,IAAA,CACAoB,YAAAL,EAAAM,aAAA,CACAC,aAAAP,EAAAO,YAAA,CACAC,kBAAAR,EAAAQ,iBAAA,CAEA,GACAC,KAAA,CAAgBhB,KAAAb,EAAAa,IAAA,CAAAiB,GAAA1B,CAAA,EAChB2B,GAAA,CAAclB,KAAAb,EAAAa,IAAA,CAAAiB,GAAA5B,EAAAO,GAAA,CACd,EAMA,MALAK,CAAAA,MAAAA,EAAA,OAAAA,EAAAC,IAAA,GAAAD,EAAAC,IAAA,CAAAiB,MAAA,KACAlB,EAAAe,IAAA,CAAuBpC,IAAAwC,GAAc,CAAAnB,EAAAe,IAAA,CAAAhB,IAAA,CAAAC,EAAAe,IAAA,CAAAC,EAAA,EACrChB,EAAAiB,EAAA,CAAqBtC,IAAAwC,GAAc,CAAAnB,EAAAiB,EAAA,CAAAlB,IAAA,CAAAC,EAAAiB,EAAA,CAAAD,EAAA,EAC3BrC,IAAAyC,MAAiB,CAAAvC,EAAA,gBAAAA,EAAAmB,EAAAZ,IAEzBY,CACA,2BC5BAqB,SAKCC,CAAA,EACD,aAGA,IAAAC,EAAA,yBAsCA,SAAAC,EAAAC,CAAA,CAAA3C,CAAA,EASA,GARA,KAAA2C,EAAA,CAAAA,EACA,KAAA3C,OAAA,CAAAA,EACA,KAAA4C,MAAA,MACA,KAAAC,QAAA,GACA,KAAAC,IAAA,GACA,KAAAC,QAAA,MAAAJ,EAAA,CAAAtC,SAAA,UACA,KAAA2C,QAAA,MAAAL,EAAA,CAAAM,OAAA,MAAAF,QAAA,CAAA9B,IAAA,EAAAmB,MAAA,MAAAO,EAAA,CAAAO,YAAA,GAAAd,MAAA,CAEA,KAAApC,OAAA,CAAAmD,sBAAA,EACA,IAAAC,EAAA,KACAT,EAAAU,EAAA,uBAAAC,YAAA,YAA+DF,EAAAG,cAAA,IAC/D,CACA,CA/CAf,EAAAgB,QAAA,UAAAb,CAAA,CAAAc,CAAA,CAAAzD,CAAA,EACA,IAAAyD,EAAA,OAAAd,EAAAa,QAAA,CAAAxD,GACAA,GAAAA,EAAA0D,KAAA,EAAAD,CAAAA,EAAAC,KAAA,KACA,IAAAC,EAAA,CAAmBC,KAAAH,CAAA,EACnB,GAAAzD,EAAA,QAAA6D,KAAA7D,EAAA2D,CAAA,CAAAE,EAAA,CAAA7D,CAAA,CAAA6D,EAAA,CACA,OAAAlB,EAAAa,QAAA,CAAAG,EACA,EAEAnB,EAAAsB,eAAA,qBAAA9D,CAAA,EACAA,EAAA+D,SAiIApB,CAAA,CAAAqB,CAAA,CAAAhE,CAAA,EACA,IAAAD,EAAA4C,EAAA3C,OAAA,CAAAiE,WAAA,CACAC,EAAA,GACA,QAAAL,KAAAM,EAAAD,CAAA,CAAAL,EAAA,CAAAM,CAAA,CAAAN,EAAA,CACA,GAAA9D,EAAA,QAAA8D,KAAA9D,EACAqE,KAAAA,IAAArE,CAAA,CAAA8D,EAAA,EAAAK,CAAAA,CAAA,CAAAL,EAAA,CAAA9D,CAAA,CAAA8D,EAAA,EACA,GAAA7D,EAAA,QAAA6D,KAAA7D,EACAoE,KAAAA,IAAApE,CAAA,CAAA6D,EAAA,EAAAK,CAAAA,CAAA,CAAAL,EAAA,CAAA7D,CAAA,CAAA6D,EAAA,EAEA,OADAK,EAAAN,IAAA,CAAAS,OAAA,EAAAH,CAAAA,EAAAN,IAAA,CAAAM,EAAAN,IAAA,CAAAS,OAAA,CAAA1B,EAAAqB,EAAA,EACAE,CACA,EA3IA,UAAA7D,SAAA,UAAAL,GACA,IAAAsE,EAAA,KAAAC,cAAA,GACA,IAAAD,CAAAA,EAAAlC,MAAA,KAIA,QAAAoC,iBAAA,IACA,IAAAxE,EAAA4D,IAAA,CAAAa,iBAAA,QAEA,QAAAC,EAAA,EAAsBA,EAAAJ,EAAAlC,MAAA,CAAuBsC,IAC7C,GAAAJ,CAAA,CAAAI,EAAA,CAAAC,IAAA,CAAA1D,IAAA,EAAAqD,CAAA,CAAAI,EAAA,CAAAE,MAAA,CAAA3D,IAAA,OACA,CAEA,KAAA4D,KAAA,CAAAC,gBAAA,OAAAD,KAAA,CAAAC,gBAAA,CAAAC,KAAA,GACA,IAAAC,EAAA,KAAAH,KAAA,CAAAC,gBAAA,KAAApC,EAAA,KAAA1C,EACAgF,CAAAA,EAAAhF,OAAA,CAAA4D,IAAA,GAEApB,EAAAF,MAAA,8BACA0C,EAAAC,MAAA,MACA,GAEAzC,EAAAsB,eAAA,wBACA,KAAAe,KAAA,CAAAC,gBAAA,OAAAD,KAAA,CAAAC,gBAAA,CAAAC,KAAA,EACA,GAiBA,IAAAG,EAAAC,OAAAD,qBAAA,WAAAE,CAAA,EACA,OAAAC,WAAAD,EAAA,OACA,EACAE,EAAAH,OAAAG,oBAAA,EAAAC,aAkGA,SAAAC,EAAAR,CAAA,QACA,iBAAAA,EAAAA,EACAA,EAAAtD,IAAA,CA8CA,SAAA+D,EAAAC,CAAA,CAAAC,CAAA,EACA,KAAAA,GAAAA,GAAAD,GAAA,CACA,GAAAC,OAAAA,EAAAC,QAAA,CAAAC,WAAA,IAAAF,EAAAG,UAAA,EAAAJ,EAAA,OAAAC,EACAA,EAAAA,EAAAG,UAAA,CAEA,CAEA,SAAAC,EAAAf,CAAA,CAAAgB,CAAA,EACA,KAAAC,EAAA,gBAAAC,KAAAC,KAAA,CAAAD,KAAAE,MAAA,OACA,KAAApB,UAAA,CAAAA,EACA,KAAAgB,IAAA,CAAAA,EACA,KAAAK,MAAA,IACA,IAsDAC,EAqCAC,EA3FA3D,EAAA,KAAAD,EAAAqC,EAAArC,EAAA,CACA6D,EAAA7D,EAAA8D,aAAA,GAAAD,aAAA,CACAE,EAAAF,EAAAG,WAAA,EAAAH,EAAAE,YAAA,CAEAE,EAAA,KAAAA,KAAA,CAAAJ,EAAAK,aAAA,OACAD,EAAAE,YAAA,mBACAF,EAAAE,YAAA,yBACAF,EAAAX,EAAA,MAAAA,EAAA,CACA,IAAAc,EAAA/B,EAAArC,EAAA,CAAA3C,OAAA,CAAA+G,KAAA,CACAH,EAAAI,SAAA,qBAAAD,EACA,KAAAE,YAAA,CAAAjB,EAAAiB,YAAA,IAGA,QADAC,EAAAlB,EAAA7E,IAAA,CACAuD,EAAA,EAAoBA,EAAAwC,EAAA9E,MAAA,CAAwB,EAAAsC,EAAA,CAC5C,IAAAyC,EAAAP,EAAAQ,WAAA,CAAAZ,EAAAK,aAAA,QAAAzG,EAAA8G,CAAA,CAAAxC,EAAA,CACAsC,EAAAK,kBAAA3C,CAAAA,GAAA,KAAAuC,YAAA,QAAAxE,CAAA,CACA,OAAArC,EAAA4G,SAAA,EAAAA,CAAAA,EAAA5G,EAAA4G,SAAA,KAAAA,CAAA,EACAG,EAAAH,SAAA,CAAAA,EACAtC,GAAA,KAAAuC,YAAA,EAAAE,EAAAL,YAAA,yBACAK,EAAAlB,EAAA,MAAAA,EAAA,KAAAvB,EACAyC,EAAAL,YAAA,kBACA1G,EAAAkH,MAAA,CAAAlH,EAAAkH,MAAA,CAAAH,EAAAnB,EAAA5F,GACA+G,EAAAC,WAAA,CAAAZ,EAAAe,cAAA,CAAAnH,EAAAoH,WAAA,EAAAhC,EAAApF,KACA+G,EAAAM,MAAA,CAAA/C,CACA,CAZA,IAcAgD,EAAA1C,EAAAhF,OAAA,CAAA0H,SAAA,EAAAlB,EAAAmB,IAAA,CACA3D,EAAArB,EAAAiF,YAAA,CAAA5C,EAAAhF,OAAA,CAAA6H,aAAA,CAAA7B,EAAA/D,IAAA,OACA6F,EAAA9D,EAAA8D,IAAA,CAAAC,EAAA/D,EAAAgE,MAAA,CAAAC,EAAA,GACAC,EAAA,EAAAC,EAAA,EACA,GAAAT,IAAAlB,EAAAmB,IAAA,EAGA,IAAAS,EAAAC,KADA,gCAAAC,OAAA,CAAA5B,EAAA6B,gBAAA,CAAAb,GAAA5G,QAAA,EACA4G,EAAAA,EAAAU,YAAA,CACAI,EAAAJ,EAAAK,qBAAA,GACAC,EAAAlC,EAAAmB,IAAA,CAAAc,qBAAA,GACAP,EAAAM,EAAAV,IAAA,CAAAY,EAAAZ,IAAA,CAAAM,EAAAO,UAAA,CACAR,EAAAK,EAAAT,GAAA,CAAAW,EAAAX,GAAA,CAAAK,EAAAQ,SAAA,CAEAhC,EAAAiC,KAAA,CAAAf,IAAA,GAAAI,EAAA,KACAtB,EAAAiC,KAAA,CAAAd,GAAA,GAAAI,EAAA,KAGA,IAAAW,EAAApC,EAAAqC,UAAA,EAAA7C,KAAA8C,GAAA,CAAAxC,EAAAmB,IAAA,CAAAsB,WAAA,CAAAzC,EAAA0C,eAAA,CAAAD,WAAA,EACAE,EAAAzC,EAAA0C,WAAA,EAAAlD,KAAA8C,GAAA,CAAAxC,EAAAmB,IAAA,CAAA0B,YAAA,CAAA7C,EAAA0C,eAAA,CAAAG,YAAA,EACA3B,EAAAN,WAAA,CAAAR,GACAjE,EAAA8D,aAAA,GAAAK,YAAA,6BACAnE,EAAA8D,aAAA,GAAAK,YAAA,kBAAAb,EAAA,EACAtD,EAAA8D,aAAA,GAAAK,YAAA,8BAAAb,EAAA,UAAAgB,YAAA,EAEA,IAAAqC,EAAAtE,EAAAhF,OAAA,CAAAuJ,aAAA,CAAA3C,EAAA6B,qBAAA,OAAAe,QACAC,EAAAzE,EAAAA,EAAAhF,OAAA,CAAA0J,mBAAA,EAAA9C,EAAA+C,YAAA,CAAA/C,EAAAgD,YAAA,GAOA,GAHAvE,WAAA,WAA4BiB,EAAA3D,EAAAkH,aAAA,KAG5BC,EADA9B,MAAA,CAAAmB,EACA,GACA,IAAAY,EAAAT,EAAAtB,MAAA,CAAAsB,EAAAvB,GAAA,CAAAiC,EAAAV,EAAAvB,GAAA,CAAA/D,CAAAA,EAAAgE,MAAA,CAAAhE,EAAA+D,GAAA,GACAoB,CAAAA,EAAAG,EAAAvB,GAAA,CAAAiC,GACAD,EAAAC,GAAApD,CAAAA,EAAAiC,KAAA,CAAAkB,MAAA,EAAAA,EAAAC,CAAA,QACApD,EAAAiC,KAAA,CAAAd,GAAA,EAAAA,EAAA/D,EAAA+D,GAAA,CAAAgC,CAAA,EAAA5B,EAAA,KACAF,EAAA,IAEArB,EAAAiC,KAAA,CAAAkB,MAAA,GAAAT,EAAAvB,GAAA,OAEA,CACA,IAAAkC,EAAAX,EAAAY,KAAA,CAAApB,EASA,GARAW,GAAAQ,CAAAA,GAAAtH,EAAAwH,OAAA,CAAAC,cAAA,EACAH,EAAA,IACAX,EAAAY,KAAA,CAAAZ,EAAAxB,IAAA,CAAAgB,IACAlC,EAAAiC,KAAA,CAAAwB,KAAA,UACAJ,GAAA,EAAAC,KAAA,CAAAZ,EAAAxB,IAAA,CAAAgB,GAEAlC,EAAAiC,KAAA,CAAAf,IAAA,EAAAA,EAAA5B,KAAA8C,GAAA,CAAAhF,EAAA8D,IAAA,CAAAmC,EAAA/B,EAAA,UAEAuB,EAAA,QAAAa,EAAA1D,EAAA2D,UAAA,CAAmDD,EAAMA,EAAAA,EAAAE,WAAA,CACzDF,EAAAzB,KAAA,CAAA4B,YAAA,CAAA9H,EAAAwH,OAAA,CAAAC,cAAA,MAEAzH,EAAA+H,SAAA,MAAAC,MAAA,CAAAC,SAvIA5F,CAAA,CAAA6F,CAAA,EACA,IAAAC,EAAA,CACAC,GAAA,WAAsBF,EAAAG,SAAA,MACtBC,KAAA,WAAwBJ,EAAAG,SAAA,KACxBE,OAAA,WAA0BL,EAAAG,SAAA,EAAAH,EAAAM,QAAA,UAC1BC,SAAA,WAA4BP,EAAAG,SAAA,CAAAH,EAAAM,QAAA,UAC5BE,KAAA,WAAwBR,EAAAS,QAAA,KACxBC,IAAA,WAAuBV,EAAAS,QAAA,CAAAT,EAAAzI,MAAA,KACvBoJ,MAAAX,EAAAY,IAAA,CACAC,IAAAb,EAAAY,IAAA,CACAE,IAAAd,EAAA9F,KAAA,EAGA,MAAArE,IAAA,CAAAkL,UAAAC,QAAA,IAGAf,CAAA,sBAAsCD,EAAAG,SAAA,MACtCF,CAAA,sBAAsCD,EAAAG,SAAA,MAGtC,IAAAc,EAAA9G,EAAAhF,OAAA,CAAA+L,UAAA,CACAC,EAAAF,EAAA,GAA6BhB,EAC7B,SAAAmB,EAAAC,CAAA,CAAAC,CAAA,EACA,IAAAC,EAEAA,EADA,iBAAAD,EACA,SAAAxJ,CAAA,EAA+B,OAAAwJ,EAAAxJ,EAAAkI,EAAA,EAE/BC,EAAAuB,cAAA,CAAAF,GACArB,CAAA,CAAAqB,EAAA,CAEAA,EACAH,CAAA,CAAAE,EAAA,CAAAE,CACA,CACA,GAAAN,EACA,QAAAI,KAAAJ,EAAAA,EAAAO,cAAA,CAAAH,IACAD,EAAAC,EAAAJ,CAAA,CAAAI,EAAA,EACA,IAAAI,EAAAtH,EAAAhF,OAAA,CAAAuM,SAAA,CACA,GAAAD,EACA,QAAAJ,KAAAI,EAAAA,EAAAD,cAAA,CAAAH,IACAD,EAAAC,EAAAI,CAAA,CAAAJ,EAAA,EACA,OAAAF,CACA,EA8FAhH,EAAA,CACAgG,UAAA,SAAAwB,CAAA,CAAAC,CAAA,EAA0C7J,EAAA8J,YAAA,CAAA9J,EAAAqE,YAAA,CAAAuF,EAAAC,EAAA,EAC1CnB,SAAA,SAAAkB,CAAA,EAA8B5J,EAAA8J,YAAA,CAAAF,EAAA,EAC9BrB,SAAA,WAA6B,OAAAvI,EAAA+J,YAAA,IAC7BvK,OAAA8E,EAAA9E,MAAA,CACA2C,MAAA,WAA0BC,EAAAD,KAAA,IAC1B0G,KAAA,WAAyB7I,EAAA6I,IAAA,IACzBzF,KAAAA,CACA,IAEAhB,EAAAhF,OAAA,CAAA4M,cAAA,GAEAjK,EAAAU,EAAA,aAAAwJ,MAAA,YAA+CtG,EAAAlB,WAAA,WAAwCL,EAAAD,KAAA,IAAqB,OAC5GpC,EAAAU,EAAA,cAAAyJ,OAAA,YAAiDvH,aAAAgB,EAAA,IAGjD5D,EAAAU,EAAA,eAAA0J,QAAA,YACA,IAAAC,EAAArK,EAAAkH,aAAA,GAAA9J,EAAA4C,EAAAsK,iBAAA,GAAAxE,qBAAA,GACAnC,GAAAA,CAAAA,EAAA3D,EAAAkH,aAAA,IACA,IAAAqD,EAAAnF,EAAAzB,EAAAyB,GAAA,CAAAiF,EAAAjF,GAAA,CACAoF,EAAAD,EAAAxG,CAAAA,EAAA0G,WAAA,GAAA5G,EAAA0C,eAAA,EAAA1C,EAAAmB,IAAA,EAAAiB,SAAA,EAEA,GADAX,GAAAkF,CAAAA,GAAAvG,EAAAyC,YAAA,EACA8D,GAAApN,EAAAgI,GAAA,EAAAoF,GAAApN,EAAAiI,MAAA,QAAAhD,EAAAD,KAAA,EACA6B,CAAAA,EAAAiC,KAAA,CAAAd,GAAA,CAAAmF,EAAA,KACAtG,EAAAiC,KAAA,CAAAf,IAAA,GAAAxB,EAAAwB,IAAA,CAAAkF,EAAAlF,IAAA,KACA,GAEAtF,EAAAa,EAAA,CAAAuD,EAAA,oBAAAyG,CAAA,EACA,IAAAC,EAAA7H,EAAAmB,EAAAyG,EAAAE,MAAA,EAAAF,EAAAG,UAAA,EACAF,GAAAA,MAAAA,EAAA7F,MAAA,GAAkC7E,EAAA8J,YAAA,CAAAY,EAAA7F,MAAA,EAA+B7E,EAAA6I,IAAA,GACjE,GAEAjJ,EAAAa,EAAA,CAAAuD,EAAA,iBAAAyG,CAAA,EACA,IAAAC,EAAA7H,EAAAmB,EAAAyG,EAAAE,MAAA,EAAAF,EAAAG,UAAA,EACAF,GAAAA,MAAAA,EAAA7F,MAAA,GACA7E,EAAA8J,YAAA,CAAAY,EAAA7F,MAAA,EACAzC,EAAAhF,OAAA,CAAAyN,qBAAA,EAAA7K,EAAA6I,IAAA,GAEA,GAEAjJ,EAAAa,EAAA,CAAAuD,EAAA,uBACAvB,WAAA,WAA4B1C,EAAA+K,KAAA,IAAY,GACxC,GAGA,IAAAC,EAAA,KAAAC,oBAAA,GAMA,MALAD,CAAAA,IAAAA,EAAA1L,IAAA,EAAA0L,IAAAA,EAAAxL,EAAA,GACA,KAAA0L,cAAA,GAGArL,EAAAF,MAAA,CAAA0D,EAAA,SAAAkB,CAAA,MAAAD,YAAA,EAAAL,EAAAkH,UAAA,MAAA7G,YAAA,GACA,EACA,CAkFA,SAAA8G,EAAAnK,CAAA,CAAAjB,CAAA,CAAA3C,CAAA,CAAAgO,CAAA,EACA,GAAApK,EAAAF,KAAA,CACAE,EAAAjB,EAAAqL,EAAAhO,OACM,CACN,IAAAiO,EAAArK,EAAAjB,EAAA3C,EACAiO,CAAAA,GAAAA,EAAAC,IAAA,CAAAD,EAAAC,IAAA,CAAAF,GACAA,EAAAC,EACA,CACA,CA1XAvL,EAAAyL,SAAA,EACApJ,MAAA,WACA,KAAAqJ,MAAA,KACA,KAAAzL,EAAA,CAAAkC,KAAA,CAAAC,gBAAA,MACA,KAAAhC,IAAA,MACA,KAAA9C,OAAA,CAAAmD,sBAAA,EACA,KAAAR,EAAA,CAAA0L,GAAA,uBAAA/K,YAAA,EAGA,KAAAV,MAAA,OAAAoD,IAAA,EAAAxD,EAAAF,MAAA,MAAA0D,IAAA,UACA,KAAApD,MAAA,OAAAA,MAAA,CAAAmC,KAAA,GACAvC,EAAAF,MAAA,MAAAK,EAAA,sBAAAA,EAAA,EACA,EAEAyL,OAAA,WACA,YAAAzL,EAAA,CAAAkC,KAAA,CAAAC,gBAAA,QAGA2G,KAAA,SAAAzF,CAAA,CAAAtB,CAAA,EACA,IAAAM,EAAAgB,EAAA7E,IAAA,CAAAuD,EAAA,CAAAtB,EAAA,KACA,KAAAT,EAAA,CAAA2L,SAAA,YACAtJ,EAAApB,IAAA,CACAoB,EAAApB,IAAA,CAAAR,EAAAT,EAAA,CAAAqD,EAAAhB,GAEA5B,EAAAT,EAAA,CAAA4L,YAAA,CAAA/I,EAAAR,GAAAA,EAAA/C,IAAA,EAAA+D,EAAA/D,IAAA,CACA+C,EAAA7C,EAAA,EAAA6D,EAAA7D,EAAA,aACAK,EAAAF,MAAA,CAAA0D,EAAA,OAAAhB,GACA5B,EAAAT,EAAA,CAAA6L,cAAA,EACA,GACA,KAAAxO,OAAA,CAAAyO,WAAA,EACA,KAAA1J,KAAA,EAEA,EAEAxB,eAAA,WACA,KAAAV,QAAA,GACAyC,EAAA,KAAAzC,QAAA,EACA,KAAAA,QAAA,IAGA,IAAA6L,EAAA,KAAA3L,QAAA,CACA,KAAAiD,IAAA,EACA0I,CAAAA,EAAA,KAAA1I,IAAA,CAAA/D,IAAA,EAGA,IAAA+B,EAAA,KAAArB,EAAA,CAAAtC,SAAA,GAAAY,EAAA,KAAA0B,EAAA,CAAAM,OAAA,CAAAe,EAAA/C,IAAA,EACA,GAAA+C,EAAA/C,IAAA,OAAA8B,QAAA,CAAA9B,IAAA,EAAAA,EAAAmB,MAAA,CAAA4B,EAAA9B,EAAA,OAAAc,QAAA,MAAAD,QAAA,CAAAb,EAAA,EACA8B,EAAA9B,EAAA,CAAAwM,EAAAxM,EAAA,OAAAS,EAAA,CAAA6B,iBAAA,IACA,CAAAR,EAAA9B,EAAA,OAAAlC,OAAA,CAAA2O,eAAA,CAAAjO,IAAA,CAAAO,EAAA2N,MAAA,CAAA5K,EAAA9B,EAAA,KACA,KAAA6C,KAAA,OACQ,CACR,IAAA3B,EAAA,KACA,KAAAP,QAAA,CAAAqC,EAAA,WAA0D9B,EAAA6B,MAAA,KAC1D,KAAArC,MAAA,OAAAA,MAAA,CAAAiM,OAAA,EACA,CACA,EAEA5J,OAAA,SAAA6J,CAAA,EACA,cAAAhM,IAAA,EACA,IAAAM,EAAA,KAAA2L,EAAA,OAAAjM,IAAA,CACAiL,EAAA,KAAA/N,OAAA,CAAA4D,IAAA,MAAAjB,EAAA,MAAA3C,OAAA,UAAAgG,CAAA,EACA5C,EAAAN,IAAA,EAAAiM,GAAA3L,EAAA4L,YAAA,CAAAhJ,EAAA8I,EACA,GACA,EAEAE,aAAA,SAAAhJ,CAAA,CAAA8I,CAAA,EACA,KAAA9I,IAAA,EAAAxD,EAAAF,MAAA,MAAA0D,IAAA,WAEA,IAAAK,EAAA,KAAAzD,MAAA,OAAAA,MAAA,CAAAyD,MAAA,EAAAyI,GAAA,KAAA9O,OAAA,CAAAiP,cAAA,CACA,KAAArM,MAAA,OAAAA,MAAA,CAAAmC,KAAA,GAEA,KAAAiB,IAAA,CAAAA,EAEAA,GAAAA,EAAA7E,IAAA,CAAAiB,MAAA,GACAiE,GAAAL,GAAAA,EAAA7E,IAAA,CAAAiB,MAAA,CACA,KAAAqJ,IAAA,CAAAzF,EAAA,IAEA,KAAApD,MAAA,KAAAmD,EAAA,KAAAC,GACAxD,EAAAF,MAAA,CAAA0D,EAAA,UAGA,CACA,EAgNAD,EAAAoI,SAAA,EACApJ,MAAA,WACA,QAAAC,UAAA,CAAApC,MAAA,QACA,KAAAoC,UAAA,CAAApC,MAAA,MACA,KAAAgE,KAAA,CAAAd,UAAA,OAAAc,KAAA,CAAAd,UAAA,CAAAoJ,WAAA,MAAAtI,KAAA,EACA,KAAA5B,UAAA,CAAArC,EAAA,CAAAwM,YAAA,MAAAxE,MAAA,EACA,IAAAyE,EAAA,KAAApK,UAAA,CAAArC,EAAA,CAAA8D,aAAA,GACA2I,EAAAC,eAAA,0BACAD,EAAAC,eAAA,cAEA,IAAA1M,EAAA,KAAAqC,UAAA,CAAArC,EAAA,CACA,KAAAqC,UAAA,CAAAhF,OAAA,CAAA4M,cAAA,GACAjK,EAAA0L,GAAA,aAAAxB,MAAA,EACAlK,EAAA0L,GAAA,cAAAvB,OAAA,GAEAnK,EAAA0L,GAAA,eAAAtB,QAAA,EACA,EAEA8B,QAAA,WACA,KAAA7J,UAAA,CAAArC,EAAA,CAAAwM,YAAA,MAAAxE,MAAA,EACA,IAAA/H,EAAA,KACA,KAAA+H,MAAA,EAAqBa,MAAA,WAAoB5I,EAAAyD,MAAA,MACzC,KAAArB,UAAA,CAAArC,EAAA,CAAA+H,SAAA,MAAAC,MAAA,CACA,EAEAc,KAAA,WACA,KAAAzG,UAAA,CAAAyG,IAAA,MAAAzF,IAAA,MAAAiB,YAAA,CACA,EAEAyF,aAAA,SAAAhI,CAAA,CAAA+H,CAAA,EAKA,GAJA/H,GAAA,KAAAsB,IAAA,CAAA7E,IAAA,CAAAiB,MAAA,CACAsC,EAAA+H,EAAA,KAAAzG,IAAA,CAAA7E,IAAA,CAAAiB,MAAA,KACAsC,EAAA,GACAA,CAAAA,EAAA+H,EAAA,OAAAzG,IAAA,CAAA7E,IAAA,CAAAiB,MAAA,IACA,KAAA6E,YAAA,EAAAvC,GACA,IAAA4F,EAAA,KAAA1D,KAAA,CAAAkH,UAAA,MAAA7G,YAAA,EACAqD,IACAA,EAAAtD,SAAA,CAAAsD,EAAAtD,SAAA,CAAAsI,OAAA,KAAA7M,EAAA,IACA6H,EAAA+E,eAAA,mBAEA/E,EAAA,KAAA1D,KAAA,CAAAkH,UAAA,MAAA7G,YAAA,CAAAvC,EAAA,CACA4F,EAAAtD,SAAA,MAAAvE,EACA6H,EAAAxD,YAAA,yBACA,KAAA9B,UAAA,CAAArC,EAAA,CAAA8D,aAAA,GAAAK,YAAA,yBAAAwD,EAAArE,EAAA,EACA,KAAA4H,cAAA,GACArL,EAAAF,MAAA,MAAA0D,IAAA,eAAAA,IAAA,CAAA7E,IAAA,MAAA8F,YAAA,EAAAqD,GACA,EAEAuD,eAAA,WACA,IAAAF,EAAA,KAAAC,oBAAA,GACA2B,EAAA,KAAA3I,KAAA,CAAAkH,UAAA,CAAAH,EAAA1L,IAAA,EACAuN,EAAA,KAAA5I,KAAA,CAAAkH,UAAA,CAAAH,EAAAxL,EAAA,EACAsN,EAAA,KAAA7I,KAAA,CAAA2D,UAAA,CACAgF,EAAApH,SAAA,MAAAvB,KAAA,CAAAgC,SAAA,CACA,KAAAhC,KAAA,CAAAgC,SAAA,CAAA2G,EAAApH,SAAA,CAAAsH,EAAAtH,SAAA,CACAqH,EAAArH,SAAA,CAAAqH,EAAAnG,YAAA,MAAAzC,KAAA,CAAAgC,SAAA,MAAAhC,KAAA,CAAAgD,YAAA,EACA,MAAAhD,KAAA,CAAAgC,SAAA,CAAA4G,EAAArH,SAAA,CAAAqH,EAAAnG,YAAA,MAAAzC,KAAA,CAAAgD,YAAA,CAAA6F,EAAAtH,SAAA,CACA,EAEAwE,aAAA,WACA,OAAAzG,KAAAC,KAAA,MAAAS,KAAA,CAAAgD,YAAA,MAAAhD,KAAA,CAAA2D,UAAA,CAAAlB,YAAA,IACA,EAEAuE,qBAAA,WACA,IAAA8B,EAAA,KAAA1K,UAAA,CAAAhF,OAAA,CAAA2P,YAAA,IACA,OACA1N,KAAAiE,KAAA8C,GAAA,QAAA/B,YAAA,CAAAyI,GACAvN,GAAA+D,KAAA0J,GAAA,MAAA5J,IAAA,CAAA7E,IAAA,CAAAiB,MAAA,QAAA6E,YAAA,CAAAyI,EACA,CACA,CACA,EA8CAlN,EAAA1C,cAAA,gBACAuE,QA3BA,SAAA1B,CAAA,CAAAqB,CAAA,EACA,IAAA6L,EAAAC,EAAAnN,EAAAoN,UAAA,CAAA/L,EAAA,QACA,GAAA8L,EAAA1N,MAAA,EACA,IAAA4N,EAAA,SAAArN,CAAA,CAAAqL,CAAA,CAAAhO,CAAA,EACA,IAAAiQ,EAAAC,SAtBAvN,CAAA,CAAAmN,CAAA,EACA,IAAAnN,EAAA6B,iBAAA,UAAAsL,EAEA,QADA7B,EAAA,GACAvJ,EAAA,EAAoBA,EAAAoL,EAAA1N,MAAA,CAAoBsC,IACxCoL,CAAA,CAAApL,EAAA,CAAAD,iBAAA,EAAAwJ,EAAAkC,IAAA,CAAAL,CAAA,CAAApL,EAAA,EACA,OAAAuJ,CACA,EAgBAtL,EAAAmN,IAQAM,SAPAA,EAAA1L,CAAA,EACA,GAAAA,GAAAuL,EAAA7N,MAAA,QAAA4L,EAAA,MACAD,EAAAkC,CAAA,CAAAvL,EAAA,CAAA/B,EAAA3C,EAAA,SAAAiO,CAAA,EACAA,GAAAA,EAAA9M,IAAA,CAAAiB,MAAA,GAAA4L,EAAAC,GACAmC,EAAA1L,EAAA,EACA,EACA,EACA,EACA,EAGA,OAFAsL,EAAAtM,KAAA,IACAsM,EAAAvL,iBAAA,IACAuL,CACA,OAAM,CAAAH,EAAAlN,EAAA0N,SAAA,CAAA1N,EAAAtC,SAAA,iBACN,SAAAsC,CAAA,EAA4B,OAAAH,EAAAoB,IAAA,CAAA0M,QAAA,CAAA3N,EAAA,CAAqCkN,MAAAA,CAAA,EAAa,EACxErN,EAAAoB,IAAA,CAAA2M,OAAA,CACN,SAAA5N,CAAA,CAAA3C,CAAA,EAAqC,OAAAwC,EAAAoB,IAAA,CAAA2M,OAAA,CAAA5N,EAAA3C,EAAA,EAErC,YAEA,CAIA,GAEAwC,EAAA1C,cAAA,4BAAA6C,CAAA,CAAA3C,CAAA,EACA,IACAwQ,EADApQ,EAAAuC,EAAAtC,SAAA,GAAAC,EAAAqC,EAAApC,UAAA,CAAAH,GACA6B,EAAAO,EAAAH,GAAA,CAAAjC,EAAAa,IAAA,CAAAX,EAAAM,KAAA,CACAN,CAAAA,EAAAM,KAAA,CAAAR,EAAA8B,EAAA,OAAAxB,IAAA,CAAAJ,EAAAK,MAAA,CAAAiO,MAAA,CAAAxO,EAAA8B,EAAA,CAAA5B,EAAAM,KAAA,KACA4P,EAAAlQ,EAAAK,MAAA,CAAA8P,MAAA,GAAArQ,EAAA8B,EAAA,CAAA5B,EAAAM,KAAA,GAEA4P,EAAA,GACAvO,EAAA7B,GAGA,QADAsQ,EAAA,GACAhM,EAAA,EAAoBA,EAAA1E,EAAA6P,KAAA,CAAAzN,MAAA,CAA0BsC,IAAA,CAC9C,IAAAiM,EAAA3Q,EAAA6P,KAAA,CAAAnL,EAAA,CACAiM,EAAAC,KAAA,GAAAJ,EAAApO,MAAA,GAAAoO,GACAE,EAAAP,IAAA,CAAAQ,EACA,CAEA,GAAAD,EAAAtO,MAAA,QAA8BjB,KAAAuP,EAAAzO,KAAAA,EAAAE,GAd9B/B,CAc8B,CAC9B,GAEAoC,EAAAqO,QAAA,CAAAC,YAAA,CAAAtO,EAAAgB,QAAA,CAEA,IAAAW,EAAA,CACAP,KAAApB,EAAAoB,IAAA,CAAAmN,IAAA,CACA9B,eAAA,GACApH,cAAA,GACA8G,gBAAA,mBACAF,YAAA,GACA7B,eAAA,GACAzJ,uBAAA,GACAsK,sBAAA,GACA/F,UAAA,KACAqE,WAAA,KACAQ,UAAA,KACA7C,oBAAA,GACAH,cAAA,EACA,EAEA/G,EAAAwO,YAAA,oBACA,EAngBQC,EAAQ","sources":["webpack://_N_E/./node_modules/codemirror-graphql/esm/hint.js","webpack://_N_E/./node_modules/codemirror/addon/hint/show-hint.js"],"sourcesContent":["import CodeMirror from 'codemirror';\nimport 'codemirror/addon/hint/show-hint.js';\nimport { getAutocompleteSuggestions, Position } from 'graphql-language-service';\nCodeMirror.registerHelper('hint', 'graphql', (editor, options) => {\n    const { schema, externalFragments, autocompleteOptions } = options;\n    if (!schema) {\n        return;\n    }\n    const cur = editor.getCursor();\n    const token = editor.getTokenAt(cur);\n    const tokenStart = token.type !== null && /\"|\\w/.test(token.string[0])\n        ? token.start\n        : token.end;\n    const position = new Position(cur.line, tokenStart);\n    const rawResults = getAutocompleteSuggestions(schema, editor.getValue(), position, token, externalFragments, autocompleteOptions);\n    const results = {\n        list: rawResults.map(item => {\n            var _a;\n            return ({\n                text: (_a = item === null || item === void 0 ? void 0 : item.rawInsert) !== null && _a !== void 0 ? _a : item.label,\n                type: item.type,\n                description: item.documentation,\n                isDeprecated: item.isDeprecated,\n                deprecationReason: item.deprecationReason,\n            });\n        }),\n        from: { line: cur.line, ch: tokenStart },\n        to: { line: cur.line, ch: token.end },\n    };\n    if ((results === null || results === void 0 ? void 0 : results.list) && results.list.length > 0) {\n        results.from = CodeMirror.Pos(results.from.line, results.from.ch);\n        results.to = CodeMirror.Pos(results.to.line, results.to.ch);\n        CodeMirror.signal(editor, 'hasCompletion', editor, results, token);\n    }\n    return results;\n});\n//# sourceMappingURL=hint.js.map","// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/5/LICENSE\n\n// declare global: DOMRect\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  var HINT_ELEMENT_CLASS        = \"CodeMirror-hint\";\n  var ACTIVE_HINT_ELEMENT_CLASS = \"CodeMirror-hint-active\";\n\n  // This is the old interface, kept around for now to stay\n  // backwards-compatible.\n  CodeMirror.showHint = function(cm, getHints, options) {\n    if (!getHints) return cm.showHint(options);\n    if (options && options.async) getHints.async = true;\n    var newOpts = {hint: getHints};\n    if (options) for (var prop in options) newOpts[prop] = options[prop];\n    return cm.showHint(newOpts);\n  };\n\n  CodeMirror.defineExtension(\"showHint\", function(options) {\n    options = parseOptions(this, this.getCursor(\"start\"), options);\n    var selections = this.listSelections()\n    if (selections.length > 1) return;\n    // By default, don't allow completion when something is selected.\n    // A hint function can have a `supportsSelection` property to\n    // indicate that it can handle selections.\n    if (this.somethingSelected()) {\n      if (!options.hint.supportsSelection) return;\n      // Don't try with cross-line selections\n      for (var i = 0; i < selections.length; i++)\n        if (selections[i].head.line != selections[i].anchor.line) return;\n    }\n\n    if (this.state.completionActive) this.state.completionActive.close();\n    var completion = this.state.completionActive = new Completion(this, options);\n    if (!completion.options.hint) return;\n\n    CodeMirror.signal(this, \"startCompletion\", this);\n    completion.update(true);\n  });\n\n  CodeMirror.defineExtension(\"closeHint\", function() {\n    if (this.state.completionActive) this.state.completionActive.close()\n  })\n\n  function Completion(cm, options) {\n    this.cm = cm;\n    this.options = options;\n    this.widget = null;\n    this.debounce = 0;\n    this.tick = 0;\n    this.startPos = this.cm.getCursor(\"start\");\n    this.startLen = this.cm.getLine(this.startPos.line).length - this.cm.getSelection().length;\n\n    if (this.options.updateOnCursorActivity) {\n      var self = this;\n      cm.on(\"cursorActivity\", this.activityFunc = function() { self.cursorActivity(); });\n    }\n  }\n\n  var requestAnimationFrame = window.requestAnimationFrame || function(fn) {\n    return setTimeout(fn, 1000/60);\n  };\n  var cancelAnimationFrame = window.cancelAnimationFrame || clearTimeout;\n\n  Completion.prototype = {\n    close: function() {\n      if (!this.active()) return;\n      this.cm.state.completionActive = null;\n      this.tick = null;\n      if (this.options.updateOnCursorActivity) {\n        this.cm.off(\"cursorActivity\", this.activityFunc);\n      }\n\n      if (this.widget && this.data) CodeMirror.signal(this.data, \"close\");\n      if (this.widget) this.widget.close();\n      CodeMirror.signal(this.cm, \"endCompletion\", this.cm);\n    },\n\n    active: function() {\n      return this.cm.state.completionActive == this;\n    },\n\n    pick: function(data, i) {\n      var completion = data.list[i], self = this;\n      this.cm.operation(function() {\n        if (completion.hint)\n          completion.hint(self.cm, data, completion);\n        else\n          self.cm.replaceRange(getText(completion), completion.from || data.from,\n                               completion.to || data.to, \"complete\");\n        CodeMirror.signal(data, \"pick\", completion);\n        self.cm.scrollIntoView();\n      });\n      if (this.options.closeOnPick) {\n        this.close();\n      }\n    },\n\n    cursorActivity: function() {\n      if (this.debounce) {\n        cancelAnimationFrame(this.debounce);\n        this.debounce = 0;\n      }\n\n      var identStart = this.startPos;\n      if(this.data) {\n        identStart = this.data.from;\n      }\n\n      var pos = this.cm.getCursor(), line = this.cm.getLine(pos.line);\n      if (pos.line != this.startPos.line || line.length - pos.ch != this.startLen - this.startPos.ch ||\n          pos.ch < identStart.ch || this.cm.somethingSelected() ||\n          (!pos.ch || this.options.closeCharacters.test(line.charAt(pos.ch - 1)))) {\n        this.close();\n      } else {\n        var self = this;\n        this.debounce = requestAnimationFrame(function() {self.update();});\n        if (this.widget) this.widget.disable();\n      }\n    },\n\n    update: function(first) {\n      if (this.tick == null) return\n      var self = this, myTick = ++this.tick\n      fetchHints(this.options.hint, this.cm, this.options, function(data) {\n        if (self.tick == myTick) self.finishUpdate(data, first)\n      })\n    },\n\n    finishUpdate: function(data, first) {\n      if (this.data) CodeMirror.signal(this.data, \"update\");\n\n      var picked = (this.widget && this.widget.picked) || (first && this.options.completeSingle);\n      if (this.widget) this.widget.close();\n\n      this.data = data;\n\n      if (data && data.list.length) {\n        if (picked && data.list.length == 1) {\n          this.pick(data, 0);\n        } else {\n          this.widget = new Widget(this, data);\n          CodeMirror.signal(data, \"shown\");\n        }\n      }\n    }\n  };\n\n  function parseOptions(cm, pos, options) {\n    var editor = cm.options.hintOptions;\n    var out = {};\n    for (var prop in defaultOptions) out[prop] = defaultOptions[prop];\n    if (editor) for (var prop in editor)\n      if (editor[prop] !== undefined) out[prop] = editor[prop];\n    if (options) for (var prop in options)\n      if (options[prop] !== undefined) out[prop] = options[prop];\n    if (out.hint.resolve) out.hint = out.hint.resolve(cm, pos)\n    return out;\n  }\n\n  function getText(completion) {\n    if (typeof completion == \"string\") return completion;\n    else return completion.text;\n  }\n\n  function buildKeyMap(completion, handle) {\n    var baseMap = {\n      Up: function() {handle.moveFocus(-1);},\n      Down: function() {handle.moveFocus(1);},\n      PageUp: function() {handle.moveFocus(-handle.menuSize() + 1, true);},\n      PageDown: function() {handle.moveFocus(handle.menuSize() - 1, true);},\n      Home: function() {handle.setFocus(0);},\n      End: function() {handle.setFocus(handle.length - 1);},\n      Enter: handle.pick,\n      Tab: handle.pick,\n      Esc: handle.close\n    };\n\n    var mac = /Mac/.test(navigator.platform);\n\n    if (mac) {\n      baseMap[\"Ctrl-P\"] = function() {handle.moveFocus(-1);};\n      baseMap[\"Ctrl-N\"] = function() {handle.moveFocus(1);};\n    }\n\n    var custom = completion.options.customKeys;\n    var ourMap = custom ? {} : baseMap;\n    function addBinding(key, val) {\n      var bound;\n      if (typeof val != \"string\")\n        bound = function(cm) { return val(cm, handle); };\n      // This mechanism is deprecated\n      else if (baseMap.hasOwnProperty(val))\n        bound = baseMap[val];\n      else\n        bound = val;\n      ourMap[key] = bound;\n    }\n    if (custom)\n      for (var key in custom) if (custom.hasOwnProperty(key))\n        addBinding(key, custom[key]);\n    var extra = completion.options.extraKeys;\n    if (extra)\n      for (var key in extra) if (extra.hasOwnProperty(key))\n        addBinding(key, extra[key]);\n    return ourMap;\n  }\n\n  function getHintElement(hintsElement, el) {\n    while (el && el != hintsElement) {\n      if (el.nodeName.toUpperCase() === \"LI\" && el.parentNode == hintsElement) return el;\n      el = el.parentNode;\n    }\n  }\n\n  function Widget(completion, data) {\n    this.id = \"cm-complete-\" + Math.floor(Math.random(1e6))\n    this.completion = completion;\n    this.data = data;\n    this.picked = false;\n    var widget = this, cm = completion.cm;\n    var ownerDocument = cm.getInputField().ownerDocument;\n    var parentWindow = ownerDocument.defaultView || ownerDocument.parentWindow;\n\n    var hints = this.hints = ownerDocument.createElement(\"ul\");\n    hints.setAttribute(\"role\", \"listbox\")\n    hints.setAttribute(\"aria-expanded\", \"true\")\n    hints.id = this.id\n    var theme = completion.cm.options.theme;\n    hints.className = \"CodeMirror-hints \" + theme;\n    this.selectedHint = data.selectedHint || 0;\n\n    var completions = data.list;\n    for (var i = 0; i < completions.length; ++i) {\n      var elt = hints.appendChild(ownerDocument.createElement(\"li\")), cur = completions[i];\n      var className = HINT_ELEMENT_CLASS + (i != this.selectedHint ? \"\" : \" \" + ACTIVE_HINT_ELEMENT_CLASS);\n      if (cur.className != null) className = cur.className + \" \" + className;\n      elt.className = className;\n      if (i == this.selectedHint) elt.setAttribute(\"aria-selected\", \"true\")\n      elt.id = this.id + \"-\" + i\n      elt.setAttribute(\"role\", \"option\")\n      if (cur.render) cur.render(elt, data, cur);\n      else elt.appendChild(ownerDocument.createTextNode(cur.displayText || getText(cur)));\n      elt.hintId = i;\n    }\n\n    var container = completion.options.container || ownerDocument.body;\n    var pos = cm.cursorCoords(completion.options.alignWithWord ? data.from : null);\n    var left = pos.left, top = pos.bottom, below = true;\n    var offsetLeft = 0, offsetTop = 0;\n    if (container !== ownerDocument.body) {\n      // We offset the cursor position because left and top are relative to the offsetParent's top left corner.\n      var isContainerPositioned = ['absolute', 'relative', 'fixed'].indexOf(parentWindow.getComputedStyle(container).position) !== -1;\n      var offsetParent = isContainerPositioned ? container : container.offsetParent;\n      var offsetParentPosition = offsetParent.getBoundingClientRect();\n      var bodyPosition = ownerDocument.body.getBoundingClientRect();\n      offsetLeft = (offsetParentPosition.left - bodyPosition.left - offsetParent.scrollLeft);\n      offsetTop = (offsetParentPosition.top - bodyPosition.top - offsetParent.scrollTop);\n    }\n    hints.style.left = (left - offsetLeft) + \"px\";\n    hints.style.top = (top - offsetTop) + \"px\";\n\n    // If we're at the edge of the screen, then we want the menu to appear on the left of the cursor.\n    var winW = parentWindow.innerWidth || Math.max(ownerDocument.body.offsetWidth, ownerDocument.documentElement.offsetWidth);\n    var winH = parentWindow.innerHeight || Math.max(ownerDocument.body.offsetHeight, ownerDocument.documentElement.offsetHeight);\n    container.appendChild(hints);\n    cm.getInputField().setAttribute(\"aria-autocomplete\", \"list\")\n    cm.getInputField().setAttribute(\"aria-owns\", this.id)\n    cm.getInputField().setAttribute(\"aria-activedescendant\", this.id + \"-\" + this.selectedHint)\n\n    var box = completion.options.moveOnOverlap ? hints.getBoundingClientRect() : new DOMRect();\n    var scrolls = completion.options.paddingForScrollbar ? hints.scrollHeight > hints.clientHeight + 1 : false;\n\n    // Compute in the timeout to avoid reflow on init\n    var startScroll;\n    setTimeout(function() { startScroll = cm.getScrollInfo(); });\n\n    var overlapY = box.bottom - winH;\n    if (overlapY > 0) { // Does not fit below\n      var height = box.bottom - box.top, spaceAbove = box.top - (pos.bottom - pos.top) - 2\n      if (winH - box.top < spaceAbove) { // More room at the top\n        if (height > spaceAbove) hints.style.height = (height = spaceAbove) + \"px\";\n        hints.style.top = ((top = pos.top - height) + offsetTop) + \"px\";\n        below = false;\n      } else {\n        hints.style.height = (winH - box.top - 2) + \"px\";\n      }\n    }\n    var overlapX = box.right - winW;\n    if (scrolls) overlapX += cm.display.nativeBarWidth;\n    if (overlapX > 0) {\n      if (box.right - box.left > winW) {\n        hints.style.width = (winW - 5) + \"px\";\n        overlapX -= (box.right - box.left) - winW;\n      }\n      hints.style.left = (left = Math.max(pos.left - overlapX - offsetLeft, 0)) + \"px\";\n    }\n    if (scrolls) for (var node = hints.firstChild; node; node = node.nextSibling)\n      node.style.paddingRight = cm.display.nativeBarWidth + \"px\"\n\n    cm.addKeyMap(this.keyMap = buildKeyMap(completion, {\n      moveFocus: function(n, avoidWrap) { widget.changeActive(widget.selectedHint + n, avoidWrap); },\n      setFocus: function(n) { widget.changeActive(n); },\n      menuSize: function() { return widget.screenAmount(); },\n      length: completions.length,\n      close: function() { completion.close(); },\n      pick: function() { widget.pick(); },\n      data: data\n    }));\n\n    if (completion.options.closeOnUnfocus) {\n      var closingOnBlur;\n      cm.on(\"blur\", this.onBlur = function() { closingOnBlur = setTimeout(function() { completion.close(); }, 100); });\n      cm.on(\"focus\", this.onFocus = function() { clearTimeout(closingOnBlur); });\n    }\n\n    cm.on(\"scroll\", this.onScroll = function() {\n      var curScroll = cm.getScrollInfo(), editor = cm.getWrapperElement().getBoundingClientRect();\n      if (!startScroll) startScroll = cm.getScrollInfo();\n      var newTop = top + startScroll.top - curScroll.top;\n      var point = newTop - (parentWindow.pageYOffset || (ownerDocument.documentElement || ownerDocument.body).scrollTop);\n      if (!below) point += hints.offsetHeight;\n      if (point <= editor.top || point >= editor.bottom) return completion.close();\n      hints.style.top = newTop + \"px\";\n      hints.style.left = (left + startScroll.left - curScroll.left) + \"px\";\n    });\n\n    CodeMirror.on(hints, \"dblclick\", function(e) {\n      var t = getHintElement(hints, e.target || e.srcElement);\n      if (t && t.hintId != null) {widget.changeActive(t.hintId); widget.pick();}\n    });\n\n    CodeMirror.on(hints, \"click\", function(e) {\n      var t = getHintElement(hints, e.target || e.srcElement);\n      if (t && t.hintId != null) {\n        widget.changeActive(t.hintId);\n        if (completion.options.completeOnSingleClick) widget.pick();\n      }\n    });\n\n    CodeMirror.on(hints, \"mousedown\", function() {\n      setTimeout(function(){cm.focus();}, 20);\n    });\n\n    // The first hint doesn't need to be scrolled to on init\n    var selectedHintRange = this.getSelectedHintRange();\n    if (selectedHintRange.from !== 0 || selectedHintRange.to !== 0) {\n      this.scrollToActive();\n    }\n\n    CodeMirror.signal(data, \"select\", completions[this.selectedHint], hints.childNodes[this.selectedHint]);\n    return true;\n  }\n\n  Widget.prototype = {\n    close: function() {\n      if (this.completion.widget != this) return;\n      this.completion.widget = null;\n      if (this.hints.parentNode) this.hints.parentNode.removeChild(this.hints);\n      this.completion.cm.removeKeyMap(this.keyMap);\n      var input = this.completion.cm.getInputField()\n      input.removeAttribute(\"aria-activedescendant\")\n      input.removeAttribute(\"aria-owns\")\n\n      var cm = this.completion.cm;\n      if (this.completion.options.closeOnUnfocus) {\n        cm.off(\"blur\", this.onBlur);\n        cm.off(\"focus\", this.onFocus);\n      }\n      cm.off(\"scroll\", this.onScroll);\n    },\n\n    disable: function() {\n      this.completion.cm.removeKeyMap(this.keyMap);\n      var widget = this;\n      this.keyMap = {Enter: function() { widget.picked = true; }};\n      this.completion.cm.addKeyMap(this.keyMap);\n    },\n\n    pick: function() {\n      this.completion.pick(this.data, this.selectedHint);\n    },\n\n    changeActive: function(i, avoidWrap) {\n      if (i >= this.data.list.length)\n        i = avoidWrap ? this.data.list.length - 1 : 0;\n      else if (i < 0)\n        i = avoidWrap ? 0  : this.data.list.length - 1;\n      if (this.selectedHint == i) return;\n      var node = this.hints.childNodes[this.selectedHint];\n      if (node) {\n        node.className = node.className.replace(\" \" + ACTIVE_HINT_ELEMENT_CLASS, \"\");\n        node.removeAttribute(\"aria-selected\")\n      }\n      node = this.hints.childNodes[this.selectedHint = i];\n      node.className += \" \" + ACTIVE_HINT_ELEMENT_CLASS;\n      node.setAttribute(\"aria-selected\", \"true\")\n      this.completion.cm.getInputField().setAttribute(\"aria-activedescendant\", node.id)\n      this.scrollToActive()\n      CodeMirror.signal(this.data, \"select\", this.data.list[this.selectedHint], node);\n    },\n\n    scrollToActive: function() {\n      var selectedHintRange = this.getSelectedHintRange();\n      var node1 = this.hints.childNodes[selectedHintRange.from];\n      var node2 = this.hints.childNodes[selectedHintRange.to];\n      var firstNode = this.hints.firstChild;\n      if (node1.offsetTop < this.hints.scrollTop)\n        this.hints.scrollTop = node1.offsetTop - firstNode.offsetTop;\n      else if (node2.offsetTop + node2.offsetHeight > this.hints.scrollTop + this.hints.clientHeight)\n        this.hints.scrollTop = node2.offsetTop + node2.offsetHeight - this.hints.clientHeight + firstNode.offsetTop;\n    },\n\n    screenAmount: function() {\n      return Math.floor(this.hints.clientHeight / this.hints.firstChild.offsetHeight) || 1;\n    },\n\n    getSelectedHintRange: function() {\n      var margin = this.completion.options.scrollMargin || 0;\n      return {\n        from: Math.max(0, this.selectedHint - margin),\n        to: Math.min(this.data.list.length - 1, this.selectedHint + margin),\n      };\n    }\n  };\n\n  function applicableHelpers(cm, helpers) {\n    if (!cm.somethingSelected()) return helpers\n    var result = []\n    for (var i = 0; i < helpers.length; i++)\n      if (helpers[i].supportsSelection) result.push(helpers[i])\n    return result\n  }\n\n  function fetchHints(hint, cm, options, callback) {\n    if (hint.async) {\n      hint(cm, callback, options)\n    } else {\n      var result = hint(cm, options)\n      if (result && result.then) result.then(callback)\n      else callback(result)\n    }\n  }\n\n  function resolveAutoHints(cm, pos) {\n    var helpers = cm.getHelpers(pos, \"hint\"), words\n    if (helpers.length) {\n      var resolved = function(cm, callback, options) {\n        var app = applicableHelpers(cm, helpers);\n        function run(i) {\n          if (i == app.length) return callback(null)\n          fetchHints(app[i], cm, options, function(result) {\n            if (result && result.list.length > 0) callback(result)\n            else run(i + 1)\n          })\n        }\n        run(0)\n      }\n      resolved.async = true\n      resolved.supportsSelection = true\n      return resolved\n    } else if (words = cm.getHelper(cm.getCursor(), \"hintWords\")) {\n      return function(cm) { return CodeMirror.hint.fromList(cm, {words: words}) }\n    } else if (CodeMirror.hint.anyword) {\n      return function(cm, options) { return CodeMirror.hint.anyword(cm, options) }\n    } else {\n      return function() {}\n    }\n  }\n\n  CodeMirror.registerHelper(\"hint\", \"auto\", {\n    resolve: resolveAutoHints\n  });\n\n  CodeMirror.registerHelper(\"hint\", \"fromList\", function(cm, options) {\n    var cur = cm.getCursor(), token = cm.getTokenAt(cur)\n    var term, from = CodeMirror.Pos(cur.line, token.start), to = cur\n    if (token.start < cur.ch && /\\w/.test(token.string.charAt(cur.ch - token.start - 1))) {\n      term = token.string.substr(0, cur.ch - token.start)\n    } else {\n      term = \"\"\n      from = cur\n    }\n    var found = [];\n    for (var i = 0; i < options.words.length; i++) {\n      var word = options.words[i];\n      if (word.slice(0, term.length) == term)\n        found.push(word);\n    }\n\n    if (found.length) return {list: found, from: from, to: to};\n  });\n\n  CodeMirror.commands.autocomplete = CodeMirror.showHint;\n\n  var defaultOptions = {\n    hint: CodeMirror.hint.auto,\n    completeSingle: true,\n    alignWithWord: true,\n    closeCharacters: /[\\s()\\[\\]{};:>,]/,\n    closeOnPick: true,\n    closeOnUnfocus: true,\n    updateOnCursorActivity: true,\n    completeOnSingleClick: true,\n    container: null,\n    customKeys: null,\n    extraKeys: null,\n    paddingForScrollbar: true,\n    moveOnOverlap: true,\n  };\n\n  CodeMirror.defineOption(\"hintOptions\", null);\n});\n"],"names":["codemirror__WEBPACK_IMPORTED_MODULE_0___default","registerHelper","editor","options","schema","externalFragments","autocompleteOptions","cur","getCursor","token","getTokenAt","tokenStart","type","test","string","start","end","position","graphql_language_service__WEBPACK_IMPORTED_MODULE_2__","Ly","line","results","list","rawResults","$1","getValue","map","item","_a","text","rawInsert","label","description","documentation","isDeprecated","deprecationReason","from","ch","to","length","Pos","signal","mod","CodeMirror","ACTIVE_HINT_ELEMENT_CLASS","Completion","cm","widget","debounce","tick","startPos","startLen","getLine","getSelection","updateOnCursorActivity","self","on","activityFunc","cursorActivity","showHint","getHints","async","newOpts","hint","prop","defineExtension","parseOptions","pos","hintOptions","out","defaultOptions","undefined","resolve","selections","listSelections","somethingSelected","supportsSelection","i","head","anchor","state","completionActive","close","completion","update","requestAnimationFrame","window","fn","setTimeout","cancelAnimationFrame","clearTimeout","getText","getHintElement","hintsElement","el","nodeName","toUpperCase","parentNode","Widget","data","id","Math","floor","random","picked","startScroll","closingOnBlur","ownerDocument","getInputField","parentWindow","defaultView","hints","createElement","setAttribute","theme","className","selectedHint","completions","elt","appendChild","HINT_ELEMENT_CLASS","render","createTextNode","displayText","hintId","container","body","cursorCoords","alignWithWord","left","top","bottom","below","offsetLeft","offsetTop","offsetParent","isContainerPositioned","indexOf","getComputedStyle","offsetParentPosition","getBoundingClientRect","bodyPosition","scrollLeft","scrollTop","style","winW","innerWidth","max","offsetWidth","documentElement","winH","innerHeight","offsetHeight","box","moveOnOverlap","DOMRect","scrolls","paddingForScrollbar","scrollHeight","clientHeight","getScrollInfo","overlapY","height","spaceAbove","overlapX","right","display","nativeBarWidth","width","node","firstChild","nextSibling","paddingRight","addKeyMap","keyMap","buildKeyMap","handle","baseMap","Up","moveFocus","Down","PageUp","menuSize","PageDown","Home","setFocus","End","Enter","pick","Tab","Esc","navigator","platform","custom","customKeys","ourMap","addBinding","key","val","bound","hasOwnProperty","extra","extraKeys","n","avoidWrap","changeActive","screenAmount","closeOnUnfocus","onBlur","onFocus","onScroll","curScroll","getWrapperElement","newTop","point","pageYOffset","e","t","target","srcElement","completeOnSingleClick","focus","selectedHintRange","getSelectedHintRange","scrollToActive","childNodes","fetchHints","callback","result","then","prototype","active","off","operation","replaceRange","scrollIntoView","closeOnPick","identStart","closeCharacters","charAt","disable","first","myTick","finishUpdate","completeSingle","removeChild","removeKeyMap","input","removeAttribute","replace","node1","node2","firstNode","margin","scrollMargin","min","words","helpers","getHelpers","resolved","app","applicableHelpers","push","run","getHelper","fromList","anyword","term","substr","found","word","slice","commands","autocomplete","auto","defineOption","__webpack_require__"],"sourceRoot":""}