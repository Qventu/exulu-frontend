{"version":3,"file":"static/chunks/5658.d0b78ce9f92a9abb.js","mappings":"uFAKAA,SAKCC,CAAA,EACD,aAEA,SAAAC,EAAAC,CAAA,CAAAC,CAAA,CAAAC,CAAA,CAAAC,CAAA,EACA,GAAAD,GAAAA,EAAAE,IAAA,EACA,IAAAC,EAAAH,EACAA,EAAA,IACA,MACA,IAAAG,EAAAC,EAAAN,EAAAE,EAAA,cAEA,kBAAAD,GAAAA,CAAAA,EAAAH,EAAAS,GAAA,CAAAN,EAAA,IACA,IAAAO,EAAAF,EAAAN,EAAAE,EAAA,eAEA,SAAAO,EAAAC,CAAA,EACA,IAAAC,EAAAN,EAAAL,EAAAC,GACA,IAAAU,GAAAA,EAAAC,EAAA,CAAAC,IAAA,CAAAF,EAAAG,IAAA,CAAAD,IAAA,CAAAL,EAAA,YACA,GAAAL,SAAAA,EAAA,OAAAQ,EAGA,QADAI,EAAAf,EAAAgB,WAAA,CAAAL,EAAAG,IAAA,EACAG,EAAA,EAAsBA,EAAAF,EAAAG,MAAA,CAAkB,EAAAD,EACxC,GAAAF,CAAA,CAAAE,EAAA,CAAAE,QAAA,EACA,IAAAT,EAAA,WACAC,CAAAA,EAAAS,OAAA,IACAL,CAAA,CAAAE,EAAA,CAAAI,KAAA,EACA,CAEA,OAAAV,CACA,CAEA,IAAAA,EAAAF,EAAA,IACA,GAAAH,EAAAN,EAAAE,EAAA,gBAAAS,GAAAV,EAAAY,IAAA,CAAAb,EAAAsB,SAAA,IACArB,EAAAH,EAAAS,GAAA,CAAAN,EAAAY,IAAA,MACAF,EAAAF,EAAA,IAEA,OAAAE,EAAAS,OAAA,EAAAjB,WAAAA,GAEA,IAAAoB,EAAAC,SAgBAxB,CAAA,CAAAE,CAAA,CAAAS,CAAA,EACA,IAAAc,EAAAnB,EAAAN,EAAAE,EAAA,UAMA,GAJA,mBAAAuB,GACAA,CAAAA,EAAAA,EAAAd,EAAAG,IAAA,CAAAH,EAAAC,EAAA,GAGA,iBAAAa,EAAA,CACA,IAAAC,EAAAC,SAAAC,cAAA,CAAAH,GAEAA,CADAA,EAAAE,SAAAE,aAAA,UACAC,WAAA,CAAAJ,GACAD,EAAAM,SAAA,wBACA,MAAMN,GACNA,CAAAA,EAAAA,EAAAO,SAAA,MAEA,OAAAP,CACA,EAhCAzB,EAAAE,EAAAS,GACAb,EAAAmC,EAAA,CAAAV,EAAA,qBAAAW,CAAA,EACAC,EAAAd,KAAA,GACAvB,EAAAsC,gBAAA,CAAAF,EACA,GACA,IAAAC,EAAAnC,EAAAqC,QAAA,CAAA1B,EAAAG,IAAA,CAAAH,EAAAC,EAAA,EACA0B,aAAAf,EACAgB,aAAAjC,EAAAN,EAAAE,EAAA,gBACAiB,SAAA,EACA,GACAgB,EAAAF,EAAA,kBAAAnB,CAAA,CAAAF,CAAA,EACAd,EAAA0C,MAAA,CAAAxC,EAAA,SAAAA,EAAAc,EAAAF,EACA,GACAd,EAAA0C,MAAA,CAAAxC,EAAA,OAAAA,EAAAW,EAAAG,IAAA,CAAAH,EAAAC,EAAA,EACA,CAqBAd,EAAA2C,eAAA,UAAAC,CAAA,CAAAjB,CAAA,EACA,gBAAAzB,CAAA,CAAAC,CAAA,EAA+BF,EAAAC,EAAAC,EAAA,CAAiByC,YAAAA,EAAAjB,OAAAA,CAAA,EAAyC,CACzF,EAGA3B,EAAA6C,eAAA,qBAAA1C,CAAA,CAAAC,CAAA,CAAAC,CAAA,EACAJ,EAAA,KAAAE,EAAAC,EAAAC,EACA,GAEAL,EAAA6C,eAAA,qBAAA1C,CAAA,EAEA,QADAc,EAAA,KAAAC,WAAA,CAAAf,GACAgB,EAAA,EAAoBA,EAAAF,EAAAG,MAAA,CAAkB,EAAAD,EACtC,GAAAF,CAAA,CAAAE,EAAA,CAAAE,QAAA,SACA,GAEArB,EAAA8C,QAAA,CAAAC,UAAA,UAAA7C,CAAA,EACAA,EAAA8C,QAAA,CAAA9C,EAAA+C,SAAA,GACA,EACAjD,EAAA8C,QAAA,CAAAI,IAAA,UAAAhD,CAAA,EACAA,EAAA8C,QAAA,CAAA9C,EAAA+C,SAAA,eACA,EACAjD,EAAA8C,QAAA,CAAAK,MAAA,UAAAjD,CAAA,EACAA,EAAA8C,QAAA,CAAA9C,EAAA+C,SAAA,IAAkCG,OAAA,IAAe,SACjD,EACApD,EAAA8C,QAAA,CAAAO,OAAA,UAAAnD,CAAA,EACAA,EAAAoD,SAAA,YACA,QAAAnC,EAAAjB,EAAAsB,SAAA,GAAAY,EAAAlC,EAAAqD,QAAA,GAAsDpC,GAAAiB,EAAQjB,IAC9DjB,EAAA8C,QAAA,CAAAhD,EAAAS,GAAA,CAAAU,EAAA,IAA4CiC,OAAA,IAAe,OAC3D,EACA,EACApD,EAAA8C,QAAA,CAAAU,SAAA,UAAAtD,CAAA,EACAA,EAAAoD,SAAA,YACA,QAAAnC,EAAAjB,EAAAsB,SAAA,GAAAY,EAAAlC,EAAAqD,QAAA,GAAsDpC,GAAAiB,EAAQjB,IAC9DjB,EAAA8C,QAAA,CAAAhD,EAAAS,GAAA,CAAAU,EAAA,IAA4CiC,OAAA,IAAe,SAC3D,EACA,EAEApD,EAAAyD,cAAA,6BACA,IAAAC,EAAAC,MAAAC,SAAA,CAAAC,KAAA,CAAAvD,IAAA,CAAAwD,UAAA,GACA,gBAAA5D,CAAA,CAAA6D,CAAA,EACA,QAAA5C,EAAA,EAAsBA,EAAAuC,EAAAtC,MAAA,CAAkB,EAAAD,EAAA,CACxC,IAAA6C,EAAAN,CAAA,CAAAvC,EAAA,CAAAjB,EAAA6D,GACA,GAAAC,EAAA,OAAAA,CACA,CACA,CACA,GAEAhE,EAAAyD,cAAA,wBAAAvD,CAAA,CAAA6D,CAAA,EAEA,QADAE,EAAA/D,EAAAgE,UAAA,CAAAH,EAAA,QACA5C,EAAA,EAAoBA,EAAA8C,EAAA7C,MAAA,CAAoBD,IAAA,CACxC,IAAAgD,EAAAF,CAAA,CAAA9C,EAAA,CAAAjB,EAAA6D,GACA,GAAAI,EAAA,OAAAA,CACA,CACA,GAEA,IAAAC,EAAA,CACAxB,YAAA5C,EAAAkD,IAAA,CAAAmB,IAAA,CACA1C,OAAA,IACA2C,YAAA,EACAlB,OAAA,GACAX,aAAA,EACA,EAIA,SAAAjC,EAAAN,CAAA,CAAAE,CAAA,CAAAmE,CAAA,EACA,GAAAnE,GAAAA,KAAAoE,IAAApE,CAAA,CAAAmE,EAAA,CACA,OAAAnE,CAAA,CAAAmE,EAAA,CACA,IAAAE,EAAAvE,EAAAE,OAAA,CAAAsE,WAAA,QACA,GAAAD,KAAAD,IAAAC,CAAA,CAAAF,EAAA,CACAE,CAAA,CAAAF,EAAA,CACAH,CAAA,CAAAG,EAAA,CARAvE,EAAA2E,YAAA,qBAWA3E,EAAA6C,eAAA,uBAAAzC,CAAA,CAAAmE,CAAA,EACA,OAAA/D,EAAA,KAAAJ,EAAAmE,EACA,EACA,EAzJQK,EAAQ,gCCAhB7E,SAKCC,CAAA,EACD,aAEAA,EAAA2E,YAAA,0BAAAzE,CAAA,CAAA2E,CAAA,CAAAC,CAAA,MAgCAC,EA/BAD,GAAAA,GAAA9E,EAAAgF,IAAA,GACA9E,EAAA+E,WAAA,CAAA/E,EAAAgF,KAAA,CAAAC,UAAA,CAAA/E,OAAA,CAAAgF,MAAA,EACAlF,EAAAgF,KAAA,CAAAC,UAAA,MACAjF,EAAAmF,GAAA,eAAAC,GACApF,EAAAmF,GAAA,WAAAE,GACArF,EAAAmF,GAAA,kBAAAG,GACAtF,EAAAmF,GAAA,QAAAI,GACAvF,EAAAmF,GAAA,UAAAI,GACAvF,EAAAmF,GAAA,WAAAE,GACArF,EAAAmF,GAAA,gBAAAK,IAEAb,IACA3E,EAAAgF,KAAA,CAAAC,UAAA,KAAAQ,GAoBA,MADAZ,EAnBAF,IAoBAE,CAAAA,EAAA,IACA,MAAAA,EAAAK,MAAA,EAAAL,CAAAA,EAAAK,MAAA,0BACA,MAAAL,EAAAa,aAAA,EAAAb,CAAAA,EAAAa,aAAA,+BACA,MAAAb,EAAAc,eAAA,EAAAd,CAAAA,EAAAc,eAAA,iCACAd,IAvBAe,EAAA5F,GACAA,EAAAiC,EAAA,eAAAmD,GACApF,EAAAiC,EAAA,WAAAoD,GACArF,EAAAiC,EAAA,kBAAAqD,GACAtF,EAAAiC,EAAA,QAAAsD,GACAvF,EAAAiC,EAAA,UAAAsD,GACAvF,EAAAiC,EAAA,WAAAoD,GACArF,EAAAiC,EAAA,gBAAAuD,GAEA,GAEA,IAAAjF,EAAAT,EAAAS,GAAA,CAEA,SAAAkF,EAAAvF,CAAA,EACA,KAAAA,OAAA,CAAAA,EACA,KAAAY,IAAA,MAAAF,EAAA,EACA,CAUA,SAAAiF,EAAA7F,CAAA,CAAAa,CAAA,EAEA,QADAE,EAAAf,EAAA8F,SAAA,CAAAvF,EAAAM,EAAA,GAAAN,EAAAM,EAAA,MACAI,EAAA,EAAoBA,EAAAF,EAAAG,MAAA,CAAkB,EAAAD,EACtC,GAAAF,CAAA,CAAAE,EAAA,CAAAE,QAAA,EACA,IAAA4E,EAAAhF,CAAA,CAAAE,EAAA,CAAA+E,IAAA,KACA,GAAAD,GAAAA,EAAAlF,IAAA,GAAAA,EACA,OAAAE,CAAA,CAAAE,EAAA,CAGA,CAEA,SAAAgF,EAAAC,CAAA,EACA,oBAAAA,EAKA,OAAAA,EAAAlE,SAAA,KAJA,IAAAmE,EAAAxE,SAAAE,aAAA,QAEA,OADAsE,EAAApE,SAAA,CAAAmE,EAAA,kCACAC,CAIA,CAEA,SAAAC,EAAApG,CAAA,CAAAc,CAAA,CAAAF,CAAA,EACA,IAAAiE,EAAA7E,EAAAgF,KAAA,CAAAC,UAAA,CAAA/E,OAAA,CAAA+D,EAAAnD,EAAA,EACAN,EAAAR,EAAAqG,UAAA,CAAAxB,EAAA,eACAyB,EAAAtG,EAAAqG,UAAA,CAAAxB,EAAA,eAEA0B,EAAA,iBAAA1B,EAAAc,eAAA,EAAAa,EAAA3B,EAAAc,eAAA,EACAc,EAAA,iBAAA5B,EAAAa,aAAA,EAAAc,EAAA3B,EAAAa,aAAA,EACA1F,EAAA0G,QAAA,CAAA5F,EAAAF,EAAA,SAAAC,CAAA,EACA,EAAAoD,EACA,IAAA0C,EAAA,KACA/B,EAAA/D,EAAA+F,aAAA,CAEA,GADAhC,GAAAA,CAAAA,EAAAA,CAAA,CAAAC,EAAAK,MAAA,GACAW,EAAA7F,EAAAiE,GAAA,CACA,GAAAsC,GAAA3B,GAAA2B,EAAAM,IAAA,CAAAjC,EAAA7C,SAAA,SACA4E,EAAAV,EAAApB,EAAAc,eAAA,CACA,KAAQ,CACR,IAAA1F,EAAAM,EAAA0D,EAAA,GACAtD,EAAA2F,GAAAA,EAAAtG,EAAAC,GACA,GAAAU,GAAAA,EAAAC,EAAA,CAAAC,IAAA,CAAAF,EAAAG,IAAA,CAAAD,IAAA,EAAAL,EAAA,CACA,GAAAiG,GAAA7B,GAAA6B,EAAAI,IAAA,CAAAjC,EAAA7C,SAAA,SACA4E,EAAAV,EAAApB,EAAAa,aAAA,CACA,CACA,CACA,IAAAd,CAAA,GACA5E,EAAA8G,eAAA,CAAAjG,EAAAgE,EAAAK,MAAA,CAAAyB,EACA,EACA,CAGA,SAAAH,EAAAO,CAAA,EAA4B,wBAAAA,EAAA,iBAE5B,SAAAnB,EAAA5F,CAAA,EACA,IAAAgH,EAAAhH,EAAAiH,WAAA,GAAAjC,EAAAhF,EAAAgF,KAAA,CAAAC,UAAA,CACAD,IACAhF,EAAAoD,SAAA,YACAgD,EAAApG,EAAAgH,EAAAlG,IAAA,CAAAkG,EAAApG,EAAA,CACA,GACAoE,EAAAlE,IAAA,CAAAkG,EAAAlG,IAAA,CAA0BkE,EAAApE,EAAA,CAAAoG,EAAApG,EAAA,CAC1B,CAEA,SAAAwE,EAAApF,CAAA,CAAAa,CAAA,CAAAqE,CAAA,EACA,IAAAF,EAAAhF,EAAAgF,KAAA,CAAAC,UAAA,CACA,GAAAD,GACA,IAAAH,EAAAG,EAAA9E,OAAA,CACA,GAAAgF,GAAAL,EAAAK,MAAA,EACA,IAAAgC,EAAArB,EAAA7F,EAAAa,GACAqG,EAAAA,EAAA7F,KAAA,GACArB,EAAA8C,QAAA,CAAAvC,EAAAM,EAAA,GAAAgE,IACA,CAEA,SAAAW,EAAAxF,CAAA,CAAAmH,CAAA,EACA,QAAAA,GAAA9B,EAAArF,EACA,CAEA,SAAAqF,EAAArF,CAAA,EACA,IAAAgF,EAAAhF,EAAAgF,KAAA,CAAAC,UAAA,CACA,GAAAD,GACA,IAAAH,EAAAG,EAAA9E,OAAA,CACA8E,EAAAlE,IAAA,CAAAkE,EAAApE,EAAA,GACAwG,aAAApC,EAAAqC,YAAA,EACArC,EAAAqC,YAAA,CAAAC,WAAA,WAAiD1B,EAAA5F,EAAA,EAAuB6E,EAAA0C,oBAAA,OACxE,CAEA,SAAAjC,EAAAtF,CAAA,EACA,IAAAgF,EAAAhF,EAAAgF,KAAA,CAAAC,UAAA,CACA,GAAAD,GACA,IAAAH,EAAAG,EAAA9E,OAAA,CACAkH,aAAApC,EAAAqC,YAAA,EACArC,EAAAqC,YAAA,CAAAC,WAAA,WACA,IAAAN,EAAAhH,EAAAiH,WAAA,EACAjC,CAAAA,EAAAlE,IAAA,EAAAkE,EAAApE,EAAA,EAAAoG,EAAAlG,IAAA,CAAAkE,EAAApE,EAAA,KAAAoE,EAAAlE,IAAA,CAAAkG,EAAApG,EAAA,IACAgF,EAAA5F,GAEAA,EAAAoD,SAAA,YACA4D,EAAAlG,IAAA,CAAAkE,EAAAlE,IAAA,GACAsF,EAAApG,EAAAgH,EAAAlG,IAAA,CAAAkE,EAAAlE,IAAA,EACAkE,EAAAlE,IAAA,CAAAkG,EAAAlG,IAAA,EAEAkG,EAAApG,EAAA,CAAAoE,EAAApE,EAAA,GACAwF,EAAApG,EAAAgF,EAAApE,EAAA,CAAAoG,EAAApG,EAAA,EACAoE,EAAApE,EAAA,CAAAoG,EAAApG,EAAA,CAEA,EAEA,EAAKiE,EAAA2C,sBAAA,OACL,CAEA,SAAAjC,EAAAvF,CAAA,CAAAc,CAAA,EACA,IAAAkE,EAAAhF,EAAAgF,KAAA,CAAAC,UAAA,CACA,GAAAD,GACA,IAAAnE,EAAAC,EAAAD,IAAA,CACAA,GAAAmE,EAAAlE,IAAA,EAAAD,EAAAmE,EAAApE,EAAA,EACAwF,EAAApG,EAAAa,EAAAA,EAAA,GACA,CACA,EAnKQ6D,EAAQ,OAAyBA,EAAQ","sources":["webpack://_N_E/./node_modules/codemirror/addon/fold/foldcode.js","webpack://_N_E/./node_modules/codemirror/addon/fold/foldgutter.js"],"sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/5/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  function doFold(cm, pos, options, force) {\n    if (options && options.call) {\n      var finder = options;\n      options = null;\n    } else {\n      var finder = getOption(cm, options, \"rangeFinder\");\n    }\n    if (typeof pos == \"number\") pos = CodeMirror.Pos(pos, 0);\n    var minSize = getOption(cm, options, \"minFoldSize\");\n\n    function getRange(allowFolded) {\n      var range = finder(cm, pos);\n      if (!range || range.to.line - range.from.line < minSize) return null;\n      if (force === \"fold\") return range;\n\n      var marks = cm.findMarksAt(range.from);\n      for (var i = 0; i < marks.length; ++i) {\n        if (marks[i].__isFold) {\n          if (!allowFolded) return null;\n          range.cleared = true;\n          marks[i].clear();\n        }\n      }\n      return range;\n    }\n\n    var range = getRange(true);\n    if (getOption(cm, options, \"scanUp\")) while (!range && pos.line > cm.firstLine()) {\n      pos = CodeMirror.Pos(pos.line - 1, 0);\n      range = getRange(false);\n    }\n    if (!range || range.cleared || force === \"unfold\") return;\n\n    var myWidget = makeWidget(cm, options, range);\n    CodeMirror.on(myWidget, \"mousedown\", function(e) {\n      myRange.clear();\n      CodeMirror.e_preventDefault(e);\n    });\n    var myRange = cm.markText(range.from, range.to, {\n      replacedWith: myWidget,\n      clearOnEnter: getOption(cm, options, \"clearOnEnter\"),\n      __isFold: true\n    });\n    myRange.on(\"clear\", function(from, to) {\n      CodeMirror.signal(cm, \"unfold\", cm, from, to);\n    });\n    CodeMirror.signal(cm, \"fold\", cm, range.from, range.to);\n  }\n\n  function makeWidget(cm, options, range) {\n    var widget = getOption(cm, options, \"widget\");\n\n    if (typeof widget == \"function\") {\n      widget = widget(range.from, range.to);\n    }\n\n    if (typeof widget == \"string\") {\n      var text = document.createTextNode(widget);\n      widget = document.createElement(\"span\");\n      widget.appendChild(text);\n      widget.className = \"CodeMirror-foldmarker\";\n    } else if (widget) {\n      widget = widget.cloneNode(true)\n    }\n    return widget;\n  }\n\n  // Clumsy backwards-compatible interface\n  CodeMirror.newFoldFunction = function(rangeFinder, widget) {\n    return function(cm, pos) { doFold(cm, pos, {rangeFinder: rangeFinder, widget: widget}); };\n  };\n\n  // New-style interface\n  CodeMirror.defineExtension(\"foldCode\", function(pos, options, force) {\n    doFold(this, pos, options, force);\n  });\n\n  CodeMirror.defineExtension(\"isFolded\", function(pos) {\n    var marks = this.findMarksAt(pos);\n    for (var i = 0; i < marks.length; ++i)\n      if (marks[i].__isFold) return true;\n  });\n\n  CodeMirror.commands.toggleFold = function(cm) {\n    cm.foldCode(cm.getCursor());\n  };\n  CodeMirror.commands.fold = function(cm) {\n    cm.foldCode(cm.getCursor(), null, \"fold\");\n  };\n  CodeMirror.commands.unfold = function(cm) {\n    cm.foldCode(cm.getCursor(), { scanUp: false }, \"unfold\");\n  };\n  CodeMirror.commands.foldAll = function(cm) {\n    cm.operation(function() {\n      for (var i = cm.firstLine(), e = cm.lastLine(); i <= e; i++)\n        cm.foldCode(CodeMirror.Pos(i, 0), { scanUp: false }, \"fold\");\n    });\n  };\n  CodeMirror.commands.unfoldAll = function(cm) {\n    cm.operation(function() {\n      for (var i = cm.firstLine(), e = cm.lastLine(); i <= e; i++)\n        cm.foldCode(CodeMirror.Pos(i, 0), { scanUp: false }, \"unfold\");\n    });\n  };\n\n  CodeMirror.registerHelper(\"fold\", \"combine\", function() {\n    var funcs = Array.prototype.slice.call(arguments, 0);\n    return function(cm, start) {\n      for (var i = 0; i < funcs.length; ++i) {\n        var found = funcs[i](cm, start);\n        if (found) return found;\n      }\n    };\n  });\n\n  CodeMirror.registerHelper(\"fold\", \"auto\", function(cm, start) {\n    var helpers = cm.getHelpers(start, \"fold\");\n    for (var i = 0; i < helpers.length; i++) {\n      var cur = helpers[i](cm, start);\n      if (cur) return cur;\n    }\n  });\n\n  var defaultOptions = {\n    rangeFinder: CodeMirror.fold.auto,\n    widget: \"\\u2194\",\n    minFoldSize: 0,\n    scanUp: false,\n    clearOnEnter: true\n  };\n\n  CodeMirror.defineOption(\"foldOptions\", null);\n\n  function getOption(cm, options, name) {\n    if (options && options[name] !== undefined)\n      return options[name];\n    var editorOptions = cm.options.foldOptions;\n    if (editorOptions && editorOptions[name] !== undefined)\n      return editorOptions[name];\n    return defaultOptions[name];\n  }\n\n  CodeMirror.defineExtension(\"foldOption\", function(options, name) {\n    return getOption(this, options, name);\n  });\n});\n","// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/5/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"), require(\"./foldcode\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\", \"./foldcode\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineOption(\"foldGutter\", false, function(cm, val, old) {\n    if (old && old != CodeMirror.Init) {\n      cm.clearGutter(cm.state.foldGutter.options.gutter);\n      cm.state.foldGutter = null;\n      cm.off(\"gutterClick\", onGutterClick);\n      cm.off(\"changes\", onChange);\n      cm.off(\"viewportChange\", onViewportChange);\n      cm.off(\"fold\", onFold);\n      cm.off(\"unfold\", onFold);\n      cm.off(\"swapDoc\", onChange);\n      cm.off(\"optionChange\", optionChange);\n    }\n    if (val) {\n      cm.state.foldGutter = new State(parseOptions(val));\n      updateInViewport(cm);\n      cm.on(\"gutterClick\", onGutterClick);\n      cm.on(\"changes\", onChange);\n      cm.on(\"viewportChange\", onViewportChange);\n      cm.on(\"fold\", onFold);\n      cm.on(\"unfold\", onFold);\n      cm.on(\"swapDoc\", onChange);\n      cm.on(\"optionChange\", optionChange);\n    }\n  });\n\n  var Pos = CodeMirror.Pos;\n\n  function State(options) {\n    this.options = options;\n    this.from = this.to = 0;\n  }\n\n  function parseOptions(opts) {\n    if (opts === true) opts = {};\n    if (opts.gutter == null) opts.gutter = \"CodeMirror-foldgutter\";\n    if (opts.indicatorOpen == null) opts.indicatorOpen = \"CodeMirror-foldgutter-open\";\n    if (opts.indicatorFolded == null) opts.indicatorFolded = \"CodeMirror-foldgutter-folded\";\n    return opts;\n  }\n\n  function isFolded(cm, line) {\n    var marks = cm.findMarks(Pos(line, 0), Pos(line + 1, 0));\n    for (var i = 0; i < marks.length; ++i) {\n      if (marks[i].__isFold) {\n        var fromPos = marks[i].find(-1);\n        if (fromPos && fromPos.line === line)\n          return marks[i];\n      }\n    }\n  }\n\n  function marker(spec) {\n    if (typeof spec == \"string\") {\n      var elt = document.createElement(\"div\");\n      elt.className = spec + \" CodeMirror-guttermarker-subtle\";\n      return elt;\n    } else {\n      return spec.cloneNode(true);\n    }\n  }\n\n  function updateFoldInfo(cm, from, to) {\n    var opts = cm.state.foldGutter.options, cur = from - 1;\n    var minSize = cm.foldOption(opts, \"minFoldSize\");\n    var func = cm.foldOption(opts, \"rangeFinder\");\n    // we can reuse the built-in indicator element if its className matches the new state\n    var clsFolded = typeof opts.indicatorFolded == \"string\" && classTest(opts.indicatorFolded);\n    var clsOpen = typeof opts.indicatorOpen == \"string\" && classTest(opts.indicatorOpen);\n    cm.eachLine(from, to, function(line) {\n      ++cur;\n      var mark = null;\n      var old = line.gutterMarkers;\n      if (old) old = old[opts.gutter];\n      if (isFolded(cm, cur)) {\n        if (clsFolded && old && clsFolded.test(old.className)) return;\n        mark = marker(opts.indicatorFolded);\n      } else {\n        var pos = Pos(cur, 0);\n        var range = func && func(cm, pos);\n        if (range && range.to.line - range.from.line >= minSize) {\n          if (clsOpen && old && clsOpen.test(old.className)) return;\n          mark = marker(opts.indicatorOpen);\n        }\n      }\n      if (!mark && !old) return;\n      cm.setGutterMarker(line, opts.gutter, mark);\n    });\n  }\n\n  // copied from CodeMirror/src/util/dom.js\n  function classTest(cls) { return new RegExp(\"(^|\\\\s)\" + cls + \"(?:$|\\\\s)\\\\s*\") }\n\n  function updateInViewport(cm) {\n    var vp = cm.getViewport(), state = cm.state.foldGutter;\n    if (!state) return;\n    cm.operation(function() {\n      updateFoldInfo(cm, vp.from, vp.to);\n    });\n    state.from = vp.from; state.to = vp.to;\n  }\n\n  function onGutterClick(cm, line, gutter) {\n    var state = cm.state.foldGutter;\n    if (!state) return;\n    var opts = state.options;\n    if (gutter != opts.gutter) return;\n    var folded = isFolded(cm, line);\n    if (folded) folded.clear();\n    else cm.foldCode(Pos(line, 0), opts);\n  }\n\n  function optionChange(cm, option) {\n    if (option == \"mode\") onChange(cm)\n  }\n\n  function onChange(cm) {\n    var state = cm.state.foldGutter;\n    if (!state) return;\n    var opts = state.options;\n    state.from = state.to = 0;\n    clearTimeout(state.changeUpdate);\n    state.changeUpdate = setTimeout(function() { updateInViewport(cm); }, opts.foldOnChangeTimeSpan || 600);\n  }\n\n  function onViewportChange(cm) {\n    var state = cm.state.foldGutter;\n    if (!state) return;\n    var opts = state.options;\n    clearTimeout(state.changeUpdate);\n    state.changeUpdate = setTimeout(function() {\n      var vp = cm.getViewport();\n      if (state.from == state.to || vp.from - state.to > 20 || state.from - vp.to > 20) {\n        updateInViewport(cm);\n      } else {\n        cm.operation(function() {\n          if (vp.from < state.from) {\n            updateFoldInfo(cm, vp.from, state.from);\n            state.from = vp.from;\n          }\n          if (vp.to > state.to) {\n            updateFoldInfo(cm, state.to, vp.to);\n            state.to = vp.to;\n          }\n        });\n      }\n    }, opts.updateViewportTimeSpan || 400);\n  }\n\n  function onFold(cm, from) {\n    var state = cm.state.foldGutter;\n    if (!state) return;\n    var line = from.line;\n    if (line >= state.from && line < state.to)\n      updateFoldInfo(cm, line, line + 1);\n  }\n});\n"],"names":["mod","CodeMirror","doFold","cm","pos","options","force","call","finder","getOption","Pos","minSize","getRange","allowFolded","range","to","line","from","marks","findMarksAt","i","length","__isFold","cleared","clear","firstLine","myWidget","makeWidget","widget","text","document","createTextNode","createElement","appendChild","className","cloneNode","on","e","myRange","e_preventDefault","markText","replacedWith","clearOnEnter","signal","newFoldFunction","rangeFinder","defineExtension","commands","toggleFold","foldCode","getCursor","fold","unfold","scanUp","foldAll","operation","lastLine","unfoldAll","registerHelper","funcs","Array","prototype","slice","arguments","start","found","helpers","getHelpers","cur","defaultOptions","auto","minFoldSize","name","undefined","editorOptions","foldOptions","defineOption","__webpack_require__","val","old","opts","Init","clearGutter","state","foldGutter","gutter","off","onGutterClick","onChange","onViewportChange","onFold","optionChange","State","indicatorOpen","indicatorFolded","updateInViewport","isFolded","findMarks","fromPos","find","marker","spec","elt","updateFoldInfo","foldOption","func","clsFolded","classTest","clsOpen","eachLine","mark","gutterMarkers","test","setGutterMarker","cls","vp","getViewport","folded","option","clearTimeout","changeUpdate","setTimeout","foldOnChangeTimeSpan","updateViewportTimeSpan"],"sourceRoot":""}