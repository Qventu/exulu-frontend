{"version":3,"file":"static/chunks/3619-3c258196e0973f87.js","mappings":"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","sources":["webpack://_N_E/../src/dialog.tsx","webpack://_N_E/../src/alert-dialog.tsx"],"sourcesContent":["import * as React from 'react';\nimport { composeEventHandlers } from '@radix-ui/primitive';\nimport { useComposedRefs } from '@radix-ui/react-compose-refs';\nimport { createContext, createContextScope } from '@radix-ui/react-context';\nimport { useId } from '@radix-ui/react-id';\nimport { useControllableState } from '@radix-ui/react-use-controllable-state';\nimport { DismissableLayer } from '@radix-ui/react-dismissable-layer';\nimport { FocusScope } from '@radix-ui/react-focus-scope';\nimport { Portal as PortalPrimitive } from '@radix-ui/react-portal';\nimport { Presence } from '@radix-ui/react-presence';\nimport { Primitive } from '@radix-ui/react-primitive';\nimport { useFocusGuards } from '@radix-ui/react-focus-guards';\nimport { RemoveScroll } from 'react-remove-scroll';\nimport { hideOthers } from 'aria-hidden';\nimport { createSlot } from '@radix-ui/react-slot';\n\nimport type { Scope } from '@radix-ui/react-context';\n\n/* -------------------------------------------------------------------------------------------------\n * Dialog\n * -----------------------------------------------------------------------------------------------*/\n\nconst DIALOG_NAME = 'Dialog';\n\ntype ScopedProps<P> = P & { __scopeDialog?: Scope };\nconst [createDialogContext, createDialogScope] = createContextScope(DIALOG_NAME);\n\ntype DialogContextValue = {\n  triggerRef: React.RefObject<HTMLButtonElement | null>;\n  contentRef: React.RefObject<DialogContentElement | null>;\n  contentId: string;\n  titleId: string;\n  descriptionId: string;\n  open: boolean;\n  onOpenChange(open: boolean): void;\n  onOpenToggle(): void;\n  modal: boolean;\n};\n\nconst [DialogProvider, useDialogContext] = createDialogContext<DialogContextValue>(DIALOG_NAME);\n\ninterface DialogProps {\n  children?: React.ReactNode;\n  open?: boolean;\n  defaultOpen?: boolean;\n  onOpenChange?(open: boolean): void;\n  modal?: boolean;\n}\n\nconst Dialog: React.FC<DialogProps> = (props: ScopedProps<DialogProps>) => {\n  const {\n    __scopeDialog,\n    children,\n    open: openProp,\n    defaultOpen,\n    onOpenChange,\n    modal = true,\n  } = props;\n  const triggerRef = React.useRef<HTMLButtonElement>(null);\n  const contentRef = React.useRef<DialogContentElement>(null);\n  const [open, setOpen] = useControllableState({\n    prop: openProp,\n    defaultProp: defaultOpen ?? false,\n    onChange: onOpenChange,\n    caller: DIALOG_NAME,\n  });\n\n  return (\n    <DialogProvider\n      scope={__scopeDialog}\n      triggerRef={triggerRef}\n      contentRef={contentRef}\n      contentId={useId()}\n      titleId={useId()}\n      descriptionId={useId()}\n      open={open}\n      onOpenChange={setOpen}\n      onOpenToggle={React.useCallback(() => setOpen((prevOpen) => !prevOpen), [setOpen])}\n      modal={modal}\n    >\n      {children}\n    </DialogProvider>\n  );\n};\n\nDialog.displayName = DIALOG_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * DialogTrigger\n * -----------------------------------------------------------------------------------------------*/\n\nconst TRIGGER_NAME = 'DialogTrigger';\n\ntype DialogTriggerElement = React.ComponentRef<typeof Primitive.button>;\ntype PrimitiveButtonProps = React.ComponentPropsWithoutRef<typeof Primitive.button>;\ninterface DialogTriggerProps extends PrimitiveButtonProps {}\n\nconst DialogTrigger = React.forwardRef<DialogTriggerElement, DialogTriggerProps>(\n  (props: ScopedProps<DialogTriggerProps>, forwardedRef) => {\n    const { __scopeDialog, ...triggerProps } = props;\n    const context = useDialogContext(TRIGGER_NAME, __scopeDialog);\n    const composedTriggerRef = useComposedRefs(forwardedRef, context.triggerRef);\n    return (\n      <Primitive.button\n        type=\"button\"\n        aria-haspopup=\"dialog\"\n        aria-expanded={context.open}\n        aria-controls={context.contentId}\n        data-state={getState(context.open)}\n        {...triggerProps}\n        ref={composedTriggerRef}\n        onClick={composeEventHandlers(props.onClick, context.onOpenToggle)}\n      />\n    );\n  }\n);\n\nDialogTrigger.displayName = TRIGGER_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * DialogPortal\n * -----------------------------------------------------------------------------------------------*/\n\nconst PORTAL_NAME = 'DialogPortal';\n\ntype PortalContextValue = { forceMount?: true };\nconst [PortalProvider, usePortalContext] = createDialogContext<PortalContextValue>(PORTAL_NAME, {\n  forceMount: undefined,\n});\n\ntype PortalProps = React.ComponentPropsWithoutRef<typeof PortalPrimitive>;\ninterface DialogPortalProps {\n  children?: React.ReactNode;\n  /**\n   * Specify a container element to portal the content into.\n   */\n  container?: PortalProps['container'];\n  /**\n   * Used to force mounting when more control is needed. Useful when\n   * controlling animation with React animation libraries.\n   */\n  forceMount?: true;\n}\n\nconst DialogPortal: React.FC<DialogPortalProps> = (props: ScopedProps<DialogPortalProps>) => {\n  const { __scopeDialog, forceMount, children, container } = props;\n  const context = useDialogContext(PORTAL_NAME, __scopeDialog);\n  return (\n    <PortalProvider scope={__scopeDialog} forceMount={forceMount}>\n      {React.Children.map(children, (child) => (\n        <Presence present={forceMount || context.open}>\n          <PortalPrimitive asChild container={container}>\n            {child}\n          </PortalPrimitive>\n        </Presence>\n      ))}\n    </PortalProvider>\n  );\n};\n\nDialogPortal.displayName = PORTAL_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * DialogOverlay\n * -----------------------------------------------------------------------------------------------*/\n\nconst OVERLAY_NAME = 'DialogOverlay';\n\ntype DialogOverlayElement = DialogOverlayImplElement;\ninterface DialogOverlayProps extends DialogOverlayImplProps {\n  /**\n   * Used to force mounting when more control is needed. Useful when\n   * controlling animation with React animation libraries.\n   */\n  forceMount?: true;\n}\n\nconst DialogOverlay = React.forwardRef<DialogOverlayElement, DialogOverlayProps>(\n  (props: ScopedProps<DialogOverlayProps>, forwardedRef) => {\n    const portalContext = usePortalContext(OVERLAY_NAME, props.__scopeDialog);\n    const { forceMount = portalContext.forceMount, ...overlayProps } = props;\n    const context = useDialogContext(OVERLAY_NAME, props.__scopeDialog);\n    return context.modal ? (\n      <Presence present={forceMount || context.open}>\n        <DialogOverlayImpl {...overlayProps} ref={forwardedRef} />\n      </Presence>\n    ) : null;\n  }\n);\n\nDialogOverlay.displayName = OVERLAY_NAME;\n\ntype DialogOverlayImplElement = React.ComponentRef<typeof Primitive.div>;\ntype PrimitiveDivProps = React.ComponentPropsWithoutRef<typeof Primitive.div>;\ninterface DialogOverlayImplProps extends PrimitiveDivProps {}\n\nconst Slot = createSlot('DialogOverlay.RemoveScroll');\n\nconst DialogOverlayImpl = React.forwardRef<DialogOverlayImplElement, DialogOverlayImplProps>(\n  (props: ScopedProps<DialogOverlayImplProps>, forwardedRef) => {\n    const { __scopeDialog, ...overlayProps } = props;\n    const context = useDialogContext(OVERLAY_NAME, __scopeDialog);\n    return (\n      // Make sure `Content` is scrollable even when it doesn't live inside `RemoveScroll`\n      // ie. when `Overlay` and `Content` are siblings\n      <RemoveScroll as={Slot} allowPinchZoom shards={[context.contentRef]}>\n        <Primitive.div\n          data-state={getState(context.open)}\n          {...overlayProps}\n          ref={forwardedRef}\n          // We re-enable pointer-events prevented by `Dialog.Content` to allow scrolling the overlay.\n          style={{ pointerEvents: 'auto', ...overlayProps.style }}\n        />\n      </RemoveScroll>\n    );\n  }\n);\n\n/* -------------------------------------------------------------------------------------------------\n * DialogContent\n * -----------------------------------------------------------------------------------------------*/\n\nconst CONTENT_NAME = 'DialogContent';\n\ntype DialogContentElement = DialogContentTypeElement;\ninterface DialogContentProps extends DialogContentTypeProps {\n  /**\n   * Used to force mounting when more control is needed. Useful when\n   * controlling animation with React animation libraries.\n   */\n  forceMount?: true;\n}\n\nconst DialogContent = React.forwardRef<DialogContentElement, DialogContentProps>(\n  (props: ScopedProps<DialogContentProps>, forwardedRef) => {\n    const portalContext = usePortalContext(CONTENT_NAME, props.__scopeDialog);\n    const { forceMount = portalContext.forceMount, ...contentProps } = props;\n    const context = useDialogContext(CONTENT_NAME, props.__scopeDialog);\n    return (\n      <Presence present={forceMount || context.open}>\n        {context.modal ? (\n          <DialogContentModal {...contentProps} ref={forwardedRef} />\n        ) : (\n          <DialogContentNonModal {...contentProps} ref={forwardedRef} />\n        )}\n      </Presence>\n    );\n  }\n);\n\nDialogContent.displayName = CONTENT_NAME;\n\n/* -----------------------------------------------------------------------------------------------*/\n\ntype DialogContentTypeElement = DialogContentImplElement;\ninterface DialogContentTypeProps\n  extends Omit<DialogContentImplProps, 'trapFocus' | 'disableOutsidePointerEvents'> {}\n\nconst DialogContentModal = React.forwardRef<DialogContentTypeElement, DialogContentTypeProps>(\n  (props: ScopedProps<DialogContentTypeProps>, forwardedRef) => {\n    const context = useDialogContext(CONTENT_NAME, props.__scopeDialog);\n    const contentRef = React.useRef<HTMLDivElement>(null);\n    const composedRefs = useComposedRefs(forwardedRef, context.contentRef, contentRef);\n\n    // aria-hide everything except the content (better supported equivalent to setting aria-modal)\n    React.useEffect(() => {\n      const content = contentRef.current;\n      if (content) return hideOthers(content);\n    }, []);\n\n    return (\n      <DialogContentImpl\n        {...props}\n        ref={composedRefs}\n        // we make sure focus isn't trapped once `DialogContent` has been closed\n        // (closed !== unmounted when animating out)\n        trapFocus={context.open}\n        disableOutsidePointerEvents\n        onCloseAutoFocus={composeEventHandlers(props.onCloseAutoFocus, (event) => {\n          event.preventDefault();\n          context.triggerRef.current?.focus();\n        })}\n        onPointerDownOutside={composeEventHandlers(props.onPointerDownOutside, (event) => {\n          const originalEvent = event.detail.originalEvent;\n          const ctrlLeftClick = originalEvent.button === 0 && originalEvent.ctrlKey === true;\n          const isRightClick = originalEvent.button === 2 || ctrlLeftClick;\n\n          // If the event is a right-click, we shouldn't close because\n          // it is effectively as if we right-clicked the `Overlay`.\n          if (isRightClick) event.preventDefault();\n        })}\n        // When focus is trapped, a `focusout` event may still happen.\n        // We make sure we don't trigger our `onDismiss` in such case.\n        onFocusOutside={composeEventHandlers(props.onFocusOutside, (event) =>\n          event.preventDefault()\n        )}\n      />\n    );\n  }\n);\n\n/* -----------------------------------------------------------------------------------------------*/\n\nconst DialogContentNonModal = React.forwardRef<DialogContentTypeElement, DialogContentTypeProps>(\n  (props: ScopedProps<DialogContentTypeProps>, forwardedRef) => {\n    const context = useDialogContext(CONTENT_NAME, props.__scopeDialog);\n    const hasInteractedOutsideRef = React.useRef(false);\n    const hasPointerDownOutsideRef = React.useRef(false);\n\n    return (\n      <DialogContentImpl\n        {...props}\n        ref={forwardedRef}\n        trapFocus={false}\n        disableOutsidePointerEvents={false}\n        onCloseAutoFocus={(event) => {\n          props.onCloseAutoFocus?.(event);\n\n          if (!event.defaultPrevented) {\n            if (!hasInteractedOutsideRef.current) context.triggerRef.current?.focus();\n            // Always prevent auto focus because we either focus manually or want user agent focus\n            event.preventDefault();\n          }\n\n          hasInteractedOutsideRef.current = false;\n          hasPointerDownOutsideRef.current = false;\n        }}\n        onInteractOutside={(event) => {\n          props.onInteractOutside?.(event);\n\n          if (!event.defaultPrevented) {\n            hasInteractedOutsideRef.current = true;\n            if (event.detail.originalEvent.type === 'pointerdown') {\n              hasPointerDownOutsideRef.current = true;\n            }\n          }\n\n          // Prevent dismissing when clicking the trigger.\n          // As the trigger is already setup to close, without doing so would\n          // cause it to close and immediately open.\n          const target = event.target as HTMLElement;\n          const targetIsTrigger = context.triggerRef.current?.contains(target);\n          if (targetIsTrigger) event.preventDefault();\n\n          // On Safari if the trigger is inside a container with tabIndex={0}, when clicked\n          // we will get the pointer down outside event on the trigger, but then a subsequent\n          // focus outside event on the container, we ignore any focus outside event when we've\n          // already had a pointer down outside event.\n          if (event.detail.originalEvent.type === 'focusin' && hasPointerDownOutsideRef.current) {\n            event.preventDefault();\n          }\n        }}\n      />\n    );\n  }\n);\n\n/* -----------------------------------------------------------------------------------------------*/\n\ntype DialogContentImplElement = React.ComponentRef<typeof DismissableLayer>;\ntype DismissableLayerProps = React.ComponentPropsWithoutRef<typeof DismissableLayer>;\ntype FocusScopeProps = React.ComponentPropsWithoutRef<typeof FocusScope>;\ninterface DialogContentImplProps extends Omit<DismissableLayerProps, 'onDismiss'> {\n  /**\n   * When `true`, focus cannot escape the `Content` via keyboard,\n   * pointer, or a programmatic focus.\n   * @defaultValue false\n   */\n  trapFocus?: FocusScopeProps['trapped'];\n\n  /**\n   * Event handler called when auto-focusing on open.\n   * Can be prevented.\n   */\n  onOpenAutoFocus?: FocusScopeProps['onMountAutoFocus'];\n\n  /**\n   * Event handler called when auto-focusing on close.\n   * Can be prevented.\n   */\n  onCloseAutoFocus?: FocusScopeProps['onUnmountAutoFocus'];\n}\n\nconst DialogContentImpl = React.forwardRef<DialogContentImplElement, DialogContentImplProps>(\n  (props: ScopedProps<DialogContentImplProps>, forwardedRef) => {\n    const { __scopeDialog, trapFocus, onOpenAutoFocus, onCloseAutoFocus, ...contentProps } = props;\n    const context = useDialogContext(CONTENT_NAME, __scopeDialog);\n    const contentRef = React.useRef<HTMLDivElement>(null);\n    const composedRefs = useComposedRefs(forwardedRef, contentRef);\n\n    // Make sure the whole tree has focus guards as our `Dialog` will be\n    // the last element in the DOM (because of the `Portal`)\n    useFocusGuards();\n\n    return (\n      <>\n        <FocusScope\n          asChild\n          loop\n          trapped={trapFocus}\n          onMountAutoFocus={onOpenAutoFocus}\n          onUnmountAutoFocus={onCloseAutoFocus}\n        >\n          <DismissableLayer\n            role=\"dialog\"\n            id={context.contentId}\n            aria-describedby={context.descriptionId}\n            aria-labelledby={context.titleId}\n            data-state={getState(context.open)}\n            {...contentProps}\n            ref={composedRefs}\n            onDismiss={() => context.onOpenChange(false)}\n          />\n        </FocusScope>\n        {process.env.NODE_ENV !== 'production' && (\n          <>\n            <TitleWarning titleId={context.titleId} />\n            <DescriptionWarning contentRef={contentRef} descriptionId={context.descriptionId} />\n          </>\n        )}\n      </>\n    );\n  }\n);\n\n/* -------------------------------------------------------------------------------------------------\n * DialogTitle\n * -----------------------------------------------------------------------------------------------*/\n\nconst TITLE_NAME = 'DialogTitle';\n\ntype DialogTitleElement = React.ComponentRef<typeof Primitive.h2>;\ntype PrimitiveHeading2Props = React.ComponentPropsWithoutRef<typeof Primitive.h2>;\ninterface DialogTitleProps extends PrimitiveHeading2Props {}\n\nconst DialogTitle = React.forwardRef<DialogTitleElement, DialogTitleProps>(\n  (props: ScopedProps<DialogTitleProps>, forwardedRef) => {\n    const { __scopeDialog, ...titleProps } = props;\n    const context = useDialogContext(TITLE_NAME, __scopeDialog);\n    return <Primitive.h2 id={context.titleId} {...titleProps} ref={forwardedRef} />;\n  }\n);\n\nDialogTitle.displayName = TITLE_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * DialogDescription\n * -----------------------------------------------------------------------------------------------*/\n\nconst DESCRIPTION_NAME = 'DialogDescription';\n\ntype DialogDescriptionElement = React.ComponentRef<typeof Primitive.p>;\ntype PrimitiveParagraphProps = React.ComponentPropsWithoutRef<typeof Primitive.p>;\ninterface DialogDescriptionProps extends PrimitiveParagraphProps {}\n\nconst DialogDescription = React.forwardRef<DialogDescriptionElement, DialogDescriptionProps>(\n  (props: ScopedProps<DialogDescriptionProps>, forwardedRef) => {\n    const { __scopeDialog, ...descriptionProps } = props;\n    const context = useDialogContext(DESCRIPTION_NAME, __scopeDialog);\n    return <Primitive.p id={context.descriptionId} {...descriptionProps} ref={forwardedRef} />;\n  }\n);\n\nDialogDescription.displayName = DESCRIPTION_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * DialogClose\n * -----------------------------------------------------------------------------------------------*/\n\nconst CLOSE_NAME = 'DialogClose';\n\ntype DialogCloseElement = React.ComponentRef<typeof Primitive.button>;\ninterface DialogCloseProps extends PrimitiveButtonProps {}\n\nconst DialogClose = React.forwardRef<DialogCloseElement, DialogCloseProps>(\n  (props: ScopedProps<DialogCloseProps>, forwardedRef) => {\n    const { __scopeDialog, ...closeProps } = props;\n    const context = useDialogContext(CLOSE_NAME, __scopeDialog);\n    return (\n      <Primitive.button\n        type=\"button\"\n        {...closeProps}\n        ref={forwardedRef}\n        onClick={composeEventHandlers(props.onClick, () => context.onOpenChange(false))}\n      />\n    );\n  }\n);\n\nDialogClose.displayName = CLOSE_NAME;\n\n/* -----------------------------------------------------------------------------------------------*/\n\nfunction getState(open: boolean) {\n  return open ? 'open' : 'closed';\n}\n\nconst TITLE_WARNING_NAME = 'DialogTitleWarning';\n\nconst [WarningProvider, useWarningContext] = createContext(TITLE_WARNING_NAME, {\n  contentName: CONTENT_NAME,\n  titleName: TITLE_NAME,\n  docsSlug: 'dialog',\n});\n\ntype TitleWarningProps = { titleId?: string };\n\nconst TitleWarning: React.FC<TitleWarningProps> = ({ titleId }) => {\n  const titleWarningContext = useWarningContext(TITLE_WARNING_NAME);\n\n  const MESSAGE = `\\`${titleWarningContext.contentName}\\` requires a \\`${titleWarningContext.titleName}\\` for the component to be accessible for screen reader users.\n\nIf you want to hide the \\`${titleWarningContext.titleName}\\`, you can wrap it with our VisuallyHidden component.\n\nFor more information, see https://radix-ui.com/primitives/docs/components/${titleWarningContext.docsSlug}`;\n\n  React.useEffect(() => {\n    if (titleId) {\n      const hasTitle = document.getElementById(titleId);\n      if (!hasTitle) console.error(MESSAGE);\n    }\n  }, [MESSAGE, titleId]);\n\n  return null;\n};\n\nconst DESCRIPTION_WARNING_NAME = 'DialogDescriptionWarning';\n\ntype DescriptionWarningProps = {\n  contentRef: React.RefObject<DialogContentElement | null>;\n  descriptionId?: string;\n};\n\nconst DescriptionWarning: React.FC<DescriptionWarningProps> = ({ contentRef, descriptionId }) => {\n  const descriptionWarningContext = useWarningContext(DESCRIPTION_WARNING_NAME);\n  const MESSAGE = `Warning: Missing \\`Description\\` or \\`aria-describedby={undefined}\\` for {${descriptionWarningContext.contentName}}.`;\n\n  React.useEffect(() => {\n    const describedById = contentRef.current?.getAttribute('aria-describedby');\n    // if we have an id and the user hasn't set aria-describedby={undefined}\n    if (descriptionId && describedById) {\n      const hasDescription = document.getElementById(descriptionId);\n      if (!hasDescription) console.warn(MESSAGE);\n    }\n  }, [MESSAGE, contentRef, descriptionId]);\n\n  return null;\n};\n\nconst Root = Dialog;\nconst Trigger = DialogTrigger;\nconst Portal = DialogPortal;\nconst Overlay = DialogOverlay;\nconst Content = DialogContent;\nconst Title = DialogTitle;\nconst Description = DialogDescription;\nconst Close = DialogClose;\n\nexport {\n  createDialogScope,\n  //\n  Dialog,\n  DialogTrigger,\n  DialogPortal,\n  DialogOverlay,\n  DialogContent,\n  DialogTitle,\n  DialogDescription,\n  DialogClose,\n  //\n  Root,\n  Trigger,\n  Portal,\n  Overlay,\n  Content,\n  Title,\n  Description,\n  Close,\n  //\n  WarningProvider,\n};\nexport type {\n  DialogProps,\n  DialogTriggerProps,\n  DialogPortalProps,\n  DialogOverlayProps,\n  DialogContentProps,\n  DialogTitleProps,\n  DialogDescriptionProps,\n  DialogCloseProps,\n};\n","import * as React from 'react';\nimport { createContextScope } from '@radix-ui/react-context';\nimport { useComposedRefs } from '@radix-ui/react-compose-refs';\nimport * as DialogPrimitive from '@radix-ui/react-dialog';\nimport { createDialogScope } from '@radix-ui/react-dialog';\nimport { composeEventHandlers } from '@radix-ui/primitive';\nimport { createSlottable } from '@radix-ui/react-slot';\n\nimport type { Scope } from '@radix-ui/react-context';\n\n/* -------------------------------------------------------------------------------------------------\n * AlertDialog\n * -----------------------------------------------------------------------------------------------*/\n\nconst ROOT_NAME = 'AlertDialog';\n\ntype ScopedProps<P> = P & { __scopeAlertDialog?: Scope };\nconst [createAlertDialogContext, createAlertDialogScope] = createContextScope(ROOT_NAME, [\n  createDialogScope,\n]);\nconst useDialogScope = createDialogScope();\n\ntype DialogProps = React.ComponentPropsWithoutRef<typeof DialogPrimitive.Root>;\ninterface AlertDialogProps extends Omit<DialogProps, 'modal'> {}\n\nconst AlertDialog: React.FC<AlertDialogProps> = (props: ScopedProps<AlertDialogProps>) => {\n  const { __scopeAlertDialog, ...alertDialogProps } = props;\n  const dialogScope = useDialogScope(__scopeAlertDialog);\n  return <DialogPrimitive.Root {...dialogScope} {...alertDialogProps} modal={true} />;\n};\n\nAlertDialog.displayName = ROOT_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * AlertDialogTrigger\n * -----------------------------------------------------------------------------------------------*/\nconst TRIGGER_NAME = 'AlertDialogTrigger';\n\ntype AlertDialogTriggerElement = React.ComponentRef<typeof DialogPrimitive.Trigger>;\ntype DialogTriggerProps = React.ComponentPropsWithoutRef<typeof DialogPrimitive.Trigger>;\ninterface AlertDialogTriggerProps extends DialogTriggerProps {}\n\nconst AlertDialogTrigger = React.forwardRef<AlertDialogTriggerElement, AlertDialogTriggerProps>(\n  (props: ScopedProps<AlertDialogTriggerProps>, forwardedRef) => {\n    const { __scopeAlertDialog, ...triggerProps } = props;\n    const dialogScope = useDialogScope(__scopeAlertDialog);\n    return <DialogPrimitive.Trigger {...dialogScope} {...triggerProps} ref={forwardedRef} />;\n  }\n);\n\nAlertDialogTrigger.displayName = TRIGGER_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * AlertDialogPortal\n * -----------------------------------------------------------------------------------------------*/\n\nconst PORTAL_NAME = 'AlertDialogPortal';\n\ntype DialogPortalProps = React.ComponentPropsWithoutRef<typeof DialogPrimitive.Portal>;\ninterface AlertDialogPortalProps extends DialogPortalProps {}\n\nconst AlertDialogPortal: React.FC<AlertDialogPortalProps> = (\n  props: ScopedProps<AlertDialogPortalProps>\n) => {\n  const { __scopeAlertDialog, ...portalProps } = props;\n  const dialogScope = useDialogScope(__scopeAlertDialog);\n  return <DialogPrimitive.Portal {...dialogScope} {...portalProps} />;\n};\n\nAlertDialogPortal.displayName = PORTAL_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * AlertDialogOverlay\n * -----------------------------------------------------------------------------------------------*/\n\nconst OVERLAY_NAME = 'AlertDialogOverlay';\n\ntype AlertDialogOverlayElement = React.ComponentRef<typeof DialogPrimitive.Overlay>;\ntype DialogOverlayProps = React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>;\ninterface AlertDialogOverlayProps extends DialogOverlayProps {}\n\nconst AlertDialogOverlay = React.forwardRef<AlertDialogOverlayElement, AlertDialogOverlayProps>(\n  (props: ScopedProps<AlertDialogOverlayProps>, forwardedRef) => {\n    const { __scopeAlertDialog, ...overlayProps } = props;\n    const dialogScope = useDialogScope(__scopeAlertDialog);\n    return <DialogPrimitive.Overlay {...dialogScope} {...overlayProps} ref={forwardedRef} />;\n  }\n);\n\nAlertDialogOverlay.displayName = OVERLAY_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * AlertDialogContent\n * -----------------------------------------------------------------------------------------------*/\n\nconst CONTENT_NAME = 'AlertDialogContent';\n\ntype AlertDialogContentContextValue = {\n  cancelRef: React.MutableRefObject<AlertDialogCancelElement | null>;\n};\n\nconst [AlertDialogContentProvider, useAlertDialogContentContext] =\n  createAlertDialogContext<AlertDialogContentContextValue>(CONTENT_NAME);\n\ntype AlertDialogContentElement = React.ComponentRef<typeof DialogPrimitive.Content>;\ntype DialogContentProps = React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>;\ninterface AlertDialogContentProps\n  extends Omit<DialogContentProps, 'onPointerDownOutside' | 'onInteractOutside'> {}\n\nconst Slottable = createSlottable('AlertDialogContent');\n\nconst AlertDialogContent = React.forwardRef<AlertDialogContentElement, AlertDialogContentProps>(\n  (props: ScopedProps<AlertDialogContentProps>, forwardedRef) => {\n    const { __scopeAlertDialog, children, ...contentProps } = props;\n    const dialogScope = useDialogScope(__scopeAlertDialog);\n    const contentRef = React.useRef<AlertDialogContentElement>(null);\n    const composedRefs = useComposedRefs(forwardedRef, contentRef);\n    const cancelRef = React.useRef<AlertDialogCancelElement | null>(null);\n\n    return (\n      <DialogPrimitive.WarningProvider\n        contentName={CONTENT_NAME}\n        titleName={TITLE_NAME}\n        docsSlug=\"alert-dialog\"\n      >\n        <AlertDialogContentProvider scope={__scopeAlertDialog} cancelRef={cancelRef}>\n          <DialogPrimitive.Content\n            role=\"alertdialog\"\n            {...dialogScope}\n            {...contentProps}\n            ref={composedRefs}\n            onOpenAutoFocus={composeEventHandlers(contentProps.onOpenAutoFocus, (event) => {\n              event.preventDefault();\n              cancelRef.current?.focus({ preventScroll: true });\n            })}\n            onPointerDownOutside={(event) => event.preventDefault()}\n            onInteractOutside={(event) => event.preventDefault()}\n          >\n            {/**\n             * We have to use `Slottable` here as we cannot wrap the `AlertDialogContentProvider`\n             * around everything, otherwise the `DescriptionWarning` would be rendered straight away.\n             * This is because we want the accessibility checks to run only once the content is actually\n             * open and that behaviour is already encapsulated in `DialogContent`.\n             */}\n            <Slottable>{children}</Slottable>\n            {process.env.NODE_ENV === 'development' && (\n              <DescriptionWarning contentRef={contentRef} />\n            )}\n          </DialogPrimitive.Content>\n        </AlertDialogContentProvider>\n      </DialogPrimitive.WarningProvider>\n    );\n  }\n);\n\nAlertDialogContent.displayName = CONTENT_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * AlertDialogTitle\n * -----------------------------------------------------------------------------------------------*/\n\nconst TITLE_NAME = 'AlertDialogTitle';\n\ntype AlertDialogTitleElement = React.ComponentRef<typeof DialogPrimitive.Title>;\ntype DialogTitleProps = React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>;\ninterface AlertDialogTitleProps extends DialogTitleProps {}\n\nconst AlertDialogTitle = React.forwardRef<AlertDialogTitleElement, AlertDialogTitleProps>(\n  (props: ScopedProps<AlertDialogTitleProps>, forwardedRef) => {\n    const { __scopeAlertDialog, ...titleProps } = props;\n    const dialogScope = useDialogScope(__scopeAlertDialog);\n    return <DialogPrimitive.Title {...dialogScope} {...titleProps} ref={forwardedRef} />;\n  }\n);\n\nAlertDialogTitle.displayName = TITLE_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * AlertDialogDescription\n * -----------------------------------------------------------------------------------------------*/\n\nconst DESCRIPTION_NAME = 'AlertDialogDescription';\n\ntype AlertDialogDescriptionElement = React.ComponentRef<typeof DialogPrimitive.Description>;\ntype DialogDescriptionProps = React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>;\ninterface AlertDialogDescriptionProps extends DialogDescriptionProps {}\n\nconst AlertDialogDescription = React.forwardRef<\n  AlertDialogDescriptionElement,\n  AlertDialogDescriptionProps\n>((props: ScopedProps<AlertDialogDescriptionProps>, forwardedRef) => {\n  const { __scopeAlertDialog, ...descriptionProps } = props;\n  const dialogScope = useDialogScope(__scopeAlertDialog);\n  return <DialogPrimitive.Description {...dialogScope} {...descriptionProps} ref={forwardedRef} />;\n});\n\nAlertDialogDescription.displayName = DESCRIPTION_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * AlertDialogAction\n * -----------------------------------------------------------------------------------------------*/\n\nconst ACTION_NAME = 'AlertDialogAction';\n\ntype AlertDialogActionElement = React.ComponentRef<typeof DialogPrimitive.Close>;\ntype DialogCloseProps = React.ComponentPropsWithoutRef<typeof DialogPrimitive.Close>;\ninterface AlertDialogActionProps extends DialogCloseProps {}\n\nconst AlertDialogAction = React.forwardRef<AlertDialogActionElement, AlertDialogActionProps>(\n  (props: ScopedProps<AlertDialogActionProps>, forwardedRef) => {\n    const { __scopeAlertDialog, ...actionProps } = props;\n    const dialogScope = useDialogScope(__scopeAlertDialog);\n    return <DialogPrimitive.Close {...dialogScope} {...actionProps} ref={forwardedRef} />;\n  }\n);\n\nAlertDialogAction.displayName = ACTION_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * AlertDialogCancel\n * -----------------------------------------------------------------------------------------------*/\n\nconst CANCEL_NAME = 'AlertDialogCancel';\n\ntype AlertDialogCancelElement = React.ComponentRef<typeof DialogPrimitive.Close>;\ninterface AlertDialogCancelProps extends DialogCloseProps {}\n\nconst AlertDialogCancel = React.forwardRef<AlertDialogCancelElement, AlertDialogCancelProps>(\n  (props: ScopedProps<AlertDialogCancelProps>, forwardedRef) => {\n    const { __scopeAlertDialog, ...cancelProps } = props;\n    const { cancelRef } = useAlertDialogContentContext(CANCEL_NAME, __scopeAlertDialog);\n    const dialogScope = useDialogScope(__scopeAlertDialog);\n    const ref = useComposedRefs(forwardedRef, cancelRef);\n    return <DialogPrimitive.Close {...dialogScope} {...cancelProps} ref={ref} />;\n  }\n);\n\nAlertDialogCancel.displayName = CANCEL_NAME;\n\n/* ---------------------------------------------------------------------------------------------- */\n\ntype DescriptionWarningProps = {\n  contentRef: React.RefObject<AlertDialogContentElement | null>;\n};\n\nconst DescriptionWarning: React.FC<DescriptionWarningProps> = ({ contentRef }) => {\n  const MESSAGE = `\\`${CONTENT_NAME}\\` requires a description for the component to be accessible for screen reader users.\n\nYou can add a description to the \\`${CONTENT_NAME}\\` by passing a \\`${DESCRIPTION_NAME}\\` component as a child, which also benefits sighted users by adding visible context to the dialog.\n\nAlternatively, you can use your own component as a description by assigning it an \\`id\\` and passing the same value to the \\`aria-describedby\\` prop in \\`${CONTENT_NAME}\\`. If the description is confusing or duplicative for sighted users, you can use the \\`@radix-ui/react-visually-hidden\\` primitive as a wrapper around your description component.\n\nFor more information, see https://radix-ui.com/primitives/docs/components/alert-dialog`;\n\n  React.useEffect(() => {\n    const hasDescription = document.getElementById(\n      contentRef.current?.getAttribute('aria-describedby')!\n    );\n    if (!hasDescription) console.warn(MESSAGE);\n  }, [MESSAGE, contentRef]);\n\n  return null;\n};\n\nconst Root = AlertDialog;\nconst Trigger = AlertDialogTrigger;\nconst Portal = AlertDialogPortal;\nconst Overlay = AlertDialogOverlay;\nconst Content = AlertDialogContent;\nconst Action = AlertDialogAction;\nconst Cancel = AlertDialogCancel;\nconst Title = AlertDialogTitle;\nconst Description = AlertDialogDescription;\n\nexport {\n  createAlertDialogScope,\n  //\n  AlertDialog,\n  AlertDialogTrigger,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogContent,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  //\n  Root,\n  Trigger,\n  Portal,\n  Overlay,\n  Content,\n  Action,\n  Cancel,\n  Title,\n  Description,\n};\nexport type {\n  AlertDialogProps,\n  AlertDialogTriggerProps,\n  AlertDialogPortalProps,\n  AlertDialogOverlayProps,\n  AlertDialogContentProps,\n  AlertDialogActionProps,\n  AlertDialogCancelProps,\n  AlertDialogTitleProps,\n  AlertDialogDescriptionProps,\n};\n"],"names":["DIALOG_NAME","createDialogContext","createDialogScope","createContextScope","DialogProvider","useDialogContext","Dialog","__scopeDialog","children","open","openProp","defaultOpen","onOpenChange","modal","props","triggerRef","React","contentRef","setOpen","useControllableState","prop","defaultProp","onChange","caller","jsx","scope","contentId","useId","titleId","descriptionId","onOpenToggle","prevOpen","displayName","TRIGGER_NAME","DialogTrigger","forwardedRef","triggerProps","context","composedTriggerRef","useComposedRefs","Primitive","button","type","getState","ref","onClick","composeEventHandlers","PORTAL_NAME","PortalProvider","usePortalContext","forceMount","DialogPortal","container","map","Presence","present","PortalPrimitive","asChild","child","OVERLAY_NAME","DialogOverlay","portalContext","overlayProps","DialogOverlayImpl","Slot","createSlot","RemoveScroll","as","allowPinchZoom","shards","div","style","pointerEvents","CONTENT_NAME","DialogContent","contentProps","DialogContentModal","DialogContentNonModal","composedRefs","content","current","hideOthers","DialogContentImpl","trapFocus","disableOutsidePointerEvents","onCloseAutoFocus","event","preventDefault","focus","onPointerDownOutside","originalEvent","detail","ctrlLeftClick","ctrlKey","onFocusOutside","hasInteractedOutsideRef","hasPointerDownOutsideRef","defaultPrevented","onInteractOutside","target","targetIsTrigger","contains","onOpenAutoFocus","useFocusGuards","jsxs","Fragment","FocusScope","loop","trapped","onMountAutoFocus","onUnmountAutoFocus","DismissableLayer","role","id","onDismiss","TitleWarning","DescriptionWarning","TITLE_NAME","DialogTitle","titleProps","h2","DESCRIPTION_NAME","DialogDescription","descriptionProps","p","CLOSE_NAME","DialogClose","closeProps","TITLE_WARNING_NAME","WarningProvider","useWarningContext","createContext","contentName","titleName","docsSlug","param","titleWarningContext","MESSAGE","concat","document","getElementById","console","error","descriptionWarningContext","describedById","getAttribute","warn","ROOT_NAME","createAlertDialogContext","createAlertDialogScope","useDialogScope","AlertDialog","__scopeAlertDialog","alertDialogProps","dialogScope","AlertDialogTrigger","AlertDialogPortal","portalProps","AlertDialogOverlay","AlertDialogContentProvider","useAlertDialogContentContext","Slottable","createSlottable","AlertDialogContent","cancelRef","DialogPrimitive","preventScroll","AlertDialogTitle","AlertDialogDescription","AlertDialogAction","actionProps","CANCEL_NAME","AlertDialogCancel","cancelProps","Root","Trigger","Portal","Overlay","Content","Action","Cancel","Title","Description"],"sourceRoot":""}