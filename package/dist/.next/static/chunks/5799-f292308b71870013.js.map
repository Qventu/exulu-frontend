{"version":3,"file":"static/chunks/5799-f292308b71870013.js","mappings":"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","sources":["webpack://_N_E/./node_modules/@floating-ui/utils/dist/floating-ui.utils.mjs","webpack://_N_E/./node_modules/@floating-ui/core/dist/floating-ui.core.mjs","webpack://_N_E/./node_modules/@floating-ui/utils/dist/floating-ui.utils.dom.mjs","webpack://_N_E/./node_modules/@floating-ui/dom/dist/floating-ui.dom.mjs","webpack://_N_E/./node_modules/@floating-ui/react-dom/dist/floating-ui.react-dom.mjs","webpack://_N_E/./node_modules/@radix-ui/react-arrow/dist/index.mjs","webpack://_N_E/../src/dismissable-layer.tsx","webpack://_N_E/../src/focus-guards.tsx","webpack://_N_E/../src/popper.tsx"],"sourcesContent":["/**\n * Custom positioning reference element.\n * @see https://floating-ui.com/docs/virtual-elements\n */\n\nconst sides = ['top', 'right', 'bottom', 'left'];\nconst alignments = ['start', 'end'];\nconst placements = /*#__PURE__*/sides.reduce((acc, side) => acc.concat(side, side + \"-\" + alignments[0], side + \"-\" + alignments[1]), []);\nconst min = Math.min;\nconst max = Math.max;\nconst round = Math.round;\nconst floor = Math.floor;\nconst createCoords = v => ({\n  x: v,\n  y: v\n});\nconst oppositeSideMap = {\n  left: 'right',\n  right: 'left',\n  bottom: 'top',\n  top: 'bottom'\n};\nconst oppositeAlignmentMap = {\n  start: 'end',\n  end: 'start'\n};\nfunction clamp(start, value, end) {\n  return max(start, min(value, end));\n}\nfunction evaluate(value, param) {\n  return typeof value === 'function' ? value(param) : value;\n}\nfunction getSide(placement) {\n  return placement.split('-')[0];\n}\nfunction getAlignment(placement) {\n  return placement.split('-')[1];\n}\nfunction getOppositeAxis(axis) {\n  return axis === 'x' ? 'y' : 'x';\n}\nfunction getAxisLength(axis) {\n  return axis === 'y' ? 'height' : 'width';\n}\nconst yAxisSides = /*#__PURE__*/new Set(['top', 'bottom']);\nfunction getSideAxis(placement) {\n  return yAxisSides.has(getSide(placement)) ? 'y' : 'x';\n}\nfunction getAlignmentAxis(placement) {\n  return getOppositeAxis(getSideAxis(placement));\n}\nfunction getAlignmentSides(placement, rects, rtl) {\n  if (rtl === void 0) {\n    rtl = false;\n  }\n  const alignment = getAlignment(placement);\n  const alignmentAxis = getAlignmentAxis(placement);\n  const length = getAxisLength(alignmentAxis);\n  let mainAlignmentSide = alignmentAxis === 'x' ? alignment === (rtl ? 'end' : 'start') ? 'right' : 'left' : alignment === 'start' ? 'bottom' : 'top';\n  if (rects.reference[length] > rects.floating[length]) {\n    mainAlignmentSide = getOppositePlacement(mainAlignmentSide);\n  }\n  return [mainAlignmentSide, getOppositePlacement(mainAlignmentSide)];\n}\nfunction getExpandedPlacements(placement) {\n  const oppositePlacement = getOppositePlacement(placement);\n  return [getOppositeAlignmentPlacement(placement), oppositePlacement, getOppositeAlignmentPlacement(oppositePlacement)];\n}\nfunction getOppositeAlignmentPlacement(placement) {\n  return placement.replace(/start|end/g, alignment => oppositeAlignmentMap[alignment]);\n}\nconst lrPlacement = ['left', 'right'];\nconst rlPlacement = ['right', 'left'];\nconst tbPlacement = ['top', 'bottom'];\nconst btPlacement = ['bottom', 'top'];\nfunction getSideList(side, isStart, rtl) {\n  switch (side) {\n    case 'top':\n    case 'bottom':\n      if (rtl) return isStart ? rlPlacement : lrPlacement;\n      return isStart ? lrPlacement : rlPlacement;\n    case 'left':\n    case 'right':\n      return isStart ? tbPlacement : btPlacement;\n    default:\n      return [];\n  }\n}\nfunction getOppositeAxisPlacements(placement, flipAlignment, direction, rtl) {\n  const alignment = getAlignment(placement);\n  let list = getSideList(getSide(placement), direction === 'start', rtl);\n  if (alignment) {\n    list = list.map(side => side + \"-\" + alignment);\n    if (flipAlignment) {\n      list = list.concat(list.map(getOppositeAlignmentPlacement));\n    }\n  }\n  return list;\n}\nfunction getOppositePlacement(placement) {\n  return placement.replace(/left|right|bottom|top/g, side => oppositeSideMap[side]);\n}\nfunction expandPaddingObject(padding) {\n  return {\n    top: 0,\n    right: 0,\n    bottom: 0,\n    left: 0,\n    ...padding\n  };\n}\nfunction getPaddingObject(padding) {\n  return typeof padding !== 'number' ? expandPaddingObject(padding) : {\n    top: padding,\n    right: padding,\n    bottom: padding,\n    left: padding\n  };\n}\nfunction rectToClientRect(rect) {\n  const {\n    x,\n    y,\n    width,\n    height\n  } = rect;\n  return {\n    width,\n    height,\n    top: y,\n    left: x,\n    right: x + width,\n    bottom: y + height,\n    x,\n    y\n  };\n}\n\nexport { alignments, clamp, createCoords, evaluate, expandPaddingObject, floor, getAlignment, getAlignmentAxis, getAlignmentSides, getAxisLength, getExpandedPlacements, getOppositeAlignmentPlacement, getOppositeAxis, getOppositeAxisPlacements, getOppositePlacement, getPaddingObject, getSide, getSideAxis, max, min, placements, rectToClientRect, round, sides };\n","import { getSideAxis, getAlignmentAxis, getAxisLength, getSide, getAlignment, evaluate, getPaddingObject, rectToClientRect, min, clamp, placements, getAlignmentSides, getOppositeAlignmentPlacement, getOppositePlacement, getExpandedPlacements, getOppositeAxisPlacements, sides, max, getOppositeAxis } from '@floating-ui/utils';\nexport { rectToClientRect } from '@floating-ui/utils';\n\nfunction computeCoordsFromPlacement(_ref, placement, rtl) {\n  let {\n    reference,\n    floating\n  } = _ref;\n  const sideAxis = getSideAxis(placement);\n  const alignmentAxis = getAlignmentAxis(placement);\n  const alignLength = getAxisLength(alignmentAxis);\n  const side = getSide(placement);\n  const isVertical = sideAxis === 'y';\n  const commonX = reference.x + reference.width / 2 - floating.width / 2;\n  const commonY = reference.y + reference.height / 2 - floating.height / 2;\n  const commonAlign = reference[alignLength] / 2 - floating[alignLength] / 2;\n  let coords;\n  switch (side) {\n    case 'top':\n      coords = {\n        x: commonX,\n        y: reference.y - floating.height\n      };\n      break;\n    case 'bottom':\n      coords = {\n        x: commonX,\n        y: reference.y + reference.height\n      };\n      break;\n    case 'right':\n      coords = {\n        x: reference.x + reference.width,\n        y: commonY\n      };\n      break;\n    case 'left':\n      coords = {\n        x: reference.x - floating.width,\n        y: commonY\n      };\n      break;\n    default:\n      coords = {\n        x: reference.x,\n        y: reference.y\n      };\n  }\n  switch (getAlignment(placement)) {\n    case 'start':\n      coords[alignmentAxis] -= commonAlign * (rtl && isVertical ? -1 : 1);\n      break;\n    case 'end':\n      coords[alignmentAxis] += commonAlign * (rtl && isVertical ? -1 : 1);\n      break;\n  }\n  return coords;\n}\n\n/**\n * Computes the `x` and `y` coordinates that will place the floating element\n * next to a given reference element.\n *\n * This export does not have any `platform` interface logic. You will need to\n * write one for the platform you are using Floating UI with.\n */\nconst computePosition = async (reference, floating, config) => {\n  const {\n    placement = 'bottom',\n    strategy = 'absolute',\n    middleware = [],\n    platform\n  } = config;\n  const validMiddleware = middleware.filter(Boolean);\n  const rtl = await (platform.isRTL == null ? void 0 : platform.isRTL(floating));\n  let rects = await platform.getElementRects({\n    reference,\n    floating,\n    strategy\n  });\n  let {\n    x,\n    y\n  } = computeCoordsFromPlacement(rects, placement, rtl);\n  let statefulPlacement = placement;\n  let middlewareData = {};\n  let resetCount = 0;\n  for (let i = 0; i < validMiddleware.length; i++) {\n    const {\n      name,\n      fn\n    } = validMiddleware[i];\n    const {\n      x: nextX,\n      y: nextY,\n      data,\n      reset\n    } = await fn({\n      x,\n      y,\n      initialPlacement: placement,\n      placement: statefulPlacement,\n      strategy,\n      middlewareData,\n      rects,\n      platform,\n      elements: {\n        reference,\n        floating\n      }\n    });\n    x = nextX != null ? nextX : x;\n    y = nextY != null ? nextY : y;\n    middlewareData = {\n      ...middlewareData,\n      [name]: {\n        ...middlewareData[name],\n        ...data\n      }\n    };\n    if (reset && resetCount <= 50) {\n      resetCount++;\n      if (typeof reset === 'object') {\n        if (reset.placement) {\n          statefulPlacement = reset.placement;\n        }\n        if (reset.rects) {\n          rects = reset.rects === true ? await platform.getElementRects({\n            reference,\n            floating,\n            strategy\n          }) : reset.rects;\n        }\n        ({\n          x,\n          y\n        } = computeCoordsFromPlacement(rects, statefulPlacement, rtl));\n      }\n      i = -1;\n    }\n  }\n  return {\n    x,\n    y,\n    placement: statefulPlacement,\n    strategy,\n    middlewareData\n  };\n};\n\n/**\n * Resolves with an object of overflow side offsets that determine how much the\n * element is overflowing a given clipping boundary on each side.\n * - positive = overflowing the boundary by that number of pixels\n * - negative = how many pixels left before it will overflow\n * - 0 = lies flush with the boundary\n * @see https://floating-ui.com/docs/detectOverflow\n */\nasync function detectOverflow(state, options) {\n  var _await$platform$isEle;\n  if (options === void 0) {\n    options = {};\n  }\n  const {\n    x,\n    y,\n    platform,\n    rects,\n    elements,\n    strategy\n  } = state;\n  const {\n    boundary = 'clippingAncestors',\n    rootBoundary = 'viewport',\n    elementContext = 'floating',\n    altBoundary = false,\n    padding = 0\n  } = evaluate(options, state);\n  const paddingObject = getPaddingObject(padding);\n  const altContext = elementContext === 'floating' ? 'reference' : 'floating';\n  const element = elements[altBoundary ? altContext : elementContext];\n  const clippingClientRect = rectToClientRect(await platform.getClippingRect({\n    element: ((_await$platform$isEle = await (platform.isElement == null ? void 0 : platform.isElement(element))) != null ? _await$platform$isEle : true) ? element : element.contextElement || (await (platform.getDocumentElement == null ? void 0 : platform.getDocumentElement(elements.floating))),\n    boundary,\n    rootBoundary,\n    strategy\n  }));\n  const rect = elementContext === 'floating' ? {\n    x,\n    y,\n    width: rects.floating.width,\n    height: rects.floating.height\n  } : rects.reference;\n  const offsetParent = await (platform.getOffsetParent == null ? void 0 : platform.getOffsetParent(elements.floating));\n  const offsetScale = (await (platform.isElement == null ? void 0 : platform.isElement(offsetParent))) ? (await (platform.getScale == null ? void 0 : platform.getScale(offsetParent))) || {\n    x: 1,\n    y: 1\n  } : {\n    x: 1,\n    y: 1\n  };\n  const elementClientRect = rectToClientRect(platform.convertOffsetParentRelativeRectToViewportRelativeRect ? await platform.convertOffsetParentRelativeRectToViewportRelativeRect({\n    elements,\n    rect,\n    offsetParent,\n    strategy\n  }) : rect);\n  return {\n    top: (clippingClientRect.top - elementClientRect.top + paddingObject.top) / offsetScale.y,\n    bottom: (elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom) / offsetScale.y,\n    left: (clippingClientRect.left - elementClientRect.left + paddingObject.left) / offsetScale.x,\n    right: (elementClientRect.right - clippingClientRect.right + paddingObject.right) / offsetScale.x\n  };\n}\n\n/**\n * Provides data to position an inner element of the floating element so that it\n * appears centered to the reference element.\n * @see https://floating-ui.com/docs/arrow\n */\nconst arrow = options => ({\n  name: 'arrow',\n  options,\n  async fn(state) {\n    const {\n      x,\n      y,\n      placement,\n      rects,\n      platform,\n      elements,\n      middlewareData\n    } = state;\n    // Since `element` is required, we don't Partial<> the type.\n    const {\n      element,\n      padding = 0\n    } = evaluate(options, state) || {};\n    if (element == null) {\n      return {};\n    }\n    const paddingObject = getPaddingObject(padding);\n    const coords = {\n      x,\n      y\n    };\n    const axis = getAlignmentAxis(placement);\n    const length = getAxisLength(axis);\n    const arrowDimensions = await platform.getDimensions(element);\n    const isYAxis = axis === 'y';\n    const minProp = isYAxis ? 'top' : 'left';\n    const maxProp = isYAxis ? 'bottom' : 'right';\n    const clientProp = isYAxis ? 'clientHeight' : 'clientWidth';\n    const endDiff = rects.reference[length] + rects.reference[axis] - coords[axis] - rects.floating[length];\n    const startDiff = coords[axis] - rects.reference[axis];\n    const arrowOffsetParent = await (platform.getOffsetParent == null ? void 0 : platform.getOffsetParent(element));\n    let clientSize = arrowOffsetParent ? arrowOffsetParent[clientProp] : 0;\n\n    // DOM platform can return `window` as the `offsetParent`.\n    if (!clientSize || !(await (platform.isElement == null ? void 0 : platform.isElement(arrowOffsetParent)))) {\n      clientSize = elements.floating[clientProp] || rects.floating[length];\n    }\n    const centerToReference = endDiff / 2 - startDiff / 2;\n\n    // If the padding is large enough that it causes the arrow to no longer be\n    // centered, modify the padding so that it is centered.\n    const largestPossiblePadding = clientSize / 2 - arrowDimensions[length] / 2 - 1;\n    const minPadding = min(paddingObject[minProp], largestPossiblePadding);\n    const maxPadding = min(paddingObject[maxProp], largestPossiblePadding);\n\n    // Make sure the arrow doesn't overflow the floating element if the center\n    // point is outside the floating element's bounds.\n    const min$1 = minPadding;\n    const max = clientSize - arrowDimensions[length] - maxPadding;\n    const center = clientSize / 2 - arrowDimensions[length] / 2 + centerToReference;\n    const offset = clamp(min$1, center, max);\n\n    // If the reference is small enough that the arrow's padding causes it to\n    // to point to nothing for an aligned placement, adjust the offset of the\n    // floating element itself. To ensure `shift()` continues to take action,\n    // a single reset is performed when this is true.\n    const shouldAddOffset = !middlewareData.arrow && getAlignment(placement) != null && center !== offset && rects.reference[length] / 2 - (center < min$1 ? minPadding : maxPadding) - arrowDimensions[length] / 2 < 0;\n    const alignmentOffset = shouldAddOffset ? center < min$1 ? center - min$1 : center - max : 0;\n    return {\n      [axis]: coords[axis] + alignmentOffset,\n      data: {\n        [axis]: offset,\n        centerOffset: center - offset - alignmentOffset,\n        ...(shouldAddOffset && {\n          alignmentOffset\n        })\n      },\n      reset: shouldAddOffset\n    };\n  }\n});\n\nfunction getPlacementList(alignment, autoAlignment, allowedPlacements) {\n  const allowedPlacementsSortedByAlignment = alignment ? [...allowedPlacements.filter(placement => getAlignment(placement) === alignment), ...allowedPlacements.filter(placement => getAlignment(placement) !== alignment)] : allowedPlacements.filter(placement => getSide(placement) === placement);\n  return allowedPlacementsSortedByAlignment.filter(placement => {\n    if (alignment) {\n      return getAlignment(placement) === alignment || (autoAlignment ? getOppositeAlignmentPlacement(placement) !== placement : false);\n    }\n    return true;\n  });\n}\n/**\n * Optimizes the visibility of the floating element by choosing the placement\n * that has the most space available automatically, without needing to specify a\n * preferred placement. Alternative to `flip`.\n * @see https://floating-ui.com/docs/autoPlacement\n */\nconst autoPlacement = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'autoPlacement',\n    options,\n    async fn(state) {\n      var _middlewareData$autoP, _middlewareData$autoP2, _placementsThatFitOnE;\n      const {\n        rects,\n        middlewareData,\n        placement,\n        platform,\n        elements\n      } = state;\n      const {\n        crossAxis = false,\n        alignment,\n        allowedPlacements = placements,\n        autoAlignment = true,\n        ...detectOverflowOptions\n      } = evaluate(options, state);\n      const placements$1 = alignment !== undefined || allowedPlacements === placements ? getPlacementList(alignment || null, autoAlignment, allowedPlacements) : allowedPlacements;\n      const overflow = await detectOverflow(state, detectOverflowOptions);\n      const currentIndex = ((_middlewareData$autoP = middlewareData.autoPlacement) == null ? void 0 : _middlewareData$autoP.index) || 0;\n      const currentPlacement = placements$1[currentIndex];\n      if (currentPlacement == null) {\n        return {};\n      }\n      const alignmentSides = getAlignmentSides(currentPlacement, rects, await (platform.isRTL == null ? void 0 : platform.isRTL(elements.floating)));\n\n      // Make `computeCoords` start from the right place.\n      if (placement !== currentPlacement) {\n        return {\n          reset: {\n            placement: placements$1[0]\n          }\n        };\n      }\n      const currentOverflows = [overflow[getSide(currentPlacement)], overflow[alignmentSides[0]], overflow[alignmentSides[1]]];\n      const allOverflows = [...(((_middlewareData$autoP2 = middlewareData.autoPlacement) == null ? void 0 : _middlewareData$autoP2.overflows) || []), {\n        placement: currentPlacement,\n        overflows: currentOverflows\n      }];\n      const nextPlacement = placements$1[currentIndex + 1];\n\n      // There are more placements to check.\n      if (nextPlacement) {\n        return {\n          data: {\n            index: currentIndex + 1,\n            overflows: allOverflows\n          },\n          reset: {\n            placement: nextPlacement\n          }\n        };\n      }\n      const placementsSortedByMostSpace = allOverflows.map(d => {\n        const alignment = getAlignment(d.placement);\n        return [d.placement, alignment && crossAxis ?\n        // Check along the mainAxis and main crossAxis side.\n        d.overflows.slice(0, 2).reduce((acc, v) => acc + v, 0) :\n        // Check only the mainAxis.\n        d.overflows[0], d.overflows];\n      }).sort((a, b) => a[1] - b[1]);\n      const placementsThatFitOnEachSide = placementsSortedByMostSpace.filter(d => d[2].slice(0,\n      // Aligned placements should not check their opposite crossAxis\n      // side.\n      getAlignment(d[0]) ? 2 : 3).every(v => v <= 0));\n      const resetPlacement = ((_placementsThatFitOnE = placementsThatFitOnEachSide[0]) == null ? void 0 : _placementsThatFitOnE[0]) || placementsSortedByMostSpace[0][0];\n      if (resetPlacement !== placement) {\n        return {\n          data: {\n            index: currentIndex + 1,\n            overflows: allOverflows\n          },\n          reset: {\n            placement: resetPlacement\n          }\n        };\n      }\n      return {};\n    }\n  };\n};\n\n/**\n * Optimizes the visibility of the floating element by flipping the `placement`\n * in order to keep it in view when the preferred placement(s) will overflow the\n * clipping boundary. Alternative to `autoPlacement`.\n * @see https://floating-ui.com/docs/flip\n */\nconst flip = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'flip',\n    options,\n    async fn(state) {\n      var _middlewareData$arrow, _middlewareData$flip;\n      const {\n        placement,\n        middlewareData,\n        rects,\n        initialPlacement,\n        platform,\n        elements\n      } = state;\n      const {\n        mainAxis: checkMainAxis = true,\n        crossAxis: checkCrossAxis = true,\n        fallbackPlacements: specifiedFallbackPlacements,\n        fallbackStrategy = 'bestFit',\n        fallbackAxisSideDirection = 'none',\n        flipAlignment = true,\n        ...detectOverflowOptions\n      } = evaluate(options, state);\n\n      // If a reset by the arrow was caused due to an alignment offset being\n      // added, we should skip any logic now since `flip()` has already done its\n      // work.\n      // https://github.com/floating-ui/floating-ui/issues/2549#issuecomment-1719601643\n      if ((_middlewareData$arrow = middlewareData.arrow) != null && _middlewareData$arrow.alignmentOffset) {\n        return {};\n      }\n      const side = getSide(placement);\n      const initialSideAxis = getSideAxis(initialPlacement);\n      const isBasePlacement = getSide(initialPlacement) === initialPlacement;\n      const rtl = await (platform.isRTL == null ? void 0 : platform.isRTL(elements.floating));\n      const fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipAlignment ? [getOppositePlacement(initialPlacement)] : getExpandedPlacements(initialPlacement));\n      const hasFallbackAxisSideDirection = fallbackAxisSideDirection !== 'none';\n      if (!specifiedFallbackPlacements && hasFallbackAxisSideDirection) {\n        fallbackPlacements.push(...getOppositeAxisPlacements(initialPlacement, flipAlignment, fallbackAxisSideDirection, rtl));\n      }\n      const placements = [initialPlacement, ...fallbackPlacements];\n      const overflow = await detectOverflow(state, detectOverflowOptions);\n      const overflows = [];\n      let overflowsData = ((_middlewareData$flip = middlewareData.flip) == null ? void 0 : _middlewareData$flip.overflows) || [];\n      if (checkMainAxis) {\n        overflows.push(overflow[side]);\n      }\n      if (checkCrossAxis) {\n        const sides = getAlignmentSides(placement, rects, rtl);\n        overflows.push(overflow[sides[0]], overflow[sides[1]]);\n      }\n      overflowsData = [...overflowsData, {\n        placement,\n        overflows\n      }];\n\n      // One or more sides is overflowing.\n      if (!overflows.every(side => side <= 0)) {\n        var _middlewareData$flip2, _overflowsData$filter;\n        const nextIndex = (((_middlewareData$flip2 = middlewareData.flip) == null ? void 0 : _middlewareData$flip2.index) || 0) + 1;\n        const nextPlacement = placements[nextIndex];\n        if (nextPlacement) {\n          const ignoreCrossAxisOverflow = checkCrossAxis === 'alignment' ? initialSideAxis !== getSideAxis(nextPlacement) : false;\n          if (!ignoreCrossAxisOverflow ||\n          // We leave the current main axis only if every placement on that axis\n          // overflows the main axis.\n          overflowsData.every(d => getSideAxis(d.placement) === initialSideAxis ? d.overflows[0] > 0 : true)) {\n            // Try next placement and re-run the lifecycle.\n            return {\n              data: {\n                index: nextIndex,\n                overflows: overflowsData\n              },\n              reset: {\n                placement: nextPlacement\n              }\n            };\n          }\n        }\n\n        // First, find the candidates that fit on the mainAxis side of overflow,\n        // then find the placement that fits the best on the main crossAxis side.\n        let resetPlacement = (_overflowsData$filter = overflowsData.filter(d => d.overflows[0] <= 0).sort((a, b) => a.overflows[1] - b.overflows[1])[0]) == null ? void 0 : _overflowsData$filter.placement;\n\n        // Otherwise fallback.\n        if (!resetPlacement) {\n          switch (fallbackStrategy) {\n            case 'bestFit':\n              {\n                var _overflowsData$filter2;\n                const placement = (_overflowsData$filter2 = overflowsData.filter(d => {\n                  if (hasFallbackAxisSideDirection) {\n                    const currentSideAxis = getSideAxis(d.placement);\n                    return currentSideAxis === initialSideAxis ||\n                    // Create a bias to the `y` side axis due to horizontal\n                    // reading directions favoring greater width.\n                    currentSideAxis === 'y';\n                  }\n                  return true;\n                }).map(d => [d.placement, d.overflows.filter(overflow => overflow > 0).reduce((acc, overflow) => acc + overflow, 0)]).sort((a, b) => a[1] - b[1])[0]) == null ? void 0 : _overflowsData$filter2[0];\n                if (placement) {\n                  resetPlacement = placement;\n                }\n                break;\n              }\n            case 'initialPlacement':\n              resetPlacement = initialPlacement;\n              break;\n          }\n        }\n        if (placement !== resetPlacement) {\n          return {\n            reset: {\n              placement: resetPlacement\n            }\n          };\n        }\n      }\n      return {};\n    }\n  };\n};\n\nfunction getSideOffsets(overflow, rect) {\n  return {\n    top: overflow.top - rect.height,\n    right: overflow.right - rect.width,\n    bottom: overflow.bottom - rect.height,\n    left: overflow.left - rect.width\n  };\n}\nfunction isAnySideFullyClipped(overflow) {\n  return sides.some(side => overflow[side] >= 0);\n}\n/**\n * Provides data to hide the floating element in applicable situations, such as\n * when it is not in the same clipping context as the reference element.\n * @see https://floating-ui.com/docs/hide\n */\nconst hide = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'hide',\n    options,\n    async fn(state) {\n      const {\n        rects\n      } = state;\n      const {\n        strategy = 'referenceHidden',\n        ...detectOverflowOptions\n      } = evaluate(options, state);\n      switch (strategy) {\n        case 'referenceHidden':\n          {\n            const overflow = await detectOverflow(state, {\n              ...detectOverflowOptions,\n              elementContext: 'reference'\n            });\n            const offsets = getSideOffsets(overflow, rects.reference);\n            return {\n              data: {\n                referenceHiddenOffsets: offsets,\n                referenceHidden: isAnySideFullyClipped(offsets)\n              }\n            };\n          }\n        case 'escaped':\n          {\n            const overflow = await detectOverflow(state, {\n              ...detectOverflowOptions,\n              altBoundary: true\n            });\n            const offsets = getSideOffsets(overflow, rects.floating);\n            return {\n              data: {\n                escapedOffsets: offsets,\n                escaped: isAnySideFullyClipped(offsets)\n              }\n            };\n          }\n        default:\n          {\n            return {};\n          }\n      }\n    }\n  };\n};\n\nfunction getBoundingRect(rects) {\n  const minX = min(...rects.map(rect => rect.left));\n  const minY = min(...rects.map(rect => rect.top));\n  const maxX = max(...rects.map(rect => rect.right));\n  const maxY = max(...rects.map(rect => rect.bottom));\n  return {\n    x: minX,\n    y: minY,\n    width: maxX - minX,\n    height: maxY - minY\n  };\n}\nfunction getRectsByLine(rects) {\n  const sortedRects = rects.slice().sort((a, b) => a.y - b.y);\n  const groups = [];\n  let prevRect = null;\n  for (let i = 0; i < sortedRects.length; i++) {\n    const rect = sortedRects[i];\n    if (!prevRect || rect.y - prevRect.y > prevRect.height / 2) {\n      groups.push([rect]);\n    } else {\n      groups[groups.length - 1].push(rect);\n    }\n    prevRect = rect;\n  }\n  return groups.map(rect => rectToClientRect(getBoundingRect(rect)));\n}\n/**\n * Provides improved positioning for inline reference elements that can span\n * over multiple lines, such as hyperlinks or range selections.\n * @see https://floating-ui.com/docs/inline\n */\nconst inline = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'inline',\n    options,\n    async fn(state) {\n      const {\n        placement,\n        elements,\n        rects,\n        platform,\n        strategy\n      } = state;\n      // A MouseEvent's client{X,Y} coords can be up to 2 pixels off a\n      // ClientRect's bounds, despite the event listener being triggered. A\n      // padding of 2 seems to handle this issue.\n      const {\n        padding = 2,\n        x,\n        y\n      } = evaluate(options, state);\n      const nativeClientRects = Array.from((await (platform.getClientRects == null ? void 0 : platform.getClientRects(elements.reference))) || []);\n      const clientRects = getRectsByLine(nativeClientRects);\n      const fallback = rectToClientRect(getBoundingRect(nativeClientRects));\n      const paddingObject = getPaddingObject(padding);\n      function getBoundingClientRect() {\n        // There are two rects and they are disjoined.\n        if (clientRects.length === 2 && clientRects[0].left > clientRects[1].right && x != null && y != null) {\n          // Find the first rect in which the point is fully inside.\n          return clientRects.find(rect => x > rect.left - paddingObject.left && x < rect.right + paddingObject.right && y > rect.top - paddingObject.top && y < rect.bottom + paddingObject.bottom) || fallback;\n        }\n\n        // There are 2 or more connected rects.\n        if (clientRects.length >= 2) {\n          if (getSideAxis(placement) === 'y') {\n            const firstRect = clientRects[0];\n            const lastRect = clientRects[clientRects.length - 1];\n            const isTop = getSide(placement) === 'top';\n            const top = firstRect.top;\n            const bottom = lastRect.bottom;\n            const left = isTop ? firstRect.left : lastRect.left;\n            const right = isTop ? firstRect.right : lastRect.right;\n            const width = right - left;\n            const height = bottom - top;\n            return {\n              top,\n              bottom,\n              left,\n              right,\n              width,\n              height,\n              x: left,\n              y: top\n            };\n          }\n          const isLeftSide = getSide(placement) === 'left';\n          const maxRight = max(...clientRects.map(rect => rect.right));\n          const minLeft = min(...clientRects.map(rect => rect.left));\n          const measureRects = clientRects.filter(rect => isLeftSide ? rect.left === minLeft : rect.right === maxRight);\n          const top = measureRects[0].top;\n          const bottom = measureRects[measureRects.length - 1].bottom;\n          const left = minLeft;\n          const right = maxRight;\n          const width = right - left;\n          const height = bottom - top;\n          return {\n            top,\n            bottom,\n            left,\n            right,\n            width,\n            height,\n            x: left,\n            y: top\n          };\n        }\n        return fallback;\n      }\n      const resetRects = await platform.getElementRects({\n        reference: {\n          getBoundingClientRect\n        },\n        floating: elements.floating,\n        strategy\n      });\n      if (rects.reference.x !== resetRects.reference.x || rects.reference.y !== resetRects.reference.y || rects.reference.width !== resetRects.reference.width || rects.reference.height !== resetRects.reference.height) {\n        return {\n          reset: {\n            rects: resetRects\n          }\n        };\n      }\n      return {};\n    }\n  };\n};\n\nconst originSides = /*#__PURE__*/new Set(['left', 'top']);\n\n// For type backwards-compatibility, the `OffsetOptions` type was also\n// Derivable.\n\nasync function convertValueToCoords(state, options) {\n  const {\n    placement,\n    platform,\n    elements\n  } = state;\n  const rtl = await (platform.isRTL == null ? void 0 : platform.isRTL(elements.floating));\n  const side = getSide(placement);\n  const alignment = getAlignment(placement);\n  const isVertical = getSideAxis(placement) === 'y';\n  const mainAxisMulti = originSides.has(side) ? -1 : 1;\n  const crossAxisMulti = rtl && isVertical ? -1 : 1;\n  const rawValue = evaluate(options, state);\n\n  // eslint-disable-next-line prefer-const\n  let {\n    mainAxis,\n    crossAxis,\n    alignmentAxis\n  } = typeof rawValue === 'number' ? {\n    mainAxis: rawValue,\n    crossAxis: 0,\n    alignmentAxis: null\n  } : {\n    mainAxis: rawValue.mainAxis || 0,\n    crossAxis: rawValue.crossAxis || 0,\n    alignmentAxis: rawValue.alignmentAxis\n  };\n  if (alignment && typeof alignmentAxis === 'number') {\n    crossAxis = alignment === 'end' ? alignmentAxis * -1 : alignmentAxis;\n  }\n  return isVertical ? {\n    x: crossAxis * crossAxisMulti,\n    y: mainAxis * mainAxisMulti\n  } : {\n    x: mainAxis * mainAxisMulti,\n    y: crossAxis * crossAxisMulti\n  };\n}\n\n/**\n * Modifies the placement by translating the floating element along the\n * specified axes.\n * A number (shorthand for `mainAxis` or distance), or an axes configuration\n * object may be passed.\n * @see https://floating-ui.com/docs/offset\n */\nconst offset = function (options) {\n  if (options === void 0) {\n    options = 0;\n  }\n  return {\n    name: 'offset',\n    options,\n    async fn(state) {\n      var _middlewareData$offse, _middlewareData$arrow;\n      const {\n        x,\n        y,\n        placement,\n        middlewareData\n      } = state;\n      const diffCoords = await convertValueToCoords(state, options);\n\n      // If the placement is the same and the arrow caused an alignment offset\n      // then we don't need to change the positioning coordinates.\n      if (placement === ((_middlewareData$offse = middlewareData.offset) == null ? void 0 : _middlewareData$offse.placement) && (_middlewareData$arrow = middlewareData.arrow) != null && _middlewareData$arrow.alignmentOffset) {\n        return {};\n      }\n      return {\n        x: x + diffCoords.x,\n        y: y + diffCoords.y,\n        data: {\n          ...diffCoords,\n          placement\n        }\n      };\n    }\n  };\n};\n\n/**\n * Optimizes the visibility of the floating element by shifting it in order to\n * keep it in view when it will overflow the clipping boundary.\n * @see https://floating-ui.com/docs/shift\n */\nconst shift = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'shift',\n    options,\n    async fn(state) {\n      const {\n        x,\n        y,\n        placement\n      } = state;\n      const {\n        mainAxis: checkMainAxis = true,\n        crossAxis: checkCrossAxis = false,\n        limiter = {\n          fn: _ref => {\n            let {\n              x,\n              y\n            } = _ref;\n            return {\n              x,\n              y\n            };\n          }\n        },\n        ...detectOverflowOptions\n      } = evaluate(options, state);\n      const coords = {\n        x,\n        y\n      };\n      const overflow = await detectOverflow(state, detectOverflowOptions);\n      const crossAxis = getSideAxis(getSide(placement));\n      const mainAxis = getOppositeAxis(crossAxis);\n      let mainAxisCoord = coords[mainAxis];\n      let crossAxisCoord = coords[crossAxis];\n      if (checkMainAxis) {\n        const minSide = mainAxis === 'y' ? 'top' : 'left';\n        const maxSide = mainAxis === 'y' ? 'bottom' : 'right';\n        const min = mainAxisCoord + overflow[minSide];\n        const max = mainAxisCoord - overflow[maxSide];\n        mainAxisCoord = clamp(min, mainAxisCoord, max);\n      }\n      if (checkCrossAxis) {\n        const minSide = crossAxis === 'y' ? 'top' : 'left';\n        const maxSide = crossAxis === 'y' ? 'bottom' : 'right';\n        const min = crossAxisCoord + overflow[minSide];\n        const max = crossAxisCoord - overflow[maxSide];\n        crossAxisCoord = clamp(min, crossAxisCoord, max);\n      }\n      const limitedCoords = limiter.fn({\n        ...state,\n        [mainAxis]: mainAxisCoord,\n        [crossAxis]: crossAxisCoord\n      });\n      return {\n        ...limitedCoords,\n        data: {\n          x: limitedCoords.x - x,\n          y: limitedCoords.y - y,\n          enabled: {\n            [mainAxis]: checkMainAxis,\n            [crossAxis]: checkCrossAxis\n          }\n        }\n      };\n    }\n  };\n};\n/**\n * Built-in `limiter` that will stop `shift()` at a certain point.\n */\nconst limitShift = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    options,\n    fn(state) {\n      const {\n        x,\n        y,\n        placement,\n        rects,\n        middlewareData\n      } = state;\n      const {\n        offset = 0,\n        mainAxis: checkMainAxis = true,\n        crossAxis: checkCrossAxis = true\n      } = evaluate(options, state);\n      const coords = {\n        x,\n        y\n      };\n      const crossAxis = getSideAxis(placement);\n      const mainAxis = getOppositeAxis(crossAxis);\n      let mainAxisCoord = coords[mainAxis];\n      let crossAxisCoord = coords[crossAxis];\n      const rawOffset = evaluate(offset, state);\n      const computedOffset = typeof rawOffset === 'number' ? {\n        mainAxis: rawOffset,\n        crossAxis: 0\n      } : {\n        mainAxis: 0,\n        crossAxis: 0,\n        ...rawOffset\n      };\n      if (checkMainAxis) {\n        const len = mainAxis === 'y' ? 'height' : 'width';\n        const limitMin = rects.reference[mainAxis] - rects.floating[len] + computedOffset.mainAxis;\n        const limitMax = rects.reference[mainAxis] + rects.reference[len] - computedOffset.mainAxis;\n        if (mainAxisCoord < limitMin) {\n          mainAxisCoord = limitMin;\n        } else if (mainAxisCoord > limitMax) {\n          mainAxisCoord = limitMax;\n        }\n      }\n      if (checkCrossAxis) {\n        var _middlewareData$offse, _middlewareData$offse2;\n        const len = mainAxis === 'y' ? 'width' : 'height';\n        const isOriginSide = originSides.has(getSide(placement));\n        const limitMin = rects.reference[crossAxis] - rects.floating[len] + (isOriginSide ? ((_middlewareData$offse = middlewareData.offset) == null ? void 0 : _middlewareData$offse[crossAxis]) || 0 : 0) + (isOriginSide ? 0 : computedOffset.crossAxis);\n        const limitMax = rects.reference[crossAxis] + rects.reference[len] + (isOriginSide ? 0 : ((_middlewareData$offse2 = middlewareData.offset) == null ? void 0 : _middlewareData$offse2[crossAxis]) || 0) - (isOriginSide ? computedOffset.crossAxis : 0);\n        if (crossAxisCoord < limitMin) {\n          crossAxisCoord = limitMin;\n        } else if (crossAxisCoord > limitMax) {\n          crossAxisCoord = limitMax;\n        }\n      }\n      return {\n        [mainAxis]: mainAxisCoord,\n        [crossAxis]: crossAxisCoord\n      };\n    }\n  };\n};\n\n/**\n * Provides data that allows you to change the size of the floating element —\n * for instance, prevent it from overflowing the clipping boundary or match the\n * width of the reference element.\n * @see https://floating-ui.com/docs/size\n */\nconst size = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'size',\n    options,\n    async fn(state) {\n      var _state$middlewareData, _state$middlewareData2;\n      const {\n        placement,\n        rects,\n        platform,\n        elements\n      } = state;\n      const {\n        apply = () => {},\n        ...detectOverflowOptions\n      } = evaluate(options, state);\n      const overflow = await detectOverflow(state, detectOverflowOptions);\n      const side = getSide(placement);\n      const alignment = getAlignment(placement);\n      const isYAxis = getSideAxis(placement) === 'y';\n      const {\n        width,\n        height\n      } = rects.floating;\n      let heightSide;\n      let widthSide;\n      if (side === 'top' || side === 'bottom') {\n        heightSide = side;\n        widthSide = alignment === ((await (platform.isRTL == null ? void 0 : platform.isRTL(elements.floating))) ? 'start' : 'end') ? 'left' : 'right';\n      } else {\n        widthSide = side;\n        heightSide = alignment === 'end' ? 'top' : 'bottom';\n      }\n      const maximumClippingHeight = height - overflow.top - overflow.bottom;\n      const maximumClippingWidth = width - overflow.left - overflow.right;\n      const overflowAvailableHeight = min(height - overflow[heightSide], maximumClippingHeight);\n      const overflowAvailableWidth = min(width - overflow[widthSide], maximumClippingWidth);\n      const noShift = !state.middlewareData.shift;\n      let availableHeight = overflowAvailableHeight;\n      let availableWidth = overflowAvailableWidth;\n      if ((_state$middlewareData = state.middlewareData.shift) != null && _state$middlewareData.enabled.x) {\n        availableWidth = maximumClippingWidth;\n      }\n      if ((_state$middlewareData2 = state.middlewareData.shift) != null && _state$middlewareData2.enabled.y) {\n        availableHeight = maximumClippingHeight;\n      }\n      if (noShift && !alignment) {\n        const xMin = max(overflow.left, 0);\n        const xMax = max(overflow.right, 0);\n        const yMin = max(overflow.top, 0);\n        const yMax = max(overflow.bottom, 0);\n        if (isYAxis) {\n          availableWidth = width - 2 * (xMin !== 0 || xMax !== 0 ? xMin + xMax : max(overflow.left, overflow.right));\n        } else {\n          availableHeight = height - 2 * (yMin !== 0 || yMax !== 0 ? yMin + yMax : max(overflow.top, overflow.bottom));\n        }\n      }\n      await apply({\n        ...state,\n        availableWidth,\n        availableHeight\n      });\n      const nextDimensions = await platform.getDimensions(elements.floating);\n      if (width !== nextDimensions.width || height !== nextDimensions.height) {\n        return {\n          reset: {\n            rects: true\n          }\n        };\n      }\n      return {};\n    }\n  };\n};\n\nexport { arrow, autoPlacement, computePosition, detectOverflow, flip, hide, inline, limitShift, offset, shift, size };\n","function hasWindow() {\n  return typeof window !== 'undefined';\n}\nfunction getNodeName(node) {\n  if (isNode(node)) {\n    return (node.nodeName || '').toLowerCase();\n  }\n  // Mocked nodes in testing environments may not be instances of Node. By\n  // returning `#document` an infinite loop won't occur.\n  // https://github.com/floating-ui/floating-ui/issues/2317\n  return '#document';\n}\nfunction getWindow(node) {\n  var _node$ownerDocument;\n  return (node == null || (_node$ownerDocument = node.ownerDocument) == null ? void 0 : _node$ownerDocument.defaultView) || window;\n}\nfunction getDocumentElement(node) {\n  var _ref;\n  return (_ref = (isNode(node) ? node.ownerDocument : node.document) || window.document) == null ? void 0 : _ref.documentElement;\n}\nfunction isNode(value) {\n  if (!hasWindow()) {\n    return false;\n  }\n  return value instanceof Node || value instanceof getWindow(value).Node;\n}\nfunction isElement(value) {\n  if (!hasWindow()) {\n    return false;\n  }\n  return value instanceof Element || value instanceof getWindow(value).Element;\n}\nfunction isHTMLElement(value) {\n  if (!hasWindow()) {\n    return false;\n  }\n  return value instanceof HTMLElement || value instanceof getWindow(value).HTMLElement;\n}\nfunction isShadowRoot(value) {\n  if (!hasWindow() || typeof ShadowRoot === 'undefined') {\n    return false;\n  }\n  return value instanceof ShadowRoot || value instanceof getWindow(value).ShadowRoot;\n}\nconst invalidOverflowDisplayValues = /*#__PURE__*/new Set(['inline', 'contents']);\nfunction isOverflowElement(element) {\n  const {\n    overflow,\n    overflowX,\n    overflowY,\n    display\n  } = getComputedStyle(element);\n  return /auto|scroll|overlay|hidden|clip/.test(overflow + overflowY + overflowX) && !invalidOverflowDisplayValues.has(display);\n}\nconst tableElements = /*#__PURE__*/new Set(['table', 'td', 'th']);\nfunction isTableElement(element) {\n  return tableElements.has(getNodeName(element));\n}\nconst topLayerSelectors = [':popover-open', ':modal'];\nfunction isTopLayer(element) {\n  return topLayerSelectors.some(selector => {\n    try {\n      return element.matches(selector);\n    } catch (_e) {\n      return false;\n    }\n  });\n}\nconst transformProperties = ['transform', 'translate', 'scale', 'rotate', 'perspective'];\nconst willChangeValues = ['transform', 'translate', 'scale', 'rotate', 'perspective', 'filter'];\nconst containValues = ['paint', 'layout', 'strict', 'content'];\nfunction isContainingBlock(elementOrCss) {\n  const webkit = isWebKit();\n  const css = isElement(elementOrCss) ? getComputedStyle(elementOrCss) : elementOrCss;\n\n  // https://developer.mozilla.org/en-US/docs/Web/CSS/Containing_block#identifying_the_containing_block\n  // https://drafts.csswg.org/css-transforms-2/#individual-transforms\n  return transformProperties.some(value => css[value] ? css[value] !== 'none' : false) || (css.containerType ? css.containerType !== 'normal' : false) || !webkit && (css.backdropFilter ? css.backdropFilter !== 'none' : false) || !webkit && (css.filter ? css.filter !== 'none' : false) || willChangeValues.some(value => (css.willChange || '').includes(value)) || containValues.some(value => (css.contain || '').includes(value));\n}\nfunction getContainingBlock(element) {\n  let currentNode = getParentNode(element);\n  while (isHTMLElement(currentNode) && !isLastTraversableNode(currentNode)) {\n    if (isContainingBlock(currentNode)) {\n      return currentNode;\n    } else if (isTopLayer(currentNode)) {\n      return null;\n    }\n    currentNode = getParentNode(currentNode);\n  }\n  return null;\n}\nfunction isWebKit() {\n  if (typeof CSS === 'undefined' || !CSS.supports) return false;\n  return CSS.supports('-webkit-backdrop-filter', 'none');\n}\nconst lastTraversableNodeNames = /*#__PURE__*/new Set(['html', 'body', '#document']);\nfunction isLastTraversableNode(node) {\n  return lastTraversableNodeNames.has(getNodeName(node));\n}\nfunction getComputedStyle(element) {\n  return getWindow(element).getComputedStyle(element);\n}\nfunction getNodeScroll(element) {\n  if (isElement(element)) {\n    return {\n      scrollLeft: element.scrollLeft,\n      scrollTop: element.scrollTop\n    };\n  }\n  return {\n    scrollLeft: element.scrollX,\n    scrollTop: element.scrollY\n  };\n}\nfunction getParentNode(node) {\n  if (getNodeName(node) === 'html') {\n    return node;\n  }\n  const result =\n  // Step into the shadow DOM of the parent of a slotted node.\n  node.assignedSlot ||\n  // DOM Element detected.\n  node.parentNode ||\n  // ShadowRoot detected.\n  isShadowRoot(node) && node.host ||\n  // Fallback.\n  getDocumentElement(node);\n  return isShadowRoot(result) ? result.host : result;\n}\nfunction getNearestOverflowAncestor(node) {\n  const parentNode = getParentNode(node);\n  if (isLastTraversableNode(parentNode)) {\n    return node.ownerDocument ? node.ownerDocument.body : node.body;\n  }\n  if (isHTMLElement(parentNode) && isOverflowElement(parentNode)) {\n    return parentNode;\n  }\n  return getNearestOverflowAncestor(parentNode);\n}\nfunction getOverflowAncestors(node, list, traverseIframes) {\n  var _node$ownerDocument2;\n  if (list === void 0) {\n    list = [];\n  }\n  if (traverseIframes === void 0) {\n    traverseIframes = true;\n  }\n  const scrollableAncestor = getNearestOverflowAncestor(node);\n  const isBody = scrollableAncestor === ((_node$ownerDocument2 = node.ownerDocument) == null ? void 0 : _node$ownerDocument2.body);\n  const win = getWindow(scrollableAncestor);\n  if (isBody) {\n    const frameElement = getFrameElement(win);\n    return list.concat(win, win.visualViewport || [], isOverflowElement(scrollableAncestor) ? scrollableAncestor : [], frameElement && traverseIframes ? getOverflowAncestors(frameElement) : []);\n  }\n  return list.concat(scrollableAncestor, getOverflowAncestors(scrollableAncestor, [], traverseIframes));\n}\nfunction getFrameElement(win) {\n  return win.parent && Object.getPrototypeOf(win.parent) ? win.frameElement : null;\n}\n\nexport { getComputedStyle, getContainingBlock, getDocumentElement, getFrameElement, getNearestOverflowAncestor, getNodeName, getNodeScroll, getOverflowAncestors, getParentNode, getWindow, isContainingBlock, isElement, isHTMLElement, isLastTraversableNode, isNode, isOverflowElement, isShadowRoot, isTableElement, isTopLayer, isWebKit };\n","import { rectToClientRect, arrow as arrow$1, autoPlacement as autoPlacement$1, detectOverflow as detectOverflow$1, flip as flip$1, hide as hide$1, inline as inline$1, limitShift as limitShift$1, offset as offset$1, shift as shift$1, size as size$1, computePosition as computePosition$1 } from '@floating-ui/core';\nimport { round, createCoords, max, min, floor } from '@floating-ui/utils';\nimport { getComputedStyle, isHTMLElement, isElement, getWindow, isWebKit, getFrameElement, getNodeScroll, getDocumentElement, isTopLayer, getNodeName, isOverflowElement, getOverflowAncestors, getParentNode, isLastTraversableNode, isContainingBlock, isTableElement, getContainingBlock } from '@floating-ui/utils/dom';\nexport { getOverflowAncestors } from '@floating-ui/utils/dom';\n\nfunction getCssDimensions(element) {\n  const css = getComputedStyle(element);\n  // In testing environments, the `width` and `height` properties are empty\n  // strings for SVG elements, returning NaN. Fallback to `0` in this case.\n  let width = parseFloat(css.width) || 0;\n  let height = parseFloat(css.height) || 0;\n  const hasOffset = isHTMLElement(element);\n  const offsetWidth = hasOffset ? element.offsetWidth : width;\n  const offsetHeight = hasOffset ? element.offsetHeight : height;\n  const shouldFallback = round(width) !== offsetWidth || round(height) !== offsetHeight;\n  if (shouldFallback) {\n    width = offsetWidth;\n    height = offsetHeight;\n  }\n  return {\n    width,\n    height,\n    $: shouldFallback\n  };\n}\n\nfunction unwrapElement(element) {\n  return !isElement(element) ? element.contextElement : element;\n}\n\nfunction getScale(element) {\n  const domElement = unwrapElement(element);\n  if (!isHTMLElement(domElement)) {\n    return createCoords(1);\n  }\n  const rect = domElement.getBoundingClientRect();\n  const {\n    width,\n    height,\n    $\n  } = getCssDimensions(domElement);\n  let x = ($ ? round(rect.width) : rect.width) / width;\n  let y = ($ ? round(rect.height) : rect.height) / height;\n\n  // 0, NaN, or Infinity should always fallback to 1.\n\n  if (!x || !Number.isFinite(x)) {\n    x = 1;\n  }\n  if (!y || !Number.isFinite(y)) {\n    y = 1;\n  }\n  return {\n    x,\n    y\n  };\n}\n\nconst noOffsets = /*#__PURE__*/createCoords(0);\nfunction getVisualOffsets(element) {\n  const win = getWindow(element);\n  if (!isWebKit() || !win.visualViewport) {\n    return noOffsets;\n  }\n  return {\n    x: win.visualViewport.offsetLeft,\n    y: win.visualViewport.offsetTop\n  };\n}\nfunction shouldAddVisualOffsets(element, isFixed, floatingOffsetParent) {\n  if (isFixed === void 0) {\n    isFixed = false;\n  }\n  if (!floatingOffsetParent || isFixed && floatingOffsetParent !== getWindow(element)) {\n    return false;\n  }\n  return isFixed;\n}\n\nfunction getBoundingClientRect(element, includeScale, isFixedStrategy, offsetParent) {\n  if (includeScale === void 0) {\n    includeScale = false;\n  }\n  if (isFixedStrategy === void 0) {\n    isFixedStrategy = false;\n  }\n  const clientRect = element.getBoundingClientRect();\n  const domElement = unwrapElement(element);\n  let scale = createCoords(1);\n  if (includeScale) {\n    if (offsetParent) {\n      if (isElement(offsetParent)) {\n        scale = getScale(offsetParent);\n      }\n    } else {\n      scale = getScale(element);\n    }\n  }\n  const visualOffsets = shouldAddVisualOffsets(domElement, isFixedStrategy, offsetParent) ? getVisualOffsets(domElement) : createCoords(0);\n  let x = (clientRect.left + visualOffsets.x) / scale.x;\n  let y = (clientRect.top + visualOffsets.y) / scale.y;\n  let width = clientRect.width / scale.x;\n  let height = clientRect.height / scale.y;\n  if (domElement) {\n    const win = getWindow(domElement);\n    const offsetWin = offsetParent && isElement(offsetParent) ? getWindow(offsetParent) : offsetParent;\n    let currentWin = win;\n    let currentIFrame = getFrameElement(currentWin);\n    while (currentIFrame && offsetParent && offsetWin !== currentWin) {\n      const iframeScale = getScale(currentIFrame);\n      const iframeRect = currentIFrame.getBoundingClientRect();\n      const css = getComputedStyle(currentIFrame);\n      const left = iframeRect.left + (currentIFrame.clientLeft + parseFloat(css.paddingLeft)) * iframeScale.x;\n      const top = iframeRect.top + (currentIFrame.clientTop + parseFloat(css.paddingTop)) * iframeScale.y;\n      x *= iframeScale.x;\n      y *= iframeScale.y;\n      width *= iframeScale.x;\n      height *= iframeScale.y;\n      x += left;\n      y += top;\n      currentWin = getWindow(currentIFrame);\n      currentIFrame = getFrameElement(currentWin);\n    }\n  }\n  return rectToClientRect({\n    width,\n    height,\n    x,\n    y\n  });\n}\n\n// If <html> has a CSS width greater than the viewport, then this will be\n// incorrect for RTL.\nfunction getWindowScrollBarX(element, rect) {\n  const leftScroll = getNodeScroll(element).scrollLeft;\n  if (!rect) {\n    return getBoundingClientRect(getDocumentElement(element)).left + leftScroll;\n  }\n  return rect.left + leftScroll;\n}\n\nfunction getHTMLOffset(documentElement, scroll, ignoreScrollbarX) {\n  if (ignoreScrollbarX === void 0) {\n    ignoreScrollbarX = false;\n  }\n  const htmlRect = documentElement.getBoundingClientRect();\n  const x = htmlRect.left + scroll.scrollLeft - (ignoreScrollbarX ? 0 :\n  // RTL <body> scrollbar.\n  getWindowScrollBarX(documentElement, htmlRect));\n  const y = htmlRect.top + scroll.scrollTop;\n  return {\n    x,\n    y\n  };\n}\n\nfunction convertOffsetParentRelativeRectToViewportRelativeRect(_ref) {\n  let {\n    elements,\n    rect,\n    offsetParent,\n    strategy\n  } = _ref;\n  const isFixed = strategy === 'fixed';\n  const documentElement = getDocumentElement(offsetParent);\n  const topLayer = elements ? isTopLayer(elements.floating) : false;\n  if (offsetParent === documentElement || topLayer && isFixed) {\n    return rect;\n  }\n  let scroll = {\n    scrollLeft: 0,\n    scrollTop: 0\n  };\n  let scale = createCoords(1);\n  const offsets = createCoords(0);\n  const isOffsetParentAnElement = isHTMLElement(offsetParent);\n  if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {\n    if (getNodeName(offsetParent) !== 'body' || isOverflowElement(documentElement)) {\n      scroll = getNodeScroll(offsetParent);\n    }\n    if (isHTMLElement(offsetParent)) {\n      const offsetRect = getBoundingClientRect(offsetParent);\n      scale = getScale(offsetParent);\n      offsets.x = offsetRect.x + offsetParent.clientLeft;\n      offsets.y = offsetRect.y + offsetParent.clientTop;\n    }\n  }\n  const htmlOffset = documentElement && !isOffsetParentAnElement && !isFixed ? getHTMLOffset(documentElement, scroll, true) : createCoords(0);\n  return {\n    width: rect.width * scale.x,\n    height: rect.height * scale.y,\n    x: rect.x * scale.x - scroll.scrollLeft * scale.x + offsets.x + htmlOffset.x,\n    y: rect.y * scale.y - scroll.scrollTop * scale.y + offsets.y + htmlOffset.y\n  };\n}\n\nfunction getClientRects(element) {\n  return Array.from(element.getClientRects());\n}\n\n// Gets the entire size of the scrollable document area, even extending outside\n// of the `<html>` and `<body>` rect bounds if horizontally scrollable.\nfunction getDocumentRect(element) {\n  const html = getDocumentElement(element);\n  const scroll = getNodeScroll(element);\n  const body = element.ownerDocument.body;\n  const width = max(html.scrollWidth, html.clientWidth, body.scrollWidth, body.clientWidth);\n  const height = max(html.scrollHeight, html.clientHeight, body.scrollHeight, body.clientHeight);\n  let x = -scroll.scrollLeft + getWindowScrollBarX(element);\n  const y = -scroll.scrollTop;\n  if (getComputedStyle(body).direction === 'rtl') {\n    x += max(html.clientWidth, body.clientWidth) - width;\n  }\n  return {\n    width,\n    height,\n    x,\n    y\n  };\n}\n\nfunction getViewportRect(element, strategy) {\n  const win = getWindow(element);\n  const html = getDocumentElement(element);\n  const visualViewport = win.visualViewport;\n  let width = html.clientWidth;\n  let height = html.clientHeight;\n  let x = 0;\n  let y = 0;\n  if (visualViewport) {\n    width = visualViewport.width;\n    height = visualViewport.height;\n    const visualViewportBased = isWebKit();\n    if (!visualViewportBased || visualViewportBased && strategy === 'fixed') {\n      x = visualViewport.offsetLeft;\n      y = visualViewport.offsetTop;\n    }\n  }\n  return {\n    width,\n    height,\n    x,\n    y\n  };\n}\n\nconst absoluteOrFixed = /*#__PURE__*/new Set(['absolute', 'fixed']);\n// Returns the inner client rect, subtracting scrollbars if present.\nfunction getInnerBoundingClientRect(element, strategy) {\n  const clientRect = getBoundingClientRect(element, true, strategy === 'fixed');\n  const top = clientRect.top + element.clientTop;\n  const left = clientRect.left + element.clientLeft;\n  const scale = isHTMLElement(element) ? getScale(element) : createCoords(1);\n  const width = element.clientWidth * scale.x;\n  const height = element.clientHeight * scale.y;\n  const x = left * scale.x;\n  const y = top * scale.y;\n  return {\n    width,\n    height,\n    x,\n    y\n  };\n}\nfunction getClientRectFromClippingAncestor(element, clippingAncestor, strategy) {\n  let rect;\n  if (clippingAncestor === 'viewport') {\n    rect = getViewportRect(element, strategy);\n  } else if (clippingAncestor === 'document') {\n    rect = getDocumentRect(getDocumentElement(element));\n  } else if (isElement(clippingAncestor)) {\n    rect = getInnerBoundingClientRect(clippingAncestor, strategy);\n  } else {\n    const visualOffsets = getVisualOffsets(element);\n    rect = {\n      x: clippingAncestor.x - visualOffsets.x,\n      y: clippingAncestor.y - visualOffsets.y,\n      width: clippingAncestor.width,\n      height: clippingAncestor.height\n    };\n  }\n  return rectToClientRect(rect);\n}\nfunction hasFixedPositionAncestor(element, stopNode) {\n  const parentNode = getParentNode(element);\n  if (parentNode === stopNode || !isElement(parentNode) || isLastTraversableNode(parentNode)) {\n    return false;\n  }\n  return getComputedStyle(parentNode).position === 'fixed' || hasFixedPositionAncestor(parentNode, stopNode);\n}\n\n// A \"clipping ancestor\" is an `overflow` element with the characteristic of\n// clipping (or hiding) child elements. This returns all clipping ancestors\n// of the given element up the tree.\nfunction getClippingElementAncestors(element, cache) {\n  const cachedResult = cache.get(element);\n  if (cachedResult) {\n    return cachedResult;\n  }\n  let result = getOverflowAncestors(element, [], false).filter(el => isElement(el) && getNodeName(el) !== 'body');\n  let currentContainingBlockComputedStyle = null;\n  const elementIsFixed = getComputedStyle(element).position === 'fixed';\n  let currentNode = elementIsFixed ? getParentNode(element) : element;\n\n  // https://developer.mozilla.org/en-US/docs/Web/CSS/Containing_block#identifying_the_containing_block\n  while (isElement(currentNode) && !isLastTraversableNode(currentNode)) {\n    const computedStyle = getComputedStyle(currentNode);\n    const currentNodeIsContaining = isContainingBlock(currentNode);\n    if (!currentNodeIsContaining && computedStyle.position === 'fixed') {\n      currentContainingBlockComputedStyle = null;\n    }\n    const shouldDropCurrentNode = elementIsFixed ? !currentNodeIsContaining && !currentContainingBlockComputedStyle : !currentNodeIsContaining && computedStyle.position === 'static' && !!currentContainingBlockComputedStyle && absoluteOrFixed.has(currentContainingBlockComputedStyle.position) || isOverflowElement(currentNode) && !currentNodeIsContaining && hasFixedPositionAncestor(element, currentNode);\n    if (shouldDropCurrentNode) {\n      // Drop non-containing blocks.\n      result = result.filter(ancestor => ancestor !== currentNode);\n    } else {\n      // Record last containing block for next iteration.\n      currentContainingBlockComputedStyle = computedStyle;\n    }\n    currentNode = getParentNode(currentNode);\n  }\n  cache.set(element, result);\n  return result;\n}\n\n// Gets the maximum area that the element is visible in due to any number of\n// clipping ancestors.\nfunction getClippingRect(_ref) {\n  let {\n    element,\n    boundary,\n    rootBoundary,\n    strategy\n  } = _ref;\n  const elementClippingAncestors = boundary === 'clippingAncestors' ? isTopLayer(element) ? [] : getClippingElementAncestors(element, this._c) : [].concat(boundary);\n  const clippingAncestors = [...elementClippingAncestors, rootBoundary];\n  const firstClippingAncestor = clippingAncestors[0];\n  const clippingRect = clippingAncestors.reduce((accRect, clippingAncestor) => {\n    const rect = getClientRectFromClippingAncestor(element, clippingAncestor, strategy);\n    accRect.top = max(rect.top, accRect.top);\n    accRect.right = min(rect.right, accRect.right);\n    accRect.bottom = min(rect.bottom, accRect.bottom);\n    accRect.left = max(rect.left, accRect.left);\n    return accRect;\n  }, getClientRectFromClippingAncestor(element, firstClippingAncestor, strategy));\n  return {\n    width: clippingRect.right - clippingRect.left,\n    height: clippingRect.bottom - clippingRect.top,\n    x: clippingRect.left,\n    y: clippingRect.top\n  };\n}\n\nfunction getDimensions(element) {\n  const {\n    width,\n    height\n  } = getCssDimensions(element);\n  return {\n    width,\n    height\n  };\n}\n\nfunction getRectRelativeToOffsetParent(element, offsetParent, strategy) {\n  const isOffsetParentAnElement = isHTMLElement(offsetParent);\n  const documentElement = getDocumentElement(offsetParent);\n  const isFixed = strategy === 'fixed';\n  const rect = getBoundingClientRect(element, true, isFixed, offsetParent);\n  let scroll = {\n    scrollLeft: 0,\n    scrollTop: 0\n  };\n  const offsets = createCoords(0);\n\n  // If the <body> scrollbar appears on the left (e.g. RTL systems). Use\n  // Firefox with layout.scrollbar.side = 3 in about:config to test this.\n  function setLeftRTLScrollbarOffset() {\n    offsets.x = getWindowScrollBarX(documentElement);\n  }\n  if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {\n    if (getNodeName(offsetParent) !== 'body' || isOverflowElement(documentElement)) {\n      scroll = getNodeScroll(offsetParent);\n    }\n    if (isOffsetParentAnElement) {\n      const offsetRect = getBoundingClientRect(offsetParent, true, isFixed, offsetParent);\n      offsets.x = offsetRect.x + offsetParent.clientLeft;\n      offsets.y = offsetRect.y + offsetParent.clientTop;\n    } else if (documentElement) {\n      setLeftRTLScrollbarOffset();\n    }\n  }\n  if (isFixed && !isOffsetParentAnElement && documentElement) {\n    setLeftRTLScrollbarOffset();\n  }\n  const htmlOffset = documentElement && !isOffsetParentAnElement && !isFixed ? getHTMLOffset(documentElement, scroll) : createCoords(0);\n  const x = rect.left + scroll.scrollLeft - offsets.x - htmlOffset.x;\n  const y = rect.top + scroll.scrollTop - offsets.y - htmlOffset.y;\n  return {\n    x,\n    y,\n    width: rect.width,\n    height: rect.height\n  };\n}\n\nfunction isStaticPositioned(element) {\n  return getComputedStyle(element).position === 'static';\n}\n\nfunction getTrueOffsetParent(element, polyfill) {\n  if (!isHTMLElement(element) || getComputedStyle(element).position === 'fixed') {\n    return null;\n  }\n  if (polyfill) {\n    return polyfill(element);\n  }\n  let rawOffsetParent = element.offsetParent;\n\n  // Firefox returns the <html> element as the offsetParent if it's non-static,\n  // while Chrome and Safari return the <body> element. The <body> element must\n  // be used to perform the correct calculations even if the <html> element is\n  // non-static.\n  if (getDocumentElement(element) === rawOffsetParent) {\n    rawOffsetParent = rawOffsetParent.ownerDocument.body;\n  }\n  return rawOffsetParent;\n}\n\n// Gets the closest ancestor positioned element. Handles some edge cases,\n// such as table ancestors and cross browser bugs.\nfunction getOffsetParent(element, polyfill) {\n  const win = getWindow(element);\n  if (isTopLayer(element)) {\n    return win;\n  }\n  if (!isHTMLElement(element)) {\n    let svgOffsetParent = getParentNode(element);\n    while (svgOffsetParent && !isLastTraversableNode(svgOffsetParent)) {\n      if (isElement(svgOffsetParent) && !isStaticPositioned(svgOffsetParent)) {\n        return svgOffsetParent;\n      }\n      svgOffsetParent = getParentNode(svgOffsetParent);\n    }\n    return win;\n  }\n  let offsetParent = getTrueOffsetParent(element, polyfill);\n  while (offsetParent && isTableElement(offsetParent) && isStaticPositioned(offsetParent)) {\n    offsetParent = getTrueOffsetParent(offsetParent, polyfill);\n  }\n  if (offsetParent && isLastTraversableNode(offsetParent) && isStaticPositioned(offsetParent) && !isContainingBlock(offsetParent)) {\n    return win;\n  }\n  return offsetParent || getContainingBlock(element) || win;\n}\n\nconst getElementRects = async function (data) {\n  const getOffsetParentFn = this.getOffsetParent || getOffsetParent;\n  const getDimensionsFn = this.getDimensions;\n  const floatingDimensions = await getDimensionsFn(data.floating);\n  return {\n    reference: getRectRelativeToOffsetParent(data.reference, await getOffsetParentFn(data.floating), data.strategy),\n    floating: {\n      x: 0,\n      y: 0,\n      width: floatingDimensions.width,\n      height: floatingDimensions.height\n    }\n  };\n};\n\nfunction isRTL(element) {\n  return getComputedStyle(element).direction === 'rtl';\n}\n\nconst platform = {\n  convertOffsetParentRelativeRectToViewportRelativeRect,\n  getDocumentElement,\n  getClippingRect,\n  getOffsetParent,\n  getElementRects,\n  getClientRects,\n  getDimensions,\n  getScale,\n  isElement,\n  isRTL\n};\n\nfunction rectsAreEqual(a, b) {\n  return a.x === b.x && a.y === b.y && a.width === b.width && a.height === b.height;\n}\n\n// https://samthor.au/2021/observing-dom/\nfunction observeMove(element, onMove) {\n  let io = null;\n  let timeoutId;\n  const root = getDocumentElement(element);\n  function cleanup() {\n    var _io;\n    clearTimeout(timeoutId);\n    (_io = io) == null || _io.disconnect();\n    io = null;\n  }\n  function refresh(skip, threshold) {\n    if (skip === void 0) {\n      skip = false;\n    }\n    if (threshold === void 0) {\n      threshold = 1;\n    }\n    cleanup();\n    const elementRectForRootMargin = element.getBoundingClientRect();\n    const {\n      left,\n      top,\n      width,\n      height\n    } = elementRectForRootMargin;\n    if (!skip) {\n      onMove();\n    }\n    if (!width || !height) {\n      return;\n    }\n    const insetTop = floor(top);\n    const insetRight = floor(root.clientWidth - (left + width));\n    const insetBottom = floor(root.clientHeight - (top + height));\n    const insetLeft = floor(left);\n    const rootMargin = -insetTop + \"px \" + -insetRight + \"px \" + -insetBottom + \"px \" + -insetLeft + \"px\";\n    const options = {\n      rootMargin,\n      threshold: max(0, min(1, threshold)) || 1\n    };\n    let isFirstUpdate = true;\n    function handleObserve(entries) {\n      const ratio = entries[0].intersectionRatio;\n      if (ratio !== threshold) {\n        if (!isFirstUpdate) {\n          return refresh();\n        }\n        if (!ratio) {\n          // If the reference is clipped, the ratio is 0. Throttle the refresh\n          // to prevent an infinite loop of updates.\n          timeoutId = setTimeout(() => {\n            refresh(false, 1e-7);\n          }, 1000);\n        } else {\n          refresh(false, ratio);\n        }\n      }\n      if (ratio === 1 && !rectsAreEqual(elementRectForRootMargin, element.getBoundingClientRect())) {\n        // It's possible that even though the ratio is reported as 1, the\n        // element is not actually fully within the IntersectionObserver's root\n        // area anymore. This can happen under performance constraints. This may\n        // be a bug in the browser's IntersectionObserver implementation. To\n        // work around this, we compare the element's bounding rect now with\n        // what it was at the time we created the IntersectionObserver. If they\n        // are not equal then the element moved, so we refresh.\n        refresh();\n      }\n      isFirstUpdate = false;\n    }\n\n    // Older browsers don't support a `document` as the root and will throw an\n    // error.\n    try {\n      io = new IntersectionObserver(handleObserve, {\n        ...options,\n        // Handle <iframe>s\n        root: root.ownerDocument\n      });\n    } catch (_e) {\n      io = new IntersectionObserver(handleObserve, options);\n    }\n    io.observe(element);\n  }\n  refresh(true);\n  return cleanup;\n}\n\n/**\n * Automatically updates the position of the floating element when necessary.\n * Should only be called when the floating element is mounted on the DOM or\n * visible on the screen.\n * @returns cleanup function that should be invoked when the floating element is\n * removed from the DOM or hidden from the screen.\n * @see https://floating-ui.com/docs/autoUpdate\n */\nfunction autoUpdate(reference, floating, update, options) {\n  if (options === void 0) {\n    options = {};\n  }\n  const {\n    ancestorScroll = true,\n    ancestorResize = true,\n    elementResize = typeof ResizeObserver === 'function',\n    layoutShift = typeof IntersectionObserver === 'function',\n    animationFrame = false\n  } = options;\n  const referenceEl = unwrapElement(reference);\n  const ancestors = ancestorScroll || ancestorResize ? [...(referenceEl ? getOverflowAncestors(referenceEl) : []), ...getOverflowAncestors(floating)] : [];\n  ancestors.forEach(ancestor => {\n    ancestorScroll && ancestor.addEventListener('scroll', update, {\n      passive: true\n    });\n    ancestorResize && ancestor.addEventListener('resize', update);\n  });\n  const cleanupIo = referenceEl && layoutShift ? observeMove(referenceEl, update) : null;\n  let reobserveFrame = -1;\n  let resizeObserver = null;\n  if (elementResize) {\n    resizeObserver = new ResizeObserver(_ref => {\n      let [firstEntry] = _ref;\n      if (firstEntry && firstEntry.target === referenceEl && resizeObserver) {\n        // Prevent update loops when using the `size` middleware.\n        // https://github.com/floating-ui/floating-ui/issues/1740\n        resizeObserver.unobserve(floating);\n        cancelAnimationFrame(reobserveFrame);\n        reobserveFrame = requestAnimationFrame(() => {\n          var _resizeObserver;\n          (_resizeObserver = resizeObserver) == null || _resizeObserver.observe(floating);\n        });\n      }\n      update();\n    });\n    if (referenceEl && !animationFrame) {\n      resizeObserver.observe(referenceEl);\n    }\n    resizeObserver.observe(floating);\n  }\n  let frameId;\n  let prevRefRect = animationFrame ? getBoundingClientRect(reference) : null;\n  if (animationFrame) {\n    frameLoop();\n  }\n  function frameLoop() {\n    const nextRefRect = getBoundingClientRect(reference);\n    if (prevRefRect && !rectsAreEqual(prevRefRect, nextRefRect)) {\n      update();\n    }\n    prevRefRect = nextRefRect;\n    frameId = requestAnimationFrame(frameLoop);\n  }\n  update();\n  return () => {\n    var _resizeObserver2;\n    ancestors.forEach(ancestor => {\n      ancestorScroll && ancestor.removeEventListener('scroll', update);\n      ancestorResize && ancestor.removeEventListener('resize', update);\n    });\n    cleanupIo == null || cleanupIo();\n    (_resizeObserver2 = resizeObserver) == null || _resizeObserver2.disconnect();\n    resizeObserver = null;\n    if (animationFrame) {\n      cancelAnimationFrame(frameId);\n    }\n  };\n}\n\n/**\n * Resolves with an object of overflow side offsets that determine how much the\n * element is overflowing a given clipping boundary on each side.\n * - positive = overflowing the boundary by that number of pixels\n * - negative = how many pixels left before it will overflow\n * - 0 = lies flush with the boundary\n * @see https://floating-ui.com/docs/detectOverflow\n */\nconst detectOverflow = detectOverflow$1;\n\n/**\n * Modifies the placement by translating the floating element along the\n * specified axes.\n * A number (shorthand for `mainAxis` or distance), or an axes configuration\n * object may be passed.\n * @see https://floating-ui.com/docs/offset\n */\nconst offset = offset$1;\n\n/**\n * Optimizes the visibility of the floating element by choosing the placement\n * that has the most space available automatically, without needing to specify a\n * preferred placement. Alternative to `flip`.\n * @see https://floating-ui.com/docs/autoPlacement\n */\nconst autoPlacement = autoPlacement$1;\n\n/**\n * Optimizes the visibility of the floating element by shifting it in order to\n * keep it in view when it will overflow the clipping boundary.\n * @see https://floating-ui.com/docs/shift\n */\nconst shift = shift$1;\n\n/**\n * Optimizes the visibility of the floating element by flipping the `placement`\n * in order to keep it in view when the preferred placement(s) will overflow the\n * clipping boundary. Alternative to `autoPlacement`.\n * @see https://floating-ui.com/docs/flip\n */\nconst flip = flip$1;\n\n/**\n * Provides data that allows you to change the size of the floating element —\n * for instance, prevent it from overflowing the clipping boundary or match the\n * width of the reference element.\n * @see https://floating-ui.com/docs/size\n */\nconst size = size$1;\n\n/**\n * Provides data to hide the floating element in applicable situations, such as\n * when it is not in the same clipping context as the reference element.\n * @see https://floating-ui.com/docs/hide\n */\nconst hide = hide$1;\n\n/**\n * Provides data to position an inner element of the floating element so that it\n * appears centered to the reference element.\n * @see https://floating-ui.com/docs/arrow\n */\nconst arrow = arrow$1;\n\n/**\n * Provides improved positioning for inline reference elements that can span\n * over multiple lines, such as hyperlinks or range selections.\n * @see https://floating-ui.com/docs/inline\n */\nconst inline = inline$1;\n\n/**\n * Built-in `limiter` that will stop `shift()` at a certain point.\n */\nconst limitShift = limitShift$1;\n\n/**\n * Computes the `x` and `y` coordinates that will place the floating element\n * next to a given reference element.\n */\nconst computePosition = (reference, floating, options) => {\n  // This caches the expensive `getClippingElementAncestors` function so that\n  // multiple lifecycle resets re-use the same result. It only lives for a\n  // single call. If other functions become expensive, we can add them as well.\n  const cache = new Map();\n  const mergedOptions = {\n    platform,\n    ...options\n  };\n  const platformWithCache = {\n    ...mergedOptions.platform,\n    _c: cache\n  };\n  return computePosition$1(reference, floating, {\n    ...mergedOptions,\n    platform: platformWithCache\n  });\n};\n\nexport { arrow, autoPlacement, autoUpdate, computePosition, detectOverflow, flip, hide, inline, limitShift, offset, platform, shift, size };\n","import { computePosition, arrow as arrow$2, autoPlacement as autoPlacement$1, flip as flip$1, hide as hide$1, inline as inline$1, limitShift as limitShift$1, offset as offset$1, shift as shift$1, size as size$1 } from '@floating-ui/dom';\nexport { autoUpdate, computePosition, detectOverflow, getOverflowAncestors, platform } from '@floating-ui/dom';\nimport * as React from 'react';\nimport { useLayoutEffect } from 'react';\nimport * as ReactDOM from 'react-dom';\n\nvar isClient = typeof document !== 'undefined';\n\nvar noop = function noop() {};\nvar index = isClient ? useLayoutEffect : noop;\n\n// Fork of `fast-deep-equal` that only does the comparisons we need and compares\n// functions\nfunction deepEqual(a, b) {\n  if (a === b) {\n    return true;\n  }\n  if (typeof a !== typeof b) {\n    return false;\n  }\n  if (typeof a === 'function' && a.toString() === b.toString()) {\n    return true;\n  }\n  let length;\n  let i;\n  let keys;\n  if (a && b && typeof a === 'object') {\n    if (Array.isArray(a)) {\n      length = a.length;\n      if (length !== b.length) return false;\n      for (i = length; i-- !== 0;) {\n        if (!deepEqual(a[i], b[i])) {\n          return false;\n        }\n      }\n      return true;\n    }\n    keys = Object.keys(a);\n    length = keys.length;\n    if (length !== Object.keys(b).length) {\n      return false;\n    }\n    for (i = length; i-- !== 0;) {\n      if (!{}.hasOwnProperty.call(b, keys[i])) {\n        return false;\n      }\n    }\n    for (i = length; i-- !== 0;) {\n      const key = keys[i];\n      if (key === '_owner' && a.$$typeof) {\n        continue;\n      }\n      if (!deepEqual(a[key], b[key])) {\n        return false;\n      }\n    }\n    return true;\n  }\n  return a !== a && b !== b;\n}\n\nfunction getDPR(element) {\n  if (typeof window === 'undefined') {\n    return 1;\n  }\n  const win = element.ownerDocument.defaultView || window;\n  return win.devicePixelRatio || 1;\n}\n\nfunction roundByDPR(element, value) {\n  const dpr = getDPR(element);\n  return Math.round(value * dpr) / dpr;\n}\n\nfunction useLatestRef(value) {\n  const ref = React.useRef(value);\n  index(() => {\n    ref.current = value;\n  });\n  return ref;\n}\n\n/**\n * Provides data to position a floating element.\n * @see https://floating-ui.com/docs/useFloating\n */\nfunction useFloating(options) {\n  if (options === void 0) {\n    options = {};\n  }\n  const {\n    placement = 'bottom',\n    strategy = 'absolute',\n    middleware = [],\n    platform,\n    elements: {\n      reference: externalReference,\n      floating: externalFloating\n    } = {},\n    transform = true,\n    whileElementsMounted,\n    open\n  } = options;\n  const [data, setData] = React.useState({\n    x: 0,\n    y: 0,\n    strategy,\n    placement,\n    middlewareData: {},\n    isPositioned: false\n  });\n  const [latestMiddleware, setLatestMiddleware] = React.useState(middleware);\n  if (!deepEqual(latestMiddleware, middleware)) {\n    setLatestMiddleware(middleware);\n  }\n  const [_reference, _setReference] = React.useState(null);\n  const [_floating, _setFloating] = React.useState(null);\n  const setReference = React.useCallback(node => {\n    if (node !== referenceRef.current) {\n      referenceRef.current = node;\n      _setReference(node);\n    }\n  }, []);\n  const setFloating = React.useCallback(node => {\n    if (node !== floatingRef.current) {\n      floatingRef.current = node;\n      _setFloating(node);\n    }\n  }, []);\n  const referenceEl = externalReference || _reference;\n  const floatingEl = externalFloating || _floating;\n  const referenceRef = React.useRef(null);\n  const floatingRef = React.useRef(null);\n  const dataRef = React.useRef(data);\n  const hasWhileElementsMounted = whileElementsMounted != null;\n  const whileElementsMountedRef = useLatestRef(whileElementsMounted);\n  const platformRef = useLatestRef(platform);\n  const openRef = useLatestRef(open);\n  const update = React.useCallback(() => {\n    if (!referenceRef.current || !floatingRef.current) {\n      return;\n    }\n    const config = {\n      placement,\n      strategy,\n      middleware: latestMiddleware\n    };\n    if (platformRef.current) {\n      config.platform = platformRef.current;\n    }\n    computePosition(referenceRef.current, floatingRef.current, config).then(data => {\n      const fullData = {\n        ...data,\n        // The floating element's position may be recomputed while it's closed\n        // but still mounted (such as when transitioning out). To ensure\n        // `isPositioned` will be `false` initially on the next open, avoid\n        // setting it to `true` when `open === false` (must be specified).\n        isPositioned: openRef.current !== false\n      };\n      if (isMountedRef.current && !deepEqual(dataRef.current, fullData)) {\n        dataRef.current = fullData;\n        ReactDOM.flushSync(() => {\n          setData(fullData);\n        });\n      }\n    });\n  }, [latestMiddleware, placement, strategy, platformRef, openRef]);\n  index(() => {\n    if (open === false && dataRef.current.isPositioned) {\n      dataRef.current.isPositioned = false;\n      setData(data => ({\n        ...data,\n        isPositioned: false\n      }));\n    }\n  }, [open]);\n  const isMountedRef = React.useRef(false);\n  index(() => {\n    isMountedRef.current = true;\n    return () => {\n      isMountedRef.current = false;\n    };\n  }, []);\n  index(() => {\n    if (referenceEl) referenceRef.current = referenceEl;\n    if (floatingEl) floatingRef.current = floatingEl;\n    if (referenceEl && floatingEl) {\n      if (whileElementsMountedRef.current) {\n        return whileElementsMountedRef.current(referenceEl, floatingEl, update);\n      }\n      update();\n    }\n  }, [referenceEl, floatingEl, update, whileElementsMountedRef, hasWhileElementsMounted]);\n  const refs = React.useMemo(() => ({\n    reference: referenceRef,\n    floating: floatingRef,\n    setReference,\n    setFloating\n  }), [setReference, setFloating]);\n  const elements = React.useMemo(() => ({\n    reference: referenceEl,\n    floating: floatingEl\n  }), [referenceEl, floatingEl]);\n  const floatingStyles = React.useMemo(() => {\n    const initialStyles = {\n      position: strategy,\n      left: 0,\n      top: 0\n    };\n    if (!elements.floating) {\n      return initialStyles;\n    }\n    const x = roundByDPR(elements.floating, data.x);\n    const y = roundByDPR(elements.floating, data.y);\n    if (transform) {\n      return {\n        ...initialStyles,\n        transform: \"translate(\" + x + \"px, \" + y + \"px)\",\n        ...(getDPR(elements.floating) >= 1.5 && {\n          willChange: 'transform'\n        })\n      };\n    }\n    return {\n      position: strategy,\n      left: x,\n      top: y\n    };\n  }, [strategy, transform, elements.floating, data.x, data.y]);\n  return React.useMemo(() => ({\n    ...data,\n    update,\n    refs,\n    elements,\n    floatingStyles\n  }), [data, update, refs, elements, floatingStyles]);\n}\n\n/**\n * Provides data to position an inner element of the floating element so that it\n * appears centered to the reference element.\n * This wraps the core `arrow` middleware to allow React refs as the element.\n * @see https://floating-ui.com/docs/arrow\n */\nconst arrow$1 = options => {\n  function isRef(value) {\n    return {}.hasOwnProperty.call(value, 'current');\n  }\n  return {\n    name: 'arrow',\n    options,\n    fn(state) {\n      const {\n        element,\n        padding\n      } = typeof options === 'function' ? options(state) : options;\n      if (element && isRef(element)) {\n        if (element.current != null) {\n          return arrow$2({\n            element: element.current,\n            padding\n          }).fn(state);\n        }\n        return {};\n      }\n      if (element) {\n        return arrow$2({\n          element,\n          padding\n        }).fn(state);\n      }\n      return {};\n    }\n  };\n};\n\n/**\n * Modifies the placement by translating the floating element along the\n * specified axes.\n * A number (shorthand for `mainAxis` or distance), or an axes configuration\n * object may be passed.\n * @see https://floating-ui.com/docs/offset\n */\nconst offset = (options, deps) => ({\n  ...offset$1(options),\n  options: [options, deps]\n});\n\n/**\n * Optimizes the visibility of the floating element by shifting it in order to\n * keep it in view when it will overflow the clipping boundary.\n * @see https://floating-ui.com/docs/shift\n */\nconst shift = (options, deps) => ({\n  ...shift$1(options),\n  options: [options, deps]\n});\n\n/**\n * Built-in `limiter` that will stop `shift()` at a certain point.\n */\nconst limitShift = (options, deps) => ({\n  ...limitShift$1(options),\n  options: [options, deps]\n});\n\n/**\n * Optimizes the visibility of the floating element by flipping the `placement`\n * in order to keep it in view when the preferred placement(s) will overflow the\n * clipping boundary. Alternative to `autoPlacement`.\n * @see https://floating-ui.com/docs/flip\n */\nconst flip = (options, deps) => ({\n  ...flip$1(options),\n  options: [options, deps]\n});\n\n/**\n * Provides data that allows you to change the size of the floating element —\n * for instance, prevent it from overflowing the clipping boundary or match the\n * width of the reference element.\n * @see https://floating-ui.com/docs/size\n */\nconst size = (options, deps) => ({\n  ...size$1(options),\n  options: [options, deps]\n});\n\n/**\n * Optimizes the visibility of the floating element by choosing the placement\n * that has the most space available automatically, without needing to specify a\n * preferred placement. Alternative to `flip`.\n * @see https://floating-ui.com/docs/autoPlacement\n */\nconst autoPlacement = (options, deps) => ({\n  ...autoPlacement$1(options),\n  options: [options, deps]\n});\n\n/**\n * Provides data to hide the floating element in applicable situations, such as\n * when it is not in the same clipping context as the reference element.\n * @see https://floating-ui.com/docs/hide\n */\nconst hide = (options, deps) => ({\n  ...hide$1(options),\n  options: [options, deps]\n});\n\n/**\n * Provides improved positioning for inline reference elements that can span\n * over multiple lines, such as hyperlinks or range selections.\n * @see https://floating-ui.com/docs/inline\n */\nconst inline = (options, deps) => ({\n  ...inline$1(options),\n  options: [options, deps]\n});\n\n/**\n * Provides data to position an inner element of the floating element so that it\n * appears centered to the reference element.\n * This wraps the core `arrow` middleware to allow React refs as the element.\n * @see https://floating-ui.com/docs/arrow\n */\nconst arrow = (options, deps) => ({\n  ...arrow$1(options),\n  options: [options, deps]\n});\n\nexport { arrow, autoPlacement, flip, hide, inline, limitShift, offset, shift, size, useFloating };\n","// src/arrow.tsx\nimport * as React from \"react\";\nimport { Primitive } from \"@radix-ui/react-primitive\";\nimport { jsx } from \"react/jsx-runtime\";\nvar NAME = \"Arrow\";\nvar Arrow = React.forwardRef((props, forwardedRef) => {\n  const { children, width = 10, height = 5, ...arrowProps } = props;\n  return /* @__PURE__ */ jsx(\n    Primitive.svg,\n    {\n      ...arrowProps,\n      ref: forwardedRef,\n      width,\n      height,\n      viewBox: \"0 0 30 10\",\n      preserveAspectRatio: \"none\",\n      children: props.asChild ? children : /* @__PURE__ */ jsx(\"polygon\", { points: \"0,0 30,0 15,10\" })\n    }\n  );\n});\nArrow.displayName = NAME;\nvar Root = Arrow;\nexport {\n  Arrow,\n  Root\n};\n//# sourceMappingURL=index.mjs.map\n","import * as React from 'react';\nimport { composeEventHandlers } from '@radix-ui/primitive';\nimport { Primitive, dispatchDiscreteCustomEvent } from '@radix-ui/react-primitive';\nimport { useComposedRefs } from '@radix-ui/react-compose-refs';\nimport { useCallbackRef } from '@radix-ui/react-use-callback-ref';\nimport { useEscapeKeydown } from '@radix-ui/react-use-escape-keydown';\n\n/* -------------------------------------------------------------------------------------------------\n * DismissableLayer\n * -----------------------------------------------------------------------------------------------*/\n\nconst DISMISSABLE_LAYER_NAME = 'DismissableLayer';\nconst CONTEXT_UPDATE = 'dismissableLayer.update';\nconst POINTER_DOWN_OUTSIDE = 'dismissableLayer.pointerDownOutside';\nconst FOCUS_OUTSIDE = 'dismissableLayer.focusOutside';\n\nlet originalBodyPointerEvents: string;\n\nconst DismissableLayerContext = React.createContext({\n  layers: new Set<DismissableLayerElement>(),\n  layersWithOutsidePointerEventsDisabled: new Set<DismissableLayerElement>(),\n  branches: new Set<DismissableLayerBranchElement>(),\n});\n\ntype DismissableLayerElement = React.ComponentRef<typeof Primitive.div>;\ntype PrimitiveDivProps = React.ComponentPropsWithoutRef<typeof Primitive.div>;\ninterface DismissableLayerProps extends PrimitiveDivProps {\n  /**\n   * When `true`, hover/focus/click interactions will be disabled on elements outside\n   * the `DismissableLayer`. Users will need to click twice on outside elements to\n   * interact with them: once to close the `DismissableLayer`, and again to trigger the element.\n   */\n  disableOutsidePointerEvents?: boolean;\n  /**\n   * Event handler called when the escape key is down.\n   * Can be prevented.\n   */\n  onEscapeKeyDown?: (event: KeyboardEvent) => void;\n  /**\n   * Event handler called when the a `pointerdown` event happens outside of the `DismissableLayer`.\n   * Can be prevented.\n   */\n  onPointerDownOutside?: (event: PointerDownOutsideEvent) => void;\n  /**\n   * Event handler called when the focus moves outside of the `DismissableLayer`.\n   * Can be prevented.\n   */\n  onFocusOutside?: (event: FocusOutsideEvent) => void;\n  /**\n   * Event handler called when an interaction happens outside the `DismissableLayer`.\n   * Specifically, when a `pointerdown` event happens outside or focus moves outside of it.\n   * Can be prevented.\n   */\n  onInteractOutside?: (event: PointerDownOutsideEvent | FocusOutsideEvent) => void;\n  /**\n   * Handler called when the `DismissableLayer` should be dismissed\n   */\n  onDismiss?: () => void;\n}\n\nconst DismissableLayer = React.forwardRef<DismissableLayerElement, DismissableLayerProps>(\n  (props, forwardedRef) => {\n    const {\n      disableOutsidePointerEvents = false,\n      onEscapeKeyDown,\n      onPointerDownOutside,\n      onFocusOutside,\n      onInteractOutside,\n      onDismiss,\n      ...layerProps\n    } = props;\n    const context = React.useContext(DismissableLayerContext);\n    const [node, setNode] = React.useState<DismissableLayerElement | null>(null);\n    const ownerDocument = node?.ownerDocument ?? globalThis?.document;\n    const [, force] = React.useState({});\n    const composedRefs = useComposedRefs(forwardedRef, (node) => setNode(node));\n    const layers = Array.from(context.layers);\n    const [highestLayerWithOutsidePointerEventsDisabled] = [...context.layersWithOutsidePointerEventsDisabled].slice(-1); // prettier-ignore\n    const highestLayerWithOutsidePointerEventsDisabledIndex = layers.indexOf(highestLayerWithOutsidePointerEventsDisabled!); // prettier-ignore\n    const index = node ? layers.indexOf(node) : -1;\n    const isBodyPointerEventsDisabled = context.layersWithOutsidePointerEventsDisabled.size > 0;\n    const isPointerEventsEnabled = index >= highestLayerWithOutsidePointerEventsDisabledIndex;\n\n    const pointerDownOutside = usePointerDownOutside((event) => {\n      const target = event.target as HTMLElement;\n      const isPointerDownOnBranch = [...context.branches].some((branch) => branch.contains(target));\n      if (!isPointerEventsEnabled || isPointerDownOnBranch) return;\n      onPointerDownOutside?.(event);\n      onInteractOutside?.(event);\n      if (!event.defaultPrevented) onDismiss?.();\n    }, ownerDocument);\n\n    const focusOutside = useFocusOutside((event) => {\n      const target = event.target as HTMLElement;\n      const isFocusInBranch = [...context.branches].some((branch) => branch.contains(target));\n      if (isFocusInBranch) return;\n      onFocusOutside?.(event);\n      onInteractOutside?.(event);\n      if (!event.defaultPrevented) onDismiss?.();\n    }, ownerDocument);\n\n    useEscapeKeydown((event) => {\n      const isHighestLayer = index === context.layers.size - 1;\n      if (!isHighestLayer) return;\n      onEscapeKeyDown?.(event);\n      if (!event.defaultPrevented && onDismiss) {\n        event.preventDefault();\n        onDismiss();\n      }\n    }, ownerDocument);\n\n    React.useEffect(() => {\n      if (!node) return;\n      if (disableOutsidePointerEvents) {\n        if (context.layersWithOutsidePointerEventsDisabled.size === 0) {\n          originalBodyPointerEvents = ownerDocument.body.style.pointerEvents;\n          ownerDocument.body.style.pointerEvents = 'none';\n        }\n        context.layersWithOutsidePointerEventsDisabled.add(node);\n      }\n      context.layers.add(node);\n      dispatchUpdate();\n      return () => {\n        if (\n          disableOutsidePointerEvents &&\n          context.layersWithOutsidePointerEventsDisabled.size === 1\n        ) {\n          ownerDocument.body.style.pointerEvents = originalBodyPointerEvents;\n        }\n      };\n    }, [node, ownerDocument, disableOutsidePointerEvents, context]);\n\n    /**\n     * We purposefully prevent combining this effect with the `disableOutsidePointerEvents` effect\n     * because a change to `disableOutsidePointerEvents` would remove this layer from the stack\n     * and add it to the end again so the layering order wouldn't be _creation order_.\n     * We only want them to be removed from context stacks when unmounted.\n     */\n    React.useEffect(() => {\n      return () => {\n        if (!node) return;\n        context.layers.delete(node);\n        context.layersWithOutsidePointerEventsDisabled.delete(node);\n        dispatchUpdate();\n      };\n    }, [node, context]);\n\n    React.useEffect(() => {\n      const handleUpdate = () => force({});\n      document.addEventListener(CONTEXT_UPDATE, handleUpdate);\n      return () => document.removeEventListener(CONTEXT_UPDATE, handleUpdate);\n    }, []);\n\n    return (\n      <Primitive.div\n        {...layerProps}\n        ref={composedRefs}\n        style={{\n          pointerEvents: isBodyPointerEventsDisabled\n            ? isPointerEventsEnabled\n              ? 'auto'\n              : 'none'\n            : undefined,\n          ...props.style,\n        }}\n        onFocusCapture={composeEventHandlers(props.onFocusCapture, focusOutside.onFocusCapture)}\n        onBlurCapture={composeEventHandlers(props.onBlurCapture, focusOutside.onBlurCapture)}\n        onPointerDownCapture={composeEventHandlers(\n          props.onPointerDownCapture,\n          pointerDownOutside.onPointerDownCapture\n        )}\n      />\n    );\n  }\n);\n\nDismissableLayer.displayName = DISMISSABLE_LAYER_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * DismissableLayerBranch\n * -----------------------------------------------------------------------------------------------*/\n\nconst BRANCH_NAME = 'DismissableLayerBranch';\n\ntype DismissableLayerBranchElement = React.ComponentRef<typeof Primitive.div>;\ninterface DismissableLayerBranchProps extends PrimitiveDivProps {}\n\nconst DismissableLayerBranch = React.forwardRef<\n  DismissableLayerBranchElement,\n  DismissableLayerBranchProps\n>((props, forwardedRef) => {\n  const context = React.useContext(DismissableLayerContext);\n  const ref = React.useRef<DismissableLayerBranchElement>(null);\n  const composedRefs = useComposedRefs(forwardedRef, ref);\n\n  React.useEffect(() => {\n    const node = ref.current;\n    if (node) {\n      context.branches.add(node);\n      return () => {\n        context.branches.delete(node);\n      };\n    }\n  }, [context.branches]);\n\n  return <Primitive.div {...props} ref={composedRefs} />;\n});\n\nDismissableLayerBranch.displayName = BRANCH_NAME;\n\n/* -----------------------------------------------------------------------------------------------*/\n\ntype PointerDownOutsideEvent = CustomEvent<{ originalEvent: PointerEvent }>;\ntype FocusOutsideEvent = CustomEvent<{ originalEvent: FocusEvent }>;\n\n/**\n * Listens for `pointerdown` outside a react subtree. We use `pointerdown` rather than `pointerup`\n * to mimic layer dismissing behaviour present in OS.\n * Returns props to pass to the node we want to check for outside events.\n */\nfunction usePointerDownOutside(\n  onPointerDownOutside?: (event: PointerDownOutsideEvent) => void,\n  ownerDocument: Document = globalThis?.document\n) {\n  const handlePointerDownOutside = useCallbackRef(onPointerDownOutside) as EventListener;\n  const isPointerInsideReactTreeRef = React.useRef(false);\n  const handleClickRef = React.useRef(() => {});\n\n  React.useEffect(() => {\n    const handlePointerDown = (event: PointerEvent) => {\n      if (event.target && !isPointerInsideReactTreeRef.current) {\n        const eventDetail = { originalEvent: event };\n\n        function handleAndDispatchPointerDownOutsideEvent() {\n          handleAndDispatchCustomEvent(\n            POINTER_DOWN_OUTSIDE,\n            handlePointerDownOutside,\n            eventDetail,\n            { discrete: true }\n          );\n        }\n\n        /**\n         * On touch devices, we need to wait for a click event because browsers implement\n         * a ~350ms delay between the time the user stops touching the display and when the\n         * browser executres events. We need to ensure we don't reactivate pointer-events within\n         * this timeframe otherwise the browser may execute events that should have been prevented.\n         *\n         * Additionally, this also lets us deal automatically with cancellations when a click event\n         * isn't raised because the page was considered scrolled/drag-scrolled, long-pressed, etc.\n         *\n         * This is why we also continuously remove the previous listener, because we cannot be\n         * certain that it was raised, and therefore cleaned-up.\n         */\n        if (event.pointerType === 'touch') {\n          ownerDocument.removeEventListener('click', handleClickRef.current);\n          handleClickRef.current = handleAndDispatchPointerDownOutsideEvent;\n          ownerDocument.addEventListener('click', handleClickRef.current, { once: true });\n        } else {\n          handleAndDispatchPointerDownOutsideEvent();\n        }\n      } else {\n        // We need to remove the event listener in case the outside click has been canceled.\n        // See: https://github.com/radix-ui/primitives/issues/2171\n        ownerDocument.removeEventListener('click', handleClickRef.current);\n      }\n      isPointerInsideReactTreeRef.current = false;\n    };\n    /**\n     * if this hook executes in a component that mounts via a `pointerdown` event, the event\n     * would bubble up to the document and trigger a `pointerDownOutside` event. We avoid\n     * this by delaying the event listener registration on the document.\n     * This is not React specific, but rather how the DOM works, ie:\n     * ```\n     * button.addEventListener('pointerdown', () => {\n     *   console.log('I will log');\n     *   document.addEventListener('pointerdown', () => {\n     *     console.log('I will also log');\n     *   })\n     * });\n     */\n    const timerId = window.setTimeout(() => {\n      ownerDocument.addEventListener('pointerdown', handlePointerDown);\n    }, 0);\n    return () => {\n      window.clearTimeout(timerId);\n      ownerDocument.removeEventListener('pointerdown', handlePointerDown);\n      ownerDocument.removeEventListener('click', handleClickRef.current);\n    };\n  }, [ownerDocument, handlePointerDownOutside]);\n\n  return {\n    // ensures we check React component tree (not just DOM tree)\n    onPointerDownCapture: () => (isPointerInsideReactTreeRef.current = true),\n  };\n}\n\n/**\n * Listens for when focus happens outside a react subtree.\n * Returns props to pass to the root (node) of the subtree we want to check.\n */\nfunction useFocusOutside(\n  onFocusOutside?: (event: FocusOutsideEvent) => void,\n  ownerDocument: Document = globalThis?.document\n) {\n  const handleFocusOutside = useCallbackRef(onFocusOutside) as EventListener;\n  const isFocusInsideReactTreeRef = React.useRef(false);\n\n  React.useEffect(() => {\n    const handleFocus = (event: FocusEvent) => {\n      if (event.target && !isFocusInsideReactTreeRef.current) {\n        const eventDetail = { originalEvent: event };\n        handleAndDispatchCustomEvent(FOCUS_OUTSIDE, handleFocusOutside, eventDetail, {\n          discrete: false,\n        });\n      }\n    };\n    ownerDocument.addEventListener('focusin', handleFocus);\n    return () => ownerDocument.removeEventListener('focusin', handleFocus);\n  }, [ownerDocument, handleFocusOutside]);\n\n  return {\n    onFocusCapture: () => (isFocusInsideReactTreeRef.current = true),\n    onBlurCapture: () => (isFocusInsideReactTreeRef.current = false),\n  };\n}\n\nfunction dispatchUpdate() {\n  const event = new CustomEvent(CONTEXT_UPDATE);\n  document.dispatchEvent(event);\n}\n\nfunction handleAndDispatchCustomEvent<E extends CustomEvent, OriginalEvent extends Event>(\n  name: string,\n  handler: ((event: E) => void) | undefined,\n  detail: { originalEvent: OriginalEvent } & (E extends CustomEvent<infer D> ? D : never),\n  { discrete }: { discrete: boolean }\n) {\n  const target = detail.originalEvent.target;\n  const event = new CustomEvent(name, { bubbles: false, cancelable: true, detail });\n  if (handler) target.addEventListener(name, handler as EventListener, { once: true });\n\n  if (discrete) {\n    dispatchDiscreteCustomEvent(target, event);\n  } else {\n    target.dispatchEvent(event);\n  }\n}\n\nconst Root = DismissableLayer;\nconst Branch = DismissableLayerBranch;\n\nexport {\n  DismissableLayer,\n  DismissableLayerBranch,\n  //\n  Root,\n  Branch,\n};\nexport type { DismissableLayerProps };\n","import * as React from 'react';\n\n/** Number of components which have requested interest to have focus guards */\nlet count = 0;\n\nfunction FocusGuards(props: any) {\n  useFocusGuards();\n  return props.children;\n}\n\n/**\n * Injects a pair of focus guards at the edges of the whole DOM tree\n * to ensure `focusin` & `focusout` events can be caught consistently.\n */\nfunction useFocusGuards() {\n  React.useEffect(() => {\n    const edgeGuards = document.querySelectorAll('[data-radix-focus-guard]');\n    document.body.insertAdjacentElement('afterbegin', edgeGuards[0] ?? createFocusGuard());\n    document.body.insertAdjacentElement('beforeend', edgeGuards[1] ?? createFocusGuard());\n    count++;\n\n    return () => {\n      if (count === 1) {\n        document.querySelectorAll('[data-radix-focus-guard]').forEach((node) => node.remove());\n      }\n      count--;\n    };\n  }, []);\n}\n\nfunction createFocusGuard() {\n  const element = document.createElement('span');\n  element.setAttribute('data-radix-focus-guard', '');\n  element.tabIndex = 0;\n  element.style.outline = 'none';\n  element.style.opacity = '0';\n  element.style.position = 'fixed';\n  element.style.pointerEvents = 'none';\n  return element;\n}\n\nconst Root = FocusGuards;\n\nexport {\n  FocusGuards,\n  //\n  Root,\n  //\n  useFocusGuards,\n};\n","import * as React from 'react';\nimport {\n  useFloating,\n  autoUpdate,\n  offset,\n  shift,\n  limitShift,\n  hide,\n  arrow as floatingUIarrow,\n  flip,\n  size,\n} from '@floating-ui/react-dom';\nimport * as ArrowPrimitive from '@radix-ui/react-arrow';\nimport { useComposedRefs } from '@radix-ui/react-compose-refs';\nimport { createContextScope } from '@radix-ui/react-context';\nimport { Primitive } from '@radix-ui/react-primitive';\nimport { useCallbackRef } from '@radix-ui/react-use-callback-ref';\nimport { useLayoutEffect } from '@radix-ui/react-use-layout-effect';\nimport { useSize } from '@radix-ui/react-use-size';\n\nimport type { Placement, Middleware } from '@floating-ui/react-dom';\nimport type { Scope } from '@radix-ui/react-context';\nimport type { Measurable } from '@radix-ui/rect';\n\nconst SIDE_OPTIONS = ['top', 'right', 'bottom', 'left'] as const;\nconst ALIGN_OPTIONS = ['start', 'center', 'end'] as const;\n\ntype Side = (typeof SIDE_OPTIONS)[number];\ntype Align = (typeof ALIGN_OPTIONS)[number];\n\n/* -------------------------------------------------------------------------------------------------\n * Popper\n * -----------------------------------------------------------------------------------------------*/\n\nconst POPPER_NAME = 'Popper';\n\ntype ScopedProps<P> = P & { __scopePopper?: Scope };\nconst [createPopperContext, createPopperScope] = createContextScope(POPPER_NAME);\n\ntype PopperContextValue = {\n  anchor: Measurable | null;\n  onAnchorChange(anchor: Measurable | null): void;\n};\nconst [PopperProvider, usePopperContext] = createPopperContext<PopperContextValue>(POPPER_NAME);\n\ninterface PopperProps {\n  children?: React.ReactNode;\n}\nconst Popper: React.FC<PopperProps> = (props: ScopedProps<PopperProps>) => {\n  const { __scopePopper, children } = props;\n  const [anchor, setAnchor] = React.useState<Measurable | null>(null);\n  return (\n    <PopperProvider scope={__scopePopper} anchor={anchor} onAnchorChange={setAnchor}>\n      {children}\n    </PopperProvider>\n  );\n};\n\nPopper.displayName = POPPER_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * PopperAnchor\n * -----------------------------------------------------------------------------------------------*/\n\nconst ANCHOR_NAME = 'PopperAnchor';\n\ntype PopperAnchorElement = React.ComponentRef<typeof Primitive.div>;\ntype PrimitiveDivProps = React.ComponentPropsWithoutRef<typeof Primitive.div>;\ninterface PopperAnchorProps extends PrimitiveDivProps {\n  virtualRef?: React.RefObject<Measurable>;\n}\n\nconst PopperAnchor = React.forwardRef<PopperAnchorElement, PopperAnchorProps>(\n  (props: ScopedProps<PopperAnchorProps>, forwardedRef) => {\n    const { __scopePopper, virtualRef, ...anchorProps } = props;\n    const context = usePopperContext(ANCHOR_NAME, __scopePopper);\n    const ref = React.useRef<PopperAnchorElement>(null);\n    const composedRefs = useComposedRefs(forwardedRef, ref);\n\n    React.useEffect(() => {\n      // Consumer can anchor the popper to something that isn't\n      // a DOM node e.g. pointer position, so we override the\n      // `anchorRef` with their virtual ref in this case.\n      context.onAnchorChange(virtualRef?.current || ref.current);\n    });\n\n    return virtualRef ? null : <Primitive.div {...anchorProps} ref={composedRefs} />;\n  }\n);\n\nPopperAnchor.displayName = ANCHOR_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * PopperContent\n * -----------------------------------------------------------------------------------------------*/\n\nconst CONTENT_NAME = 'PopperContent';\n\ntype PopperContentContextValue = {\n  placedSide: Side;\n  onArrowChange(arrow: HTMLSpanElement | null): void;\n  arrowX?: number;\n  arrowY?: number;\n  shouldHideArrow: boolean;\n};\n\nconst [PopperContentProvider, useContentContext] =\n  createPopperContext<PopperContentContextValue>(CONTENT_NAME);\n\ntype Boundary = Element | null;\n\ntype PopperContentElement = React.ComponentRef<typeof Primitive.div>;\ninterface PopperContentProps extends PrimitiveDivProps {\n  side?: Side;\n  sideOffset?: number;\n  align?: Align;\n  alignOffset?: number;\n  arrowPadding?: number;\n  avoidCollisions?: boolean;\n  collisionBoundary?: Boundary | Boundary[];\n  collisionPadding?: number | Partial<Record<Side, number>>;\n  sticky?: 'partial' | 'always';\n  hideWhenDetached?: boolean;\n  updatePositionStrategy?: 'optimized' | 'always';\n  onPlaced?: () => void;\n}\n\nconst PopperContent = React.forwardRef<PopperContentElement, PopperContentProps>(\n  (props: ScopedProps<PopperContentProps>, forwardedRef) => {\n    const {\n      __scopePopper,\n      side = 'bottom',\n      sideOffset = 0,\n      align = 'center',\n      alignOffset = 0,\n      arrowPadding = 0,\n      avoidCollisions = true,\n      collisionBoundary = [],\n      collisionPadding: collisionPaddingProp = 0,\n      sticky = 'partial',\n      hideWhenDetached = false,\n      updatePositionStrategy = 'optimized',\n      onPlaced,\n      ...contentProps\n    } = props;\n\n    const context = usePopperContext(CONTENT_NAME, __scopePopper);\n\n    const [content, setContent] = React.useState<HTMLDivElement | null>(null);\n    const composedRefs = useComposedRefs(forwardedRef, (node) => setContent(node));\n\n    const [arrow, setArrow] = React.useState<HTMLSpanElement | null>(null);\n    const arrowSize = useSize(arrow);\n    const arrowWidth = arrowSize?.width ?? 0;\n    const arrowHeight = arrowSize?.height ?? 0;\n\n    const desiredPlacement = (side + (align !== 'center' ? '-' + align : '')) as Placement;\n\n    const collisionPadding =\n      typeof collisionPaddingProp === 'number'\n        ? collisionPaddingProp\n        : { top: 0, right: 0, bottom: 0, left: 0, ...collisionPaddingProp };\n\n    const boundary = Array.isArray(collisionBoundary) ? collisionBoundary : [collisionBoundary];\n    const hasExplicitBoundaries = boundary.length > 0;\n\n    const detectOverflowOptions = {\n      padding: collisionPadding,\n      boundary: boundary.filter(isNotNull),\n      // with `strategy: 'fixed'`, this is the only way to get it to respect boundaries\n      altBoundary: hasExplicitBoundaries,\n    };\n\n    const { refs, floatingStyles, placement, isPositioned, middlewareData } = useFloating({\n      // default to `fixed` strategy so users don't have to pick and we also avoid focus scroll issues\n      strategy: 'fixed',\n      placement: desiredPlacement,\n      whileElementsMounted: (...args) => {\n        const cleanup = autoUpdate(...args, {\n          animationFrame: updatePositionStrategy === 'always',\n        });\n        return cleanup;\n      },\n      elements: {\n        reference: context.anchor,\n      },\n      middleware: [\n        offset({ mainAxis: sideOffset + arrowHeight, alignmentAxis: alignOffset }),\n        avoidCollisions &&\n          shift({\n            mainAxis: true,\n            crossAxis: false,\n            limiter: sticky === 'partial' ? limitShift() : undefined,\n            ...detectOverflowOptions,\n          }),\n        avoidCollisions && flip({ ...detectOverflowOptions }),\n        size({\n          ...detectOverflowOptions,\n          apply: ({ elements, rects, availableWidth, availableHeight }) => {\n            const { width: anchorWidth, height: anchorHeight } = rects.reference;\n            const contentStyle = elements.floating.style;\n            contentStyle.setProperty('--radix-popper-available-width', `${availableWidth}px`);\n            contentStyle.setProperty('--radix-popper-available-height', `${availableHeight}px`);\n            contentStyle.setProperty('--radix-popper-anchor-width', `${anchorWidth}px`);\n            contentStyle.setProperty('--radix-popper-anchor-height', `${anchorHeight}px`);\n          },\n        }),\n        arrow && floatingUIarrow({ element: arrow, padding: arrowPadding }),\n        transformOrigin({ arrowWidth, arrowHeight }),\n        hideWhenDetached && hide({ strategy: 'referenceHidden', ...detectOverflowOptions }),\n      ],\n    });\n\n    const [placedSide, placedAlign] = getSideAndAlignFromPlacement(placement);\n\n    const handlePlaced = useCallbackRef(onPlaced);\n    useLayoutEffect(() => {\n      if (isPositioned) {\n        handlePlaced?.();\n      }\n    }, [isPositioned, handlePlaced]);\n\n    const arrowX = middlewareData.arrow?.x;\n    const arrowY = middlewareData.arrow?.y;\n    const cannotCenterArrow = middlewareData.arrow?.centerOffset !== 0;\n\n    const [contentZIndex, setContentZIndex] = React.useState<string>();\n    useLayoutEffect(() => {\n      if (content) setContentZIndex(window.getComputedStyle(content).zIndex);\n    }, [content]);\n\n    return (\n      <div\n        ref={refs.setFloating}\n        data-radix-popper-content-wrapper=\"\"\n        style={{\n          ...floatingStyles,\n          transform: isPositioned ? floatingStyles.transform : 'translate(0, -200%)', // keep off the page when measuring\n          minWidth: 'max-content',\n          zIndex: contentZIndex,\n          ['--radix-popper-transform-origin' as any]: [\n            middlewareData.transformOrigin?.x,\n            middlewareData.transformOrigin?.y,\n          ].join(' '),\n\n          // hide the content if using the hide middleware and should be hidden\n          // set visibility to hidden and disable pointer events so the UI behaves\n          // as if the PopperContent isn't there at all\n          ...(middlewareData.hide?.referenceHidden && {\n            visibility: 'hidden',\n            pointerEvents: 'none',\n          }),\n        }}\n        // Floating UI interally calculates logical alignment based the `dir` attribute on\n        // the reference/floating node, we must add this attribute here to ensure\n        // this is calculated when portalled as well as inline.\n        dir={props.dir}\n      >\n        <PopperContentProvider\n          scope={__scopePopper}\n          placedSide={placedSide}\n          onArrowChange={setArrow}\n          arrowX={arrowX}\n          arrowY={arrowY}\n          shouldHideArrow={cannotCenterArrow}\n        >\n          <Primitive.div\n            data-side={placedSide}\n            data-align={placedAlign}\n            {...contentProps}\n            ref={composedRefs}\n            style={{\n              ...contentProps.style,\n              // if the PopperContent hasn't been placed yet (not all measurements done)\n              // we prevent animations so that users's animation don't kick in too early referring wrong sides\n              animation: !isPositioned ? 'none' : undefined,\n            }}\n          />\n        </PopperContentProvider>\n      </div>\n    );\n  }\n);\n\nPopperContent.displayName = CONTENT_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * PopperArrow\n * -----------------------------------------------------------------------------------------------*/\n\nconst ARROW_NAME = 'PopperArrow';\n\nconst OPPOSITE_SIDE: Record<Side, Side> = {\n  top: 'bottom',\n  right: 'left',\n  bottom: 'top',\n  left: 'right',\n};\n\ntype PopperArrowElement = React.ComponentRef<typeof ArrowPrimitive.Root>;\ntype ArrowProps = React.ComponentPropsWithoutRef<typeof ArrowPrimitive.Root>;\ninterface PopperArrowProps extends ArrowProps {}\n\nconst PopperArrow = React.forwardRef<PopperArrowElement, PopperArrowProps>(function PopperArrow(\n  props: ScopedProps<PopperArrowProps>,\n  forwardedRef\n) {\n  const { __scopePopper, ...arrowProps } = props;\n  const contentContext = useContentContext(ARROW_NAME, __scopePopper);\n  const baseSide = OPPOSITE_SIDE[contentContext.placedSide];\n\n  return (\n    // we have to use an extra wrapper because `ResizeObserver` (used by `useSize`)\n    // doesn't report size as we'd expect on SVG elements.\n    // it reports their bounding box which is effectively the largest path inside the SVG.\n    <span\n      ref={contentContext.onArrowChange}\n      style={{\n        position: 'absolute',\n        left: contentContext.arrowX,\n        top: contentContext.arrowY,\n        [baseSide]: 0,\n        transformOrigin: {\n          top: '',\n          right: '0 0',\n          bottom: 'center 0',\n          left: '100% 0',\n        }[contentContext.placedSide],\n        transform: {\n          top: 'translateY(100%)',\n          right: 'translateY(50%) rotate(90deg) translateX(-50%)',\n          bottom: `rotate(180deg)`,\n          left: 'translateY(50%) rotate(-90deg) translateX(50%)',\n        }[contentContext.placedSide],\n        visibility: contentContext.shouldHideArrow ? 'hidden' : undefined,\n      }}\n    >\n      <ArrowPrimitive.Root\n        {...arrowProps}\n        ref={forwardedRef}\n        style={{\n          ...arrowProps.style,\n          // ensures the element can be measured correctly (mostly for if SVG)\n          display: 'block',\n        }}\n      />\n    </span>\n  );\n});\n\nPopperArrow.displayName = ARROW_NAME;\n\n/* -----------------------------------------------------------------------------------------------*/\n\nfunction isNotNull<T>(value: T | null): value is T {\n  return value !== null;\n}\n\nconst transformOrigin = (options: { arrowWidth: number; arrowHeight: number }): Middleware => ({\n  name: 'transformOrigin',\n  options,\n  fn(data) {\n    const { placement, rects, middlewareData } = data;\n\n    const cannotCenterArrow = middlewareData.arrow?.centerOffset !== 0;\n    const isArrowHidden = cannotCenterArrow;\n    const arrowWidth = isArrowHidden ? 0 : options.arrowWidth;\n    const arrowHeight = isArrowHidden ? 0 : options.arrowHeight;\n\n    const [placedSide, placedAlign] = getSideAndAlignFromPlacement(placement);\n    const noArrowAlign = { start: '0%', center: '50%', end: '100%' }[placedAlign];\n\n    const arrowXCenter = (middlewareData.arrow?.x ?? 0) + arrowWidth / 2;\n    const arrowYCenter = (middlewareData.arrow?.y ?? 0) + arrowHeight / 2;\n\n    let x = '';\n    let y = '';\n\n    if (placedSide === 'bottom') {\n      x = isArrowHidden ? noArrowAlign : `${arrowXCenter}px`;\n      y = `${-arrowHeight}px`;\n    } else if (placedSide === 'top') {\n      x = isArrowHidden ? noArrowAlign : `${arrowXCenter}px`;\n      y = `${rects.floating.height + arrowHeight}px`;\n    } else if (placedSide === 'right') {\n      x = `${-arrowHeight}px`;\n      y = isArrowHidden ? noArrowAlign : `${arrowYCenter}px`;\n    } else if (placedSide === 'left') {\n      x = `${rects.floating.width + arrowHeight}px`;\n      y = isArrowHidden ? noArrowAlign : `${arrowYCenter}px`;\n    }\n    return { data: { x, y } };\n  },\n});\n\nfunction getSideAndAlignFromPlacement(placement: Placement) {\n  const [side, align = 'center'] = placement.split('-');\n  return [side as Side, align as Align] as const;\n}\n\nconst Root = Popper;\nconst Anchor = PopperAnchor;\nconst Content = PopperContent;\nconst Arrow = PopperArrow;\n\nexport {\n  createPopperScope,\n  //\n  Popper,\n  PopperAnchor,\n  PopperContent,\n  PopperArrow,\n  //\n  Root,\n  Anchor,\n  Content,\n  Arrow,\n  //\n  SIDE_OPTIONS,\n  ALIGN_OPTIONS,\n};\nexport type { PopperProps, PopperAnchorProps, PopperContentProps, PopperArrowProps };\n"],"names":["sides","floating_ui_utils_min","Math","min","floating_ui_utils_max","max","round","floor","createCoords","v","x","y","oppositeSideMap","left","right","bottom","top","oppositeAlignmentMap","start","end","floating_ui_utils_evaluate","value","param","floating_ui_utils_getSide","placement","split","floating_ui_utils_getAlignment","getOppositeAxis","axis","getAxisLength","yAxisSides","Set","floating_ui_utils_getSideAxis","has","floating_ui_utils_getOppositeAlignmentPlacement","replace","alignment","lrPlacement","rlPlacement","tbPlacement","btPlacement","getOppositePlacement","side","floating_ui_utils_getPaddingObject","padding","floating_ui_utils_rectToClientRect","rect","width","height","computeCoordsFromPlacement","_ref","rtl","coords","reference","floating","sideAxis","alignmentAxis","alignLength","isVertical","commonX","commonY","commonAlign","computePosition","config","strategy","middleware","platform","validMiddleware","filter","Boolean","isRTL","rects","getElementRects","statefulPlacement","middlewareData","resetCount","i","length","name","fn","nextX","nextY","data","reset","initialPlacement","elements","detectOverflow","state","options","_await$platform$isEle","boundary","rootBoundary","elementContext","altBoundary","paddingObject","element","clippingClientRect","getClippingRect","isElement","contextElement","getDocumentElement","offsetParent","getOffsetParent","offsetScale","getScale","elementClientRect","convertOffsetParentRelativeRectToViewportRelativeRect","getSideOffsets","overflow","isAnySideFullyClipped","some","originSides","convertValueToCoords","mainAxisMulti","crossAxisMulti","rawValue","mainAxis","crossAxis","hasWindow","window","getNodeName","node","nodeName","toLowerCase","getWindow","_node$ownerDocument","ownerDocument","defaultView","isNode","document","documentElement","Node","Element","isHTMLElement","HTMLElement","isShadowRoot","ShadowRoot","invalidOverflowDisplayValues","isOverflowElement","overflowX","overflowY","display","getComputedStyle","test","tableElements","topLayerSelectors","isTopLayer","selector","matches","_e","transformProperties","willChangeValues","containValues","isContainingBlock","elementOrCss","webkit","isWebKit","css","containerType","backdropFilter","willChange","includes","contain","CSS","supports","lastTraversableNodeNames","isLastTraversableNode","getNodeScroll","scrollLeft","scrollTop","scrollX","scrollY","getParentNode","result","assignedSlot","parentNode","host","getOverflowAncestors","list","traverseIframes","_node$ownerDocument2","scrollableAncestor","getNearestOverflowAncestor","body","isBody","win","frameElement","getFrameElement","concat","visualViewport","parent","Object","getPrototypeOf","getCssDimensions","parseFloat","hasOffset","offsetWidth","offsetHeight","shouldFallback","$","unwrapElement","domElement","getBoundingClientRect","Number","isFinite","noOffsets","getVisualOffsets","offsetLeft","offsetTop","includeScale","isFixedStrategy","isFixed","clientRect","scale","visualOffsets","shouldAddVisualOffsets","floatingOffsetParent","offsetWin","currentWin","currentIFrame","iframeScale","iframeRect","clientLeft","paddingLeft","clientTop","paddingTop","getWindowScrollBarX","leftScroll","getHTMLOffset","scroll","ignoreScrollbarX","htmlRect","absoluteOrFixed","getClientRectFromClippingAncestor","clippingAncestor","getViewportRect","html","clientWidth","clientHeight","visualViewportBased","getDocumentRect","scrollWidth","scrollHeight","direction","getInnerBoundingClientRect","isStaticPositioned","position","getTrueOffsetParent","polyfill","rawOffsetParent","svgOffsetParent","getContainingBlock","currentNode","getOffsetParentFn","getDimensionsFn","getDimensions","floatingDimensions","getRectRelativeToOffsetParent","isOffsetParentAnElement","offsets","offsetRect","htmlOffset","topLayer","clippingAncestors","getClippingElementAncestors","cache","cachedResult","get","el","currentContainingBlockComputedStyle","elementIsFixed","computedStyle","currentNodeIsContaining","hasFixedPositionAncestor","stopNode","ancestor","set","_c","firstClippingAncestor","clippingRect","reduce","accRect","getClientRects","Array","from","rectsAreEqual","a","b","autoUpdate","update","frameId","ancestorScroll","ancestorResize","elementResize","ResizeObserver","layoutShift","IntersectionObserver","animationFrame","referenceEl","ancestors","forEach","addEventListener","passive","cleanupIo","observeMove","onMove","timeoutId","io","root","cleanup","_io","clearTimeout","disconnect","refresh","skip","threshold","elementRectForRootMargin","insetTop","insetRight","rootMargin","isFirstUpdate","handleObserve","entries","ratio","intersectionRatio","setTimeout","observe","reobserveFrame","resizeObserver","firstEntry","target","unobserve","cancelAnimationFrame","requestAnimationFrame","_resizeObserver","prevRefRect","frameLoop","nextRefRect","_resizeObserver2","removeEventListener","floating_ui_dom_offset","_middlewareData$offse","_middlewareData$arrow","diffCoords","offset","arrow","alignmentOffset","floating_ui_dom_shift","checkMainAxis","checkCrossAxis","limiter","detectOverflowOptions","mainAxisCoord","crossAxisCoord","minSide","maxSide","limitedCoords","enabled","floating_ui_dom_flip","_middlewareData$flip","_middlewareData$flip2","_overflowsData$filter","_overflowsData$filter2","fallbackPlacements","specifiedFallbackPlacements","fallbackStrategy","fallbackAxisSideDirection","flipAlignment","initialSideAxis","isBasePlacement","getExpandedPlacements","oppositePlacement","hasFallbackAxisSideDirection","push","getOppositeAxisPlacements","getSideList","isStart","map","placements","overflows","overflowsData","flip","floating_ui_utils_getAlignmentSides","mainAlignmentSide","every","nextIndex","index","nextPlacement","d","resetPlacement","sort","currentSideAxis","acc","floating_ui_dom_size","_state$middlewareData","_state$middlewareData2","heightSide","widthSide","apply","isYAxis","maximumClippingHeight","maximumClippingWidth","overflowAvailableHeight","overflowAvailableWidth","noShift","shift","availableHeight","availableWidth","xMin","xMax","yMin","yMax","nextDimensions","floating_ui_dom_hide","referenceHiddenOffsets","referenceHidden","escapedOffsets","escaped","floating_ui_dom_arrow","arrowDimensions","clientProp","endDiff","startDiff","arrowOffsetParent","clientSize","largestPossiblePadding","minPadding","maxPadding","center","shouldAddOffset","centerOffset","floating_ui_dom_limitShift","rawOffset","computedOffset","len","limitMin","limitMax","_middlewareData$offse2","isOriginSide","floating_ui_dom_computePosition","Map","mergedOptions","platformWithCache","isClient","react__WEBPACK_IMPORTED_MODULE_0__","useLayoutEffect","deepEqual","keys","toString","isArray","hasOwnProperty","call","key","$$typeof","getDPR","devicePixelRatio","roundByDPR","dpr","useLatestRef","ref","useRef","current","useFloating","externalReference","externalFloating","transform","whileElementsMounted","open","setData","useState","isPositioned","latestMiddleware","setLatestMiddleware","_reference","_setReference","_floating","_setFloating","setReference","useCallback","referenceRef","setFloating","floatingRef","floatingEl","dataRef","hasWhileElementsMounted","whileElementsMountedRef","platformRef","openRef","_floating_ui_dom__WEBPACK_IMPORTED_MODULE_2__","oo","then","fullData","isMountedRef","react_dom__WEBPACK_IMPORTED_MODULE_1__","flushSync","refs","useMemo","floatingStyles","initialStyles","arrow$1","x7","deps","cv","uY","limitShift","dr","RR","size","dp","hide","Cp","Arrow","forwardRef","props","forwardedRef","children","arrowProps","react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__","jsx","_radix_ui_react_primitive__WEBPACK_IMPORTED_MODULE_2__","WV","svg","viewBox","preserveAspectRatio","asChild","points","displayName","Root","originalBodyPointerEvents","CONTEXT_UPDATE","DismissableLayerContext","React","layers","layersWithOutsidePointerEventsDisabled","branches","DismissableLayer","globalThis","disableOutsidePointerEvents","onEscapeKeyDown","onPointerDownOutside","onFocusOutside","onInteractOutside","onDismiss","layerProps","context","setNode","force","composedRefs","useComposedRefs","highestLayerWithOutsidePointerEventsDisabled","slice","highestLayerWithOutsidePointerEventsDisabledIndex","indexOf","isBodyPointerEventsDisabled","isPointerEventsEnabled","pointerDownOutside","usePointerDownOutside","handlePointerDownOutside","useCallbackRef","isPointerInsideReactTreeRef","handleClickRef","handlePointerDown","event","handleAndDispatchPointerDownOutsideEvent","handleAndDispatchCustomEvent","eventDetail","discrete","originalEvent","pointerType","once","timerId","onPointerDownCapture","isPointerDownOnBranch","branch","contains","defaultPrevented","focusOutside","useFocusOutside","handleFocusOutside","isFocusInsideReactTreeRef","handleFocus","onFocusCapture","onBlurCapture","useEscapeKeydown","preventDefault","style","pointerEvents","add","dispatchUpdate","delete","handleUpdate","Primitive","div","composeEventHandlers","DismissableLayerBranch","CustomEvent","dispatchEvent","handler","detail","bubbles","cancelable","dispatchDiscreteCustomEvent","Branch","count","useFocusGuards","edgeGuards","querySelectorAll","insertAdjacentElement","createFocusGuard","remove","createElement","setAttribute","tabIndex","outline","opacity","POPPER_NAME","createPopperContext","createPopperScope","createContextScope","PopperProvider","usePopperContext","Popper","__scopePopper","anchor","setAnchor","scope","onAnchorChange","ANCHOR_NAME","PopperAnchor","virtualRef","anchorProps","CONTENT_NAME","PopperContentProvider","useContentContext","PopperContent","arrowSize","sideOffset","align","alignOffset","arrowPadding","avoidCollisions","collisionBoundary","collisionPadding","collisionPaddingProp","sticky","hideWhenDetached","updatePositionStrategy","onPlaced","contentProps","content","setContent","setArrow","useSize","arrowWidth","arrowHeight","hasExplicitBoundaries","isNotNull","args","anchorWidth","anchorHeight","contentStyle","setProperty","floatingUIarrow","transformOrigin","placedSide","placedAlign","getSideAndAlignFromPlacement","handlePlaced","arrowX","arrowY","cannotCenterArrow","contentZIndex","setContentZIndex","zIndex","minWidth","join","visibility","dir","onArrowChange","shouldHideArrow","animation","ARROW_NAME","OPPOSITE_SIDE","PopperArrow","contentContext","baseSide","ArrowPrimitive","isArrowHidden","noArrowAlign","arrowXCenter","arrowYCenter","Anchor","Content"],"sourceRoot":""}