{"version":3,"file":"static/chunks/3369.c4f14ab96b9ccb3c.js","mappings":"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","sources":["webpack://_N_E/./node_modules/codemirror/addon/edit/closebrackets.js"],"sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/5/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  var defaults = {\n    pairs: \"()[]{}''\\\"\\\"\",\n    closeBefore: \")]}'\\\":;>\",\n    triples: \"\",\n    explode: \"[]{}\"\n  };\n\n  var Pos = CodeMirror.Pos;\n\n  CodeMirror.defineOption(\"autoCloseBrackets\", false, function(cm, val, old) {\n    if (old && old != CodeMirror.Init) {\n      cm.removeKeyMap(keyMap);\n      cm.state.closeBrackets = null;\n    }\n    if (val) {\n      ensureBound(getOption(val, \"pairs\"))\n      cm.state.closeBrackets = val;\n      cm.addKeyMap(keyMap);\n    }\n  });\n\n  function getOption(conf, name) {\n    if (name == \"pairs\" && typeof conf == \"string\") return conf;\n    if (typeof conf == \"object\" && conf[name] != null) return conf[name];\n    return defaults[name];\n  }\n\n  var keyMap = {Backspace: handleBackspace, Enter: handleEnter};\n  function ensureBound(chars) {\n    for (var i = 0; i < chars.length; i++) {\n      var ch = chars.charAt(i), key = \"'\" + ch + \"'\"\n      if (!keyMap[key]) keyMap[key] = handler(ch)\n    }\n  }\n  ensureBound(defaults.pairs + \"`\")\n\n  function handler(ch) {\n    return function(cm) { return handleChar(cm, ch); };\n  }\n\n  function getConfig(cm) {\n    var deflt = cm.state.closeBrackets;\n    if (!deflt || deflt.override) return deflt;\n    var mode = cm.getModeAt(cm.getCursor());\n    return mode.closeBrackets || deflt;\n  }\n\n  function handleBackspace(cm) {\n    var conf = getConfig(cm);\n    if (!conf || cm.getOption(\"disableInput\")) return CodeMirror.Pass;\n\n    var pairs = getOption(conf, \"pairs\");\n    var ranges = cm.listSelections();\n    for (var i = 0; i < ranges.length; i++) {\n      if (!ranges[i].empty()) return CodeMirror.Pass;\n      var around = charsAround(cm, ranges[i].head);\n      if (!around || pairs.indexOf(around) % 2 != 0) return CodeMirror.Pass;\n    }\n    for (var i = ranges.length - 1; i >= 0; i--) {\n      var cur = ranges[i].head;\n      cm.replaceRange(\"\", Pos(cur.line, cur.ch - 1), Pos(cur.line, cur.ch + 1), \"+delete\");\n    }\n  }\n\n  function handleEnter(cm) {\n    var conf = getConfig(cm);\n    var explode = conf && getOption(conf, \"explode\");\n    if (!explode || cm.getOption(\"disableInput\")) return CodeMirror.Pass;\n\n    var ranges = cm.listSelections();\n    for (var i = 0; i < ranges.length; i++) {\n      if (!ranges[i].empty()) return CodeMirror.Pass;\n      var around = charsAround(cm, ranges[i].head);\n      if (!around || explode.indexOf(around) % 2 != 0) return CodeMirror.Pass;\n    }\n    cm.operation(function() {\n      var linesep = cm.lineSeparator() || \"\\n\";\n      cm.replaceSelection(linesep + linesep, null);\n      moveSel(cm, -1)\n      ranges = cm.listSelections();\n      for (var i = 0; i < ranges.length; i++) {\n        var line = ranges[i].head.line;\n        cm.indentLine(line, null, true);\n        cm.indentLine(line + 1, null, true);\n      }\n    });\n  }\n\n  function moveSel(cm, dir) {\n    var newRanges = [], ranges = cm.listSelections(), primary = 0\n    for (var i = 0; i < ranges.length; i++) {\n      var range = ranges[i]\n      if (range.head == cm.getCursor()) primary = i\n      var pos = range.head.ch || dir > 0 ? {line: range.head.line, ch: range.head.ch + dir} : {line: range.head.line - 1}\n      newRanges.push({anchor: pos, head: pos})\n    }\n    cm.setSelections(newRanges, primary)\n  }\n\n  function contractSelection(sel) {\n    var inverted = CodeMirror.cmpPos(sel.anchor, sel.head) > 0;\n    return {anchor: new Pos(sel.anchor.line, sel.anchor.ch + (inverted ? -1 : 1)),\n            head: new Pos(sel.head.line, sel.head.ch + (inverted ? 1 : -1))};\n  }\n\n  function handleChar(cm, ch) {\n    var conf = getConfig(cm);\n    if (!conf || cm.getOption(\"disableInput\")) return CodeMirror.Pass;\n\n    var pairs = getOption(conf, \"pairs\");\n    var pos = pairs.indexOf(ch);\n    if (pos == -1) return CodeMirror.Pass;\n\n    var closeBefore = getOption(conf,\"closeBefore\");\n\n    var triples = getOption(conf, \"triples\");\n\n    var identical = pairs.charAt(pos + 1) == ch;\n    var ranges = cm.listSelections();\n    var opening = pos % 2 == 0;\n\n    var type;\n    for (var i = 0; i < ranges.length; i++) {\n      var range = ranges[i], cur = range.head, curType;\n      var next = cm.getRange(cur, Pos(cur.line, cur.ch + 1));\n      if (opening && !range.empty()) {\n        curType = \"surround\";\n      } else if ((identical || !opening) && next == ch) {\n        if (identical && stringStartsAfter(cm, cur))\n          curType = \"both\";\n        else if (triples.indexOf(ch) >= 0 && cm.getRange(cur, Pos(cur.line, cur.ch + 3)) == ch + ch + ch)\n          curType = \"skipThree\";\n        else\n          curType = \"skip\";\n      } else if (identical && cur.ch > 1 && triples.indexOf(ch) >= 0 &&\n                 cm.getRange(Pos(cur.line, cur.ch - 2), cur) == ch + ch) {\n        if (cur.ch > 2 && /\\bstring/.test(cm.getTokenTypeAt(Pos(cur.line, cur.ch - 2)))) return CodeMirror.Pass;\n        curType = \"addFour\";\n      } else if (identical) {\n        var prev = cur.ch == 0 ? \" \" : cm.getRange(Pos(cur.line, cur.ch - 1), cur)\n        if (!CodeMirror.isWordChar(next) && prev != ch && !CodeMirror.isWordChar(prev)) curType = \"both\";\n        else return CodeMirror.Pass;\n      } else if (opening && (next.length === 0 || /\\s/.test(next) || closeBefore.indexOf(next) > -1)) {\n        curType = \"both\";\n      } else {\n        return CodeMirror.Pass;\n      }\n      if (!type) type = curType;\n      else if (type != curType) return CodeMirror.Pass;\n    }\n\n    var left = pos % 2 ? pairs.charAt(pos - 1) : ch;\n    var right = pos % 2 ? ch : pairs.charAt(pos + 1);\n    cm.operation(function() {\n      if (type == \"skip\") {\n        moveSel(cm, 1)\n      } else if (type == \"skipThree\") {\n        moveSel(cm, 3)\n      } else if (type == \"surround\") {\n        var sels = cm.getSelections();\n        for (var i = 0; i < sels.length; i++)\n          sels[i] = left + sels[i] + right;\n        cm.replaceSelections(sels, \"around\");\n        sels = cm.listSelections().slice();\n        for (var i = 0; i < sels.length; i++)\n          sels[i] = contractSelection(sels[i]);\n        cm.setSelections(sels);\n      } else if (type == \"both\") {\n        cm.replaceSelection(left + right, null);\n        cm.triggerElectric(left + right);\n        moveSel(cm, -1)\n      } else if (type == \"addFour\") {\n        cm.replaceSelection(left + left + left + left, \"before\");\n        moveSel(cm, 1)\n      }\n    });\n  }\n\n  function charsAround(cm, pos) {\n    var str = cm.getRange(Pos(pos.line, pos.ch - 1),\n                          Pos(pos.line, pos.ch + 1));\n    return str.length == 2 ? str : null;\n  }\n\n  function stringStartsAfter(cm, pos) {\n    var token = cm.getTokenAt(Pos(pos.line, pos.ch + 1))\n    return /\\bstring/.test(token.type) && token.start == pos.ch &&\n      (pos.ch == 0 || !/\\bstring/.test(cm.getTokenTypeAt(pos)))\n  }\n});\n"],"names":["mod","CodeMirror","defaults","pairs","closeBefore","triples","explode","Pos","getOption","conf","name","defineOption","cm","val","old","Init","removeKeyMap","keyMap","state","closeBrackets","ensureBound","addKeyMap","Backspace","getConfig","Pass","ranges","listSelections","i","length","empty","around","charsAround","head","indexOf","cur","replaceRange","line","ch","Enter","operation","linesep","lineSeparator","replaceSelection","moveSel","indentLine","chars","charAt","key","handler","handleChar","pos","identical","opening","type","curType","range","next","getRange","stringStartsAfter","token","getTokenAt","test","start","getTokenTypeAt","prev","isWordChar","left","right","sels","getSelections","replaceSelections","slice","contractSelection","sel","inverted","cmpPos","anchor","setSelections","triggerElectric","deflt","override","mode","getModeAt","getCursor","dir","newRanges","primary","push","str","__webpack_require__"],"sourceRoot":""}