{"version":3,"file":"static/chunks/6607.20d3eebe0ff2a00a.js","mappings":"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","sources":["webpack://_N_E/./node_modules/codemirror-graphql/esm/utils/jsonParse.js","webpack://_N_E/./node_modules/codemirror-graphql/esm/variables/lint.js"],"sourcesContent":["export default function jsonParse(str) {\n    string = str;\n    strLen = str.length;\n    start = end = lastEnd = -1;\n    ch();\n    lex();\n    const ast = parseObj();\n    expect('EOF');\n    return ast;\n}\nlet string;\nlet strLen;\nlet start;\nlet end;\nlet lastEnd;\nlet code;\nlet kind;\nfunction parseObj() {\n    const nodeStart = start;\n    const members = [];\n    expect('{');\n    if (!skip('}')) {\n        do {\n            members.push(parseMember());\n        } while (skip(','));\n        expect('}');\n    }\n    return {\n        kind: 'Object',\n        start: nodeStart,\n        end: lastEnd,\n        members,\n    };\n}\nfunction parseMember() {\n    const nodeStart = start;\n    const key = kind === 'String' ? curToken() : null;\n    expect('String');\n    expect(':');\n    const value = parseVal();\n    return {\n        kind: 'Member',\n        start: nodeStart,\n        end: lastEnd,\n        key,\n        value,\n    };\n}\nfunction parseArr() {\n    const nodeStart = start;\n    const values = [];\n    expect('[');\n    if (!skip(']')) {\n        do {\n            values.push(parseVal());\n        } while (skip(','));\n        expect(']');\n    }\n    return {\n        kind: 'Array',\n        start: nodeStart,\n        end: lastEnd,\n        values,\n    };\n}\nfunction parseVal() {\n    switch (kind) {\n        case '[':\n            return parseArr();\n        case '{':\n            return parseObj();\n        case 'String':\n        case 'Number':\n        case 'Boolean':\n        case 'Null':\n            const token = curToken();\n            lex();\n            return token;\n    }\n    expect('Value');\n}\nfunction curToken() {\n    return { kind, start, end, value: JSON.parse(string.slice(start, end)) };\n}\nfunction expect(str) {\n    if (kind === str) {\n        lex();\n        return;\n    }\n    let found;\n    if (kind === 'EOF') {\n        found = '[end of file]';\n    }\n    else if (end - start > 1) {\n        found = '`' + string.slice(start, end) + '`';\n    }\n    else {\n        const match = string.slice(start).match(/^.+?\\b/);\n        found = '`' + (match ? match[0] : string[start]) + '`';\n    }\n    throw syntaxError(`Expected ${str} but found ${found}.`);\n}\nexport class JSONSyntaxError extends Error {\n    constructor(message, position) {\n        super(message);\n        this.position = position;\n    }\n}\nfunction syntaxError(message) {\n    return new JSONSyntaxError(message, { start, end });\n}\nfunction skip(k) {\n    if (kind === k) {\n        lex();\n        return true;\n    }\n}\nfunction ch() {\n    if (end < strLen) {\n        end++;\n        code = end === strLen ? 0 : string.charCodeAt(end);\n    }\n    return code;\n}\nfunction lex() {\n    lastEnd = end;\n    while (code === 9 || code === 10 || code === 13 || code === 32) {\n        ch();\n    }\n    if (code === 0) {\n        kind = 'EOF';\n        return;\n    }\n    start = end;\n    switch (code) {\n        case 34:\n            kind = 'String';\n            return readString();\n        case 45:\n        case 48:\n        case 49:\n        case 50:\n        case 51:\n        case 52:\n        case 53:\n        case 54:\n        case 55:\n        case 56:\n        case 57:\n            kind = 'Number';\n            return readNumber();\n        case 102:\n            if (string.slice(start, start + 5) !== 'false') {\n                break;\n            }\n            end += 4;\n            ch();\n            kind = 'Boolean';\n            return;\n        case 110:\n            if (string.slice(start, start + 4) !== 'null') {\n                break;\n            }\n            end += 3;\n            ch();\n            kind = 'Null';\n            return;\n        case 116:\n            if (string.slice(start, start + 4) !== 'true') {\n                break;\n            }\n            end += 3;\n            ch();\n            kind = 'Boolean';\n            return;\n    }\n    kind = string[start];\n    ch();\n}\nfunction readString() {\n    ch();\n    while (code !== 34 && code > 31) {\n        if (code === 92) {\n            code = ch();\n            switch (code) {\n                case 34:\n                case 47:\n                case 92:\n                case 98:\n                case 102:\n                case 110:\n                case 114:\n                case 116:\n                    ch();\n                    break;\n                case 117:\n                    ch();\n                    readHex();\n                    readHex();\n                    readHex();\n                    readHex();\n                    break;\n                default:\n                    throw syntaxError('Bad character escape sequence.');\n            }\n        }\n        else if (end === strLen) {\n            throw syntaxError('Unterminated string.');\n        }\n        else {\n            ch();\n        }\n    }\n    if (code === 34) {\n        ch();\n        return;\n    }\n    throw syntaxError('Unterminated string.');\n}\nfunction readHex() {\n    if ((code >= 48 && code <= 57) ||\n        (code >= 65 && code <= 70) ||\n        (code >= 97 && code <= 102)) {\n        return ch();\n    }\n    throw syntaxError('Expected hexadecimal digit.');\n}\nfunction readNumber() {\n    if (code === 45) {\n        ch();\n    }\n    if (code === 48) {\n        ch();\n    }\n    else {\n        readDigits();\n    }\n    if (code === 46) {\n        ch();\n        readDigits();\n    }\n    if (code === 69 || code === 101) {\n        code = ch();\n        if (code === 43 || code === 45) {\n            ch();\n        }\n        readDigits();\n    }\n}\nfunction readDigits() {\n    if (code < 48 || code > 57) {\n        throw syntaxError('Expected decimal digit.');\n    }\n    do {\n        ch();\n    } while (code >= 48 && code <= 57);\n}\n//# sourceMappingURL=jsonParse.js.map","import CodeMirror from 'codemirror';\nimport { GraphQLEnumType, GraphQLInputObjectType, GraphQLList, GraphQLNonNull, GraphQLScalarType, } from 'graphql';\nimport jsonParse, { JSONSyntaxError, } from '../utils/jsonParse';\nCodeMirror.registerHelper('lint', 'graphql-variables', (text, options, editor) => {\n    if (!text) {\n        return [];\n    }\n    let ast;\n    try {\n        ast = jsonParse(text);\n    }\n    catch (error) {\n        if (error instanceof JSONSyntaxError) {\n            return [lintError(editor, error.position, error.message)];\n        }\n        throw error;\n    }\n    const { variableToType } = options;\n    if (!variableToType) {\n        return [];\n    }\n    return validateVariables(editor, variableToType, ast);\n});\nfunction validateVariables(editor, variableToType, variablesAST) {\n    var _a;\n    const errors = [];\n    for (const member of variablesAST.members) {\n        if (member) {\n            const variableName = (_a = member.key) === null || _a === void 0 ? void 0 : _a.value;\n            const type = variableToType[variableName];\n            if (type) {\n                for (const [node, message] of validateValue(type, member.value)) {\n                    errors.push(lintError(editor, node, message));\n                }\n            }\n            else {\n                errors.push(lintError(editor, member.key, `Variable \"$${variableName}\" does not appear in any GraphQL query.`));\n            }\n        }\n    }\n    return errors;\n}\nfunction validateValue(type, valueAST) {\n    if (!type || !valueAST) {\n        return [];\n    }\n    if (type instanceof GraphQLNonNull) {\n        if (valueAST.kind === 'Null') {\n            return [[valueAST, `Type \"${type}\" is non-nullable and cannot be null.`]];\n        }\n        return validateValue(type.ofType, valueAST);\n    }\n    if (valueAST.kind === 'Null') {\n        return [];\n    }\n    if (type instanceof GraphQLList) {\n        const itemType = type.ofType;\n        if (valueAST.kind === 'Array') {\n            const values = valueAST.values || [];\n            return mapCat(values, item => validateValue(itemType, item));\n        }\n        return validateValue(itemType, valueAST);\n    }\n    if (type instanceof GraphQLInputObjectType) {\n        if (valueAST.kind !== 'Object') {\n            return [[valueAST, `Type \"${type}\" must be an Object.`]];\n        }\n        const providedFields = Object.create(null);\n        const fieldErrors = mapCat(valueAST.members, member => {\n            var _a;\n            const fieldName = (_a = member === null || member === void 0 ? void 0 : member.key) === null || _a === void 0 ? void 0 : _a.value;\n            providedFields[fieldName] = true;\n            const inputField = type.getFields()[fieldName];\n            if (!inputField) {\n                return [\n                    [\n                        member.key,\n                        `Type \"${type}\" does not have a field \"${fieldName}\".`,\n                    ],\n                ];\n            }\n            const fieldType = inputField ? inputField.type : undefined;\n            return validateValue(fieldType, member.value);\n        });\n        for (const fieldName of Object.keys(type.getFields())) {\n            const field = type.getFields()[fieldName];\n            if (!providedFields[fieldName] &&\n                field.type instanceof GraphQLNonNull &&\n                !field.defaultValue) {\n                fieldErrors.push([\n                    valueAST,\n                    `Object of type \"${type}\" is missing required field \"${fieldName}\".`,\n                ]);\n            }\n        }\n        return fieldErrors;\n    }\n    if ((type.name === 'Boolean' && valueAST.kind !== 'Boolean') ||\n        (type.name === 'String' && valueAST.kind !== 'String') ||\n        (type.name === 'ID' &&\n            valueAST.kind !== 'Number' &&\n            valueAST.kind !== 'String') ||\n        (type.name === 'Float' && valueAST.kind !== 'Number') ||\n        (type.name === 'Int' &&\n            (valueAST.kind !== 'Number' || (valueAST.value | 0) !== valueAST.value))) {\n        return [[valueAST, `Expected value of type \"${type}\".`]];\n    }\n    if ((type instanceof GraphQLEnumType || type instanceof GraphQLScalarType) &&\n        ((valueAST.kind !== 'String' &&\n            valueAST.kind !== 'Number' &&\n            valueAST.kind !== 'Boolean' &&\n            valueAST.kind !== 'Null') ||\n            isNullish(type.parseValue(valueAST.value)))) {\n        return [[valueAST, `Expected value of type \"${type}\".`]];\n    }\n    return [];\n}\nfunction lintError(editor, node, message) {\n    return {\n        message,\n        severity: 'error',\n        type: 'validation',\n        from: editor.posFromIndex(node.start),\n        to: editor.posFromIndex(node.end),\n    };\n}\nfunction isNullish(value) {\n    return value === null || value === undefined || value !== value;\n}\nfunction mapCat(array, mapper) {\n    return Array.prototype.concat.apply([], array.map(mapper));\n}\n//# sourceMappingURL=lint.js.map"],"names":["string","strLen","start","end","lastEnd","code","kind","curToken","value","JSON","parse","slice","expect","str","found","lex","match","syntaxError","JSONSyntaxError","Error","constructor","message","position","skip","k","ch","charCodeAt","readString","readHex","readDigits","lintError","editor","node","severity","type","from","posFromIndex","to","mapCat","array","mapper","Array","prototype","concat","apply","map","codemirror_default","registerHelper","text","options","ast","jsonParse","length","parseObj","nodeStart","members","push","parseMember","key","parseVal","parseArr","values","token","error","variableToType","validateVariables","variablesAST","_a","errors","member","variableName","validateValue","valueAST","definition","bM","ofType","p2","itemType","item","sR","providedFields","Object","create","fieldErrors","fieldName","inputField","getFields","undefined","keys","field","defaultValue","name","mR","n2","parseValue"],"sourceRoot":""}